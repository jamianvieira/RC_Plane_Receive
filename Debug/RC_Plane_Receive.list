
RC_Plane_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d10  08006d10  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006d10  08006d10  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d10  08006d10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000078  08006d8c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08006d8c  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012edc  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f9  00000000  00000000  00032f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00035478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00036430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f39  00000000  00000000  00037310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111dc  00000000  00000000  00049249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006993f  00000000  00000000  0005a425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004278  00000000  00000000  000c3db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080066a4 	.word	0x080066a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080066a4 	.word	0x080066a4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <NRF24_DelayMicroSeconds+0x38>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	490a      	ldr	r1, [pc, #40]	; (8000454 <NRF24_DelayMicroSeconds+0x3c>)
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff fe7e 	bl	800012c <__udivsi3>
 8000430:	0003      	movs	r3, r0
 8000432:	001a      	movs	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	4353      	muls	r3, r2
 8000438:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	1e5a      	subs	r2, r3, #1
 8000440:	60fa      	str	r2, [r7, #12]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d1fa      	bne.n	800043c <NRF24_DelayMicroSeconds+0x24>
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b004      	add	sp, #16
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000008 	.word	0x20000008
 8000454:	002dc6c0 	.word	0x002dc6c0

08000458 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <NRF24_csn+0x20>
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <NRF24_csn+0x38>)
 8000468:	6818      	ldr	r0, [r3, #0]
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <NRF24_csn+0x3c>)
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	2201      	movs	r2, #1
 8000470:	0019      	movs	r1, r3
 8000472:	f002 f927 	bl	80026c4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000476:	e007      	b.n	8000488 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <NRF24_csn+0x38>)
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <NRF24_csn+0x3c>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	2200      	movs	r2, #0
 8000482:	0019      	movs	r1, r3
 8000484:	f002 f91e 	bl	80026c4 <HAL_GPIO_WritePin>
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200000a4 	.word	0x200000a4
 8000494:	200000a8 	.word	0x200000a8

08000498 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d008      	beq.n	80004b8 <NRF24_ce+0x20>
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <NRF24_ce+0x38>)
 80004a8:	6818      	ldr	r0, [r3, #0]
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <NRF24_ce+0x3c>)
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	2201      	movs	r2, #1
 80004b0:	0019      	movs	r1, r3
 80004b2:	f002 f907 	bl	80026c4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80004b6:	e007      	b.n	80004c8 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <NRF24_ce+0x38>)
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <NRF24_ce+0x3c>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	2200      	movs	r2, #0
 80004c2:	0019      	movs	r1, r3
 80004c4:	f002 f8fe 	bl	80026c4 <HAL_GPIO_WritePin>
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b002      	add	sp, #8
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	200000a4 	.word	0x200000a4
 80004d4:	200000aa 	.word	0x200000aa

080004d8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	0002      	movs	r2, r0
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff ffb7 	bl	8000458 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	221f      	movs	r2, #31
 80004f0:	4013      	ands	r3, r2
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	240c      	movs	r4, #12
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80004fa:	1939      	adds	r1, r7, r4
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <NRF24_read_register+0x58>)
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	2201      	movs	r2, #1
 8000502:	f002 fe4b 	bl	800319c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000506:	193b      	adds	r3, r7, r4
 8000508:	1c59      	adds	r1, r3, #1
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <NRF24_read_register+0x58>)
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	2201      	movs	r2, #1
 8000510:	f002 ff9c 	bl	800344c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000514:	250f      	movs	r5, #15
 8000516:	197b      	adds	r3, r7, r5
 8000518:	193a      	adds	r2, r7, r4
 800051a:	7852      	ldrb	r2, [r2, #1]
 800051c:	701a      	strb	r2, [r3, #0]
	//Bring CSN high
	NRF24_csn(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f7ff ff9a 	bl	8000458 <NRF24_csn>
	return retData;
 8000524:	197b      	adds	r3, r7, r5
 8000526:	781b      	ldrb	r3, [r3, #0]
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b004      	add	sp, #16
 800052e:	bdb0      	pop	{r4, r5, r7, pc}
 8000530:	200000ac 	.word	0x200000ac

08000534 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6039      	str	r1, [r7, #0]
 800053c:	0011      	movs	r1, r2
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	1c02      	adds	r2, r0, #0
 8000542:	701a      	strb	r2, [r3, #0]
 8000544:	1dbb      	adds	r3, r7, #6
 8000546:	1c0a      	adds	r2, r1, #0
 8000548:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff ff84 	bl	8000458 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	221f      	movs	r2, #31
 8000556:	4013      	ands	r3, r2
 8000558:	b2da      	uxtb	r2, r3
 800055a:	210c      	movs	r1, #12
 800055c:	187b      	adds	r3, r7, r1
 800055e:	701a      	strb	r2, [r3, #0]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000560:	1879      	adds	r1, r7, r1
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <NRF24_read_registerN+0x58>)
 8000564:	2364      	movs	r3, #100	; 0x64
 8000566:	2201      	movs	r2, #1
 8000568:	f002 fe18 	bl	800319c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800056c:	1dbb      	adds	r3, r7, #6
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b29a      	uxth	r2, r3
 8000572:	6839      	ldr	r1, [r7, #0]
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <NRF24_read_registerN+0x58>)
 8000576:	2364      	movs	r3, #100	; 0x64
 8000578:	f002 ff68 	bl	800344c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f7ff ff6b 	bl	8000458 <NRF24_csn>
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b004      	add	sp, #16
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	200000ac 	.word	0x200000ac

08000590 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	0002      	movs	r2, r0
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	1dbb      	adds	r3, r7, #6
 800059e:	1c0a      	adds	r2, r1, #0
 80005a0:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff ff58 	bl	8000458 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2220      	movs	r2, #32
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	210c      	movs	r1, #12
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = value;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	1dba      	adds	r2, r7, #6
 80005bc:	7812      	ldrb	r2, [r2, #0]
 80005be:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80005c0:	1879      	adds	r1, r7, r1
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <NRF24_write_register+0x4c>)
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	2202      	movs	r2, #2
 80005c8:	f002 fde8 	bl	800319c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff ff43 	bl	8000458 <NRF24_csn>
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b004      	add	sp, #16
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	200000ac 	.word	0x200000ac

080005e0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6039      	str	r1, [r7, #0]
 80005e8:	0011      	movs	r1, r2
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	1c02      	adds	r2, r0, #0
 80005ee:	701a      	strb	r2, [r3, #0]
 80005f0:	1dbb      	adds	r3, r7, #6
 80005f2:	1c0a      	adds	r2, r1, #0
 80005f4:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff ff2e 	bl	8000458 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2220      	movs	r2, #32
 8000602:	4313      	orrs	r3, r2
 8000604:	b2da      	uxtb	r2, r3
 8000606:	210c      	movs	r1, #12
 8000608:	187b      	adds	r3, r7, r1
 800060a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800060c:	1879      	adds	r1, r7, r1
 800060e:	480a      	ldr	r0, [pc, #40]	; (8000638 <NRF24_write_registerN+0x58>)
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2201      	movs	r2, #1
 8000614:	f002 fdc2 	bl	800319c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000618:	1dbb      	adds	r3, r7, #6
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b29a      	uxth	r2, r3
 800061e:	6839      	ldr	r1, [r7, #0]
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <NRF24_write_registerN+0x58>)
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	f002 fdba 	bl	800319c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff ff15 	bl	8000458 <NRF24_csn>
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b004      	add	sp, #16
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	200000ac 	.word	0x200000ac

0800063c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	000a      	movs	r2, r1
 8000646:	1cfb      	adds	r3, r7, #3
 8000648:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800064a:	f000 fa63 	bl	8000b14 <NRF24_getPayloadSize>
 800064e:	0003      	movs	r3, r0
 8000650:	001a      	movs	r2, r3
 8000652:	1cfb      	adds	r3, r7, #3
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4293      	cmp	r3, r2
 8000658:	d304      	bcc.n	8000664 <NRF24_read_payload+0x28>
 800065a:	f000 fa5b 	bl	8000b14 <NRF24_getPayloadSize>
 800065e:	0003      	movs	r3, r0
 8000660:	001a      	movs	r2, r3
 8000662:	e001      	b.n	8000668 <NRF24_read_payload+0x2c>
 8000664:	1cfb      	adds	r3, r7, #3
 8000666:	781a      	ldrb	r2, [r3, #0]
 8000668:	240f      	movs	r4, #15
 800066a:	193b      	adds	r3, r7, r4
 800066c:	701a      	strb	r2, [r3, #0]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff fef2 	bl	8000458 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000674:	210e      	movs	r1, #14
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2261      	movs	r2, #97	; 0x61
 800067a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800067c:	1879      	adds	r1, r7, r1
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <NRF24_read_payload+0x6c>)
 8000680:	2364      	movs	r3, #100	; 0x64
 8000682:	2201      	movs	r2, #1
 8000684:	f002 fd8a 	bl	800319c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000688:	193b      	adds	r3, r7, r4
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b29a      	uxth	r2, r3
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <NRF24_read_payload+0x6c>)
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	f002 feda 	bl	800344c <HAL_SPI_Receive>
	NRF24_csn(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f7ff fedd 	bl	8000458 <NRF24_csn>
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b005      	add	sp, #20
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	200000ac 	.word	0x200000ac

080006ac <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80006b0:	21ff      	movs	r1, #255	; 0xff
 80006b2:	20e1      	movs	r0, #225	; 0xe1
 80006b4:	f7ff ff6c 	bl	8000590 <NRF24_write_register>
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80006c2:	21ff      	movs	r1, #255	; 0xff
 80006c4:	20e2      	movs	r0, #226	; 0xe2
 80006c6:	f7ff ff63 	bl	8000590 <NRF24_write_register>
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80006d6:	1dfc      	adds	r4, r7, #7
 80006d8:	2007      	movs	r0, #7
 80006da:	f7ff fefd 	bl	80004d8 <NRF24_read_register>
 80006de:	0003      	movs	r3, r0
 80006e0:	7023      	strb	r3, [r4, #0]
	return statReg;
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
}
 80006e6:	0018      	movs	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b003      	add	sp, #12
 80006ec:	bd90      	pop	{r4, r7, pc}
	...

080006f0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80006f0:	b082      	sub	sp, #8
 80006f2:	b590      	push	{r4, r7, lr}
 80006f4:	46c6      	mov	lr, r8
 80006f6:	b500      	push	{lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	0008      	movs	r0, r1
 8000700:	0011      	movs	r1, r2
 8000702:	2204      	movs	r2, #4
 8000704:	2418      	movs	r4, #24
 8000706:	46a4      	mov	ip, r4
 8000708:	2408      	movs	r4, #8
 800070a:	46a0      	mov	r8, r4
 800070c:	44b8      	add	r8, r7
 800070e:	44c4      	add	ip, r8
 8000710:	4462      	add	r2, ip
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	1cbb      	adds	r3, r7, #2
 8000716:	1c02      	adds	r2, r0, #0
 8000718:	801a      	strh	r2, [r3, #0]
 800071a:	003b      	movs	r3, r7
 800071c:	1c0a      	adds	r2, r1, #0
 800071e:	801a      	strh	r2, [r3, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000720:	4a74      	ldr	r2, [pc, #464]	; (80008f4 <NRF24_begin+0x204>)
 8000722:	2304      	movs	r3, #4
 8000724:	2118      	movs	r1, #24
 8000726:	468c      	mov	ip, r1
 8000728:	2108      	movs	r1, #8
 800072a:	4688      	mov	r8, r1
 800072c:	44b8      	add	r8, r7
 800072e:	44c4      	add	ip, r8
 8000730:	4463      	add	r3, ip
 8000732:	0010      	movs	r0, r2
 8000734:	0019      	movs	r1, r3
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	001a      	movs	r2, r3
 800073a:	f004 fe41 	bl	80053c0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800073e:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <NRF24_begin+0x208>)
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	601a      	str	r2, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000744:	4b6d      	ldr	r3, [pc, #436]	; (80008fc <NRF24_begin+0x20c>)
 8000746:	1cba      	adds	r2, r7, #2
 8000748:	8812      	ldrh	r2, [r2, #0]
 800074a:	801a      	strh	r2, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800074c:	4b6c      	ldr	r3, [pc, #432]	; (8000900 <NRF24_begin+0x210>)
 800074e:	003a      	movs	r2, r7
 8000750:	8812      	ldrh	r2, [r2, #0]
 8000752:	801a      	strh	r2, [r3, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff fe7f 	bl	8000458 <NRF24_csn>
	NRF24_ce(0);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fe9c 	bl	8000498 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000760:	2005      	movs	r0, #5
 8000762:	f001 fd6d 	bl	8002240 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000766:	2108      	movs	r1, #8
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff ff11 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800076e:	213f      	movs	r1, #63	; 0x3f
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff ff0d 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000776:	2103      	movs	r1, #3
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff ff09 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800077e:	2103      	movs	r1, #3
 8000780:	2003      	movs	r0, #3
 8000782:	f7ff ff05 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000786:	2103      	movs	r1, #3
 8000788:	2004      	movs	r0, #4
 800078a:	f7ff ff01 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800078e:	2102      	movs	r1, #2
 8000790:	2005      	movs	r0, #5
 8000792:	f7ff fefd 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000796:	210f      	movs	r1, #15
 8000798:	2006      	movs	r0, #6
 800079a:	f7ff fef9 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800079e:	210e      	movs	r1, #14
 80007a0:	2007      	movs	r0, #7
 80007a2:	f7ff fef5 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80007a6:	2100      	movs	r1, #0
 80007a8:	2008      	movs	r0, #8
 80007aa:	f7ff fef1 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80007ae:	2100      	movs	r1, #0
 80007b0:	2009      	movs	r0, #9
 80007b2:	f7ff feed 	bl	8000590 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80007b6:	2108      	movs	r1, #8
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	22e7      	movs	r2, #231	; 0xe7
 80007bc:	711a      	strb	r2, [r3, #4]
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	22e7      	movs	r2, #231	; 0xe7
 80007c2:	70da      	strb	r2, [r3, #3]
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	22e7      	movs	r2, #231	; 0xe7
 80007c8:	709a      	strb	r2, [r3, #2]
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	22e7      	movs	r2, #231	; 0xe7
 80007ce:	705a      	strb	r2, [r3, #1]
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	22e7      	movs	r2, #231	; 0xe7
 80007d4:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80007d6:	000c      	movs	r4, r1
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2205      	movs	r2, #5
 80007dc:	0019      	movs	r1, r3
 80007de:	200a      	movs	r0, #10
 80007e0:	f7ff fefe 	bl	80005e0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80007e4:	0021      	movs	r1, r4
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	22c2      	movs	r2, #194	; 0xc2
 80007ea:	711a      	strb	r2, [r3, #4]
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	22c2      	movs	r2, #194	; 0xc2
 80007f0:	70da      	strb	r2, [r3, #3]
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	22c2      	movs	r2, #194	; 0xc2
 80007f6:	709a      	strb	r2, [r3, #2]
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	22c2      	movs	r2, #194	; 0xc2
 80007fc:	705a      	strb	r2, [r3, #1]
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	22c2      	movs	r2, #194	; 0xc2
 8000802:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000804:	000c      	movs	r4, r1
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2205      	movs	r2, #5
 800080a:	0019      	movs	r1, r3
 800080c:	200b      	movs	r0, #11
 800080e:	f7ff fee7 	bl	80005e0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000812:	21c3      	movs	r1, #195	; 0xc3
 8000814:	200c      	movs	r0, #12
 8000816:	f7ff febb 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800081a:	21c4      	movs	r1, #196	; 0xc4
 800081c:	200d      	movs	r0, #13
 800081e:	f7ff feb7 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000822:	21c5      	movs	r1, #197	; 0xc5
 8000824:	200e      	movs	r0, #14
 8000826:	f7ff feb3 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800082a:	21c6      	movs	r1, #198	; 0xc6
 800082c:	200f      	movs	r0, #15
 800082e:	f7ff feaf 	bl	8000590 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000832:	0021      	movs	r1, r4
 8000834:	187b      	adds	r3, r7, r1
 8000836:	22e7      	movs	r2, #231	; 0xe7
 8000838:	711a      	strb	r2, [r3, #4]
 800083a:	187b      	adds	r3, r7, r1
 800083c:	22e7      	movs	r2, #231	; 0xe7
 800083e:	70da      	strb	r2, [r3, #3]
 8000840:	187b      	adds	r3, r7, r1
 8000842:	22e7      	movs	r2, #231	; 0xe7
 8000844:	709a      	strb	r2, [r3, #2]
 8000846:	187b      	adds	r3, r7, r1
 8000848:	22e7      	movs	r2, #231	; 0xe7
 800084a:	705a      	strb	r2, [r3, #1]
 800084c:	187b      	adds	r3, r7, r1
 800084e:	22e7      	movs	r2, #231	; 0xe7
 8000850:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2205      	movs	r2, #5
 8000856:	0019      	movs	r1, r3
 8000858:	2010      	movs	r0, #16
 800085a:	f7ff fec1 	bl	80005e0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800085e:	2100      	movs	r1, #0
 8000860:	2011      	movs	r0, #17
 8000862:	f7ff fe95 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000866:	2100      	movs	r1, #0
 8000868:	2012      	movs	r0, #18
 800086a:	f7ff fe91 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800086e:	2100      	movs	r1, #0
 8000870:	2013      	movs	r0, #19
 8000872:	f7ff fe8d 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000876:	2100      	movs	r1, #0
 8000878:	2014      	movs	r0, #20
 800087a:	f7ff fe89 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800087e:	2100      	movs	r1, #0
 8000880:	2015      	movs	r0, #21
 8000882:	f7ff fe85 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000886:	2100      	movs	r1, #0
 8000888:	2016      	movs	r0, #22
 800088a:	f7ff fe81 	bl	8000590 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800088e:	f000 fac1 	bl	8000e14 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000892:	2100      	movs	r1, #0
 8000894:	201c      	movs	r0, #28
 8000896:	f7ff fe7b 	bl	8000590 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800089a:	2100      	movs	r1, #0
 800089c:	201d      	movs	r0, #29
 800089e:	f7ff fe77 	bl	8000590 <NRF24_write_register>
	printRadioSettings();
 80008a2:	f000 fad3 	bl	8000e4c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80008a6:	210f      	movs	r1, #15
 80008a8:	200f      	movs	r0, #15
 80008aa:	f000 f8dd 	bl	8000a68 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80008ae:	2003      	movs	r0, #3
 80008b0:	f000 f977 	bl	8000ba2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 f9c5 	bl	8000c44 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80008ba:	2002      	movs	r0, #2
 80008bc:	f000 fa1e 	bl	8000cfc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80008c0:	f000 f93c 	bl	8000b3c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80008c4:	2020      	movs	r0, #32
 80008c6:	f000 f909 	bl	8000adc <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80008ca:	f000 fa9a 	bl	8000e02 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80008ce:	204c      	movs	r0, #76	; 0x4c
 80008d0:	f000 f8e8 	bl	8000aa4 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80008d4:	f7ff feea 	bl	80006ac <NRF24_flush_tx>
	NRF24_flush_rx();
 80008d8:	f7ff fef1 	bl	80006be <NRF24_flush_rx>
	
	NRF24_powerDown();
 80008dc:	f000 fa46 	bl	8000d6c <NRF24_powerDown>
	
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b004      	add	sp, #16
 80008e6:	bc80      	pop	{r7}
 80008e8:	46b8      	mov	r8, r7
 80008ea:	bc90      	pop	{r4, r7}
 80008ec:	bc08      	pop	{r3}
 80008ee:	b002      	add	sp, #8
 80008f0:	4718      	bx	r3
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	200000ac 	.word	0x200000ac
 80008f8:	200000a4 	.word	0x200000a4
 80008fc:	200000a8 	.word	0x200000a8
 8000900:	200000aa 	.word	0x200000aa

08000904 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fde5 	bl	80004d8 <NRF24_read_register>
 800090e:	0003      	movs	r3, r0
 8000910:	001a      	movs	r2, r3
 8000912:	2303      	movs	r3, #3
 8000914:	4313      	orrs	r3, r2
 8000916:	b2db      	uxtb	r3, r3
 8000918:	0019      	movs	r1, r3
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fe38 	bl	8000590 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <NRF24_startListening+0x50>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	0011      	movs	r1, r2
 8000928:	4319      	orrs	r1, r3
 800092a:	d005      	beq.n	8000938 <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <NRF24_startListening+0x50>)
 800092e:	2205      	movs	r2, #5
 8000930:	0019      	movs	r1, r3
 8000932:	200a      	movs	r0, #10
 8000934:	f7ff fe54 	bl	80005e0 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000938:	f7ff feb8 	bl	80006ac <NRF24_flush_tx>
	NRF24_flush_rx();
 800093c:	f7ff febf 	bl	80006be <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fda9 	bl	8000498 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000946:	2096      	movs	r0, #150	; 0x96
 8000948:	f7ff fd66 	bl	8000418 <NRF24_DelayMicroSeconds>
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	20000098 	.word	0x20000098

08000958 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 fa17 	bl	8000d90 <NRF24_availablePipe>
 8000962:	0003      	movs	r3, r0
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 800096a:	b590      	push	{r4, r7, lr}
 800096c:	b085      	sub	sp, #20
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	000a      	movs	r2, r1
 8000974:	1cfb      	adds	r3, r7, #3
 8000976:	701a      	strb	r2, [r3, #0]
	NRF24_read_payload( buf, len );
 8000978:	1cfb      	adds	r3, r7, #3
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff fe5b 	bl	800063c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000986:	2017      	movs	r0, #23
 8000988:	f7ff fda6 	bl	80004d8 <NRF24_read_register>
 800098c:	0003      	movs	r3, r0
 800098e:	0019      	movs	r1, r3
 8000990:	240f      	movs	r4, #15
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2201      	movs	r2, #1
 8000996:	400a      	ands	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
	NRF24_flush_rx();
 800099a:	f7ff fe90 	bl	80006be <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800099e:	f000 f8c3 	bl	8000b28 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	1e5a      	subs	r2, r3, #1
 80009a8:	4193      	sbcs	r3, r2
 80009aa:	b2db      	uxtb	r3, r3
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b005      	add	sp, #20
 80009b2:	bd90      	pop	{r4, r7, pc}

080009b4 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	0001      	movs	r1, r0
 80009bc:	603a      	str	r2, [r7, #0]
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	200f      	movs	r0, #15
 80009c2:	183b      	adds	r3, r7, r0
 80009c4:	1c0a      	adds	r2, r1, #0
 80009c6:	701a      	strb	r2, [r3, #0]
	if (number == 0)
 80009c8:	183b      	adds	r3, r7, r0
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d104      	bne.n	80009da <NRF24_openReadingPipe+0x26>
    pipe0_reading_address = address;
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4920      	ldr	r1, [pc, #128]	; (8000a58 <NRF24_openReadingPipe+0xa4>)
 80009d6:	600a      	str	r2, [r1, #0]
 80009d8:	604b      	str	r3, [r1, #4]
	
	if(number <= 6)
 80009da:	220f      	movs	r2, #15
 80009dc:	18bb      	adds	r3, r7, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b06      	cmp	r3, #6
 80009e2:	d834      	bhi.n	8000a4e <NRF24_openReadingPipe+0x9a>
	{
		if(number < 2)
 80009e4:	18bb      	adds	r3, r7, r2
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d809      	bhi.n	8000a00 <NRF24_openReadingPipe+0x4c>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80009ec:	18bb      	adds	r3, r7, r2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4a1a      	ldr	r2, [pc, #104]	; (8000a5c <NRF24_openReadingPipe+0xa8>)
 80009f2:	5cd3      	ldrb	r3, [r2, r3]
 80009f4:	0039      	movs	r1, r7
 80009f6:	2205      	movs	r2, #5
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff fdf1 	bl	80005e0 <NRF24_write_registerN>
 80009fe:	e009      	b.n	8000a14 <NRF24_openReadingPipe+0x60>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000a00:	230f      	movs	r3, #15
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <NRF24_openReadingPipe+0xa8>)
 8000a08:	5cd3      	ldrb	r3, [r2, r3]
 8000a0a:	0039      	movs	r1, r7
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fde6 	bl	80005e0 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000a14:	240f      	movs	r4, #15
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <NRF24_openReadingPipe+0xac>)
 8000a1c:	5cd2      	ldrb	r2, [r2, r3]
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <NRF24_openReadingPipe+0xb0>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0019      	movs	r1, r3
 8000a24:	0010      	movs	r0, r2
 8000a26:	f7ff fdb3 	bl	8000590 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f7ff fd54 	bl	80004d8 <NRF24_read_register>
 8000a30:	0003      	movs	r3, r0
 8000a32:	b25a      	sxtb	r2, r3
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4099      	lsls	r1, r3
 8000a3c:	000b      	movs	r3, r1
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b25b      	sxtb	r3, r3
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	0019      	movs	r1, r3
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f7ff fda1 	bl	8000590 <NRF24_write_register>
	}
	
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b005      	add	sp, #20
 8000a54:	bd90      	pop	{r4, r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	20000098 	.word	0x20000098
 8000a5c:	08006c50 	.word	0x08006c50
 8000a60:	08006c58 	.word	0x08006c58
 8000a64:	200000a0 	.word	0x200000a0

08000a68 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	1dbb      	adds	r3, r7, #6
 8000a76:	1c0a      	adds	r2, r1, #0
 8000a78:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	b25a      	sxtb	r2, r3
 8000a82:	1dbb      	adds	r3, r7, #6
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b25b      	sxtb	r3, r3
 8000a88:	210f      	movs	r1, #15
 8000a8a:	400b      	ands	r3, r1
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	0019      	movs	r1, r3
 8000a96:	2004      	movs	r0, #4
 8000a98:	f7ff fd7a 	bl	8000590 <NRF24_write_register>
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	0002      	movs	r2, r0
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	701a      	strb	r2, [r3, #0]
	const uint8_t max_channel = 127;
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	227f      	movs	r2, #127	; 0x7f
 8000ab6:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	1dfa      	adds	r2, r7, #7
 8000abc:	7810      	ldrb	r0, [r2, #0]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2d9      	uxtb	r1, r3
 8000ac2:	b2c2      	uxtb	r2, r0
 8000ac4:	4291      	cmp	r1, r2
 8000ac6:	d900      	bls.n	8000aca <NRF24_setChannel+0x26>
 8000ac8:	1c03      	adds	r3, r0, #0
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	0019      	movs	r1, r3
 8000ace:	2005      	movs	r0, #5
 8000ad0:	f7ff fd5e 	bl	8000590 <NRF24_write_register>
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b004      	add	sp, #16
 8000ada:	bd80      	pop	{r7, pc}

08000adc <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	701a      	strb	r2, [r3, #0]
	const uint8_t max_payload_size = 32;
 8000ae8:	210f      	movs	r1, #15
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2220      	movs	r2, #32
 8000aee:	701a      	strb	r2, [r3, #0]
  payload_size = MIN(size,max_payload_size);
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	1dfa      	adds	r2, r7, #7
 8000af4:	7810      	ldrb	r0, [r2, #0]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2d9      	uxtb	r1, r3
 8000afa:	b2c2      	uxtb	r2, r0
 8000afc:	4291      	cmp	r1, r2
 8000afe:	d900      	bls.n	8000b02 <NRF24_setPayloadSize+0x26>
 8000b00:	1c03      	adds	r3, r0, #0
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <NRF24_setPayloadSize+0x34>)
 8000b06:	701a      	strb	r2, [r3, #0]
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b004      	add	sp, #16
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000a0 	.word	0x200000a0

08000b14 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	return payload_size;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <NRF24_getPayloadSize+0x10>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	200000a0 	.word	0x200000a0

08000b28 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b2c:	2060      	movs	r0, #96	; 0x60
 8000b2e:	f7ff fcd3 	bl	80004d8 <NRF24_read_register>
 8000b32:	0003      	movs	r3, r0
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000b40:	201d      	movs	r0, #29
 8000b42:	f7ff fcc9 	bl	80004d8 <NRF24_read_register>
 8000b46:	0003      	movs	r3, r0
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	439a      	bics	r2, r3
 8000b4e:	0013      	movs	r3, r2
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	0019      	movs	r1, r3
 8000b54:	201d      	movs	r0, #29
 8000b56:	f7ff fd1b 	bl	8000590 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	201c      	movs	r0, #28
 8000b5e:	f7ff fd17 	bl	8000590 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000b62:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <NRF24_disableDynamicPayloads+0x34>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	200000a1 	.word	0x200000a1

08000b74 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	701a      	strb	r2, [r3, #0]
	if ( enable )
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d004      	beq.n	8000b92 <NRF24_setAutoAck+0x1e>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000b88:	213f      	movs	r1, #63	; 0x3f
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f7ff fd00 	bl	8000590 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000b90:	e003      	b.n	8000b9a <NRF24_setAutoAck+0x26>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff fcfb 	bl	8000590 <NRF24_write_register>
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ba2:	b5b0      	push	{r4, r5, r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	0002      	movs	r2, r0
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	701a      	strb	r2, [r3, #0]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bae:	250f      	movs	r5, #15
 8000bb0:	197c      	adds	r4, r7, r5
 8000bb2:	2006      	movs	r0, #6
 8000bb4:	f7ff fc90 	bl	80004d8 <NRF24_read_register>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	7023      	strb	r3, [r4, #0]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bbc:	0028      	movs	r0, r5
 8000bbe:	183b      	adds	r3, r7, r0
 8000bc0:	183a      	adds	r2, r7, r0
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	2106      	movs	r1, #6
 8000bc6:	438a      	bics	r2, r1
 8000bc8:	701a      	strb	r2, [r3, #0]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d106      	bne.n	8000be0 <NRF24_setPALevel+0x3e>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bd2:	183b      	adds	r3, r7, r0
 8000bd4:	183a      	adds	r2, r7, r0
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	2106      	movs	r1, #6
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e026      	b.n	8000c2e <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m6dB )
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d107      	bne.n	8000bf8 <NRF24_setPALevel+0x56>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000be8:	220f      	movs	r2, #15
 8000bea:	18bb      	adds	r3, r7, r2
 8000bec:	18ba      	adds	r2, r7, r2
 8000bee:	7812      	ldrb	r2, [r2, #0]
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e01a      	b.n	8000c2e <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m12dB )
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d107      	bne.n	8000c10 <NRF24_setPALevel+0x6e>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c00:	220f      	movs	r2, #15
 8000c02:	18bb      	adds	r3, r7, r2
 8000c04:	18ba      	adds	r2, r7, r2
 8000c06:	7812      	ldrb	r2, [r2, #0]
 8000c08:	2102      	movs	r1, #2
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e00e      	b.n	8000c2e <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m18dB )
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00a      	beq.n	8000c2e <NRF24_setPALevel+0x8c>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d106      	bne.n	8000c2e <NRF24_setPALevel+0x8c>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c20:	220f      	movs	r2, #15
 8000c22:	18bb      	adds	r3, r7, r2
 8000c24:	18ba      	adds	r2, r7, r2
 8000c26:	7812      	ldrb	r2, [r2, #0]
 8000c28:	2106      	movs	r1, #6
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c2e:	230f      	movs	r3, #15
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	0019      	movs	r1, r3
 8000c36:	2006      	movs	r0, #6
 8000c38:	f7ff fcaa 	bl	8000590 <NRF24_write_register>
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b004      	add	sp, #16
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}

08000c44 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c44:	b5b0      	push	{r4, r5, r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	701a      	strb	r2, [r3, #0]
	bool result = false;
 8000c50:	230f      	movs	r3, #15
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c58:	250e      	movs	r5, #14
 8000c5a:	197c      	adds	r4, r7, r5
 8000c5c:	2006      	movs	r0, #6
 8000c5e:	f7ff fc3b 	bl	80004d8 <NRF24_read_register>
 8000c62:	0003      	movs	r3, r0
 8000c64:	7023      	strb	r3, [r4, #0]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <NRF24_setDataRate+0xb4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c6c:	0028      	movs	r0, r5
 8000c6e:	183b      	adds	r3, r7, r0
 8000c70:	183a      	adds	r2, r7, r0
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	2128      	movs	r1, #40	; 0x28
 8000c76:	438a      	bics	r2, r1
 8000c78:	701a      	strb	r2, [r3, #0]
  if( speed == RF24_250KBPS )
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d109      	bne.n	8000c96 <NRF24_setDataRate+0x52>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <NRF24_setDataRate+0xb4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000c88:	183b      	adds	r3, r7, r0
 8000c8a:	183a      	adds	r2, r7, r0
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	2120      	movs	r1, #32
 8000c90:	430a      	orrs	r2, r1
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e011      	b.n	8000cba <NRF24_setDataRate+0x76>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d10a      	bne.n	8000cb4 <NRF24_setDataRate+0x70>
    {
      wide_band = true ;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <NRF24_setDataRate+0xb4>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000ca4:	220e      	movs	r2, #14
 8000ca6:	18bb      	adds	r3, r7, r2
 8000ca8:	18ba      	adds	r2, r7, r2
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	2108      	movs	r1, #8
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e002      	b.n	8000cba <NRF24_setDataRate+0x76>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <NRF24_setDataRate+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000cba:	240e      	movs	r4, #14
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	f7ff fc64 	bl	8000590 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000cc8:	2006      	movs	r0, #6
 8000cca:	f7ff fc05 	bl	80004d8 <NRF24_read_register>
 8000cce:	0003      	movs	r3, r0
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d104      	bne.n	8000ce4 <NRF24_setDataRate+0xa0>
  {
    result = true;
 8000cda:	230f      	movs	r3, #15
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e002      	b.n	8000cea <NRF24_setDataRate+0xa6>
  }
  else
  {
    wide_band = false;
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <NRF24_setDataRate+0xb4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000cea:	230f      	movs	r3, #15
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	781b      	ldrb	r3, [r3, #0]
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b004      	add	sp, #16
 8000cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf8:	200000a2 	.word	0x200000a2

08000cfc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	0002      	movs	r2, r0
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	701a      	strb	r2, [r3, #0]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fbe5 	bl	80004d8 <NRF24_read_register>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	0019      	movs	r1, r3
 8000d12:	200f      	movs	r0, #15
 8000d14:	183b      	adds	r3, r7, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	4391      	bics	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	701a      	strb	r2, [r3, #0]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d017      	beq.n	8000d56 <NRF24_setCRCLength+0x5a>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d106      	bne.n	8000d3c <NRF24_setCRCLength+0x40>
  {
    config |= _BV(BIT_EN_CRC);
 8000d2e:	183b      	adds	r3, r7, r0
 8000d30:	183a      	adds	r2, r7, r0
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	2108      	movs	r1, #8
 8000d36:	430a      	orrs	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e00c      	b.n	8000d56 <NRF24_setCRCLength+0x5a>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000d3c:	200f      	movs	r0, #15
 8000d3e:	183b      	adds	r3, r7, r0
 8000d40:	183a      	adds	r2, r7, r0
 8000d42:	7812      	ldrb	r2, [r2, #0]
 8000d44:	2108      	movs	r1, #8
 8000d46:	430a      	orrs	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
    config |= _BV( BIT_CRCO );
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	183a      	adds	r2, r7, r0
 8000d4e:	7812      	ldrb	r2, [r2, #0]
 8000d50:	2104      	movs	r1, #4
 8000d52:	430a      	orrs	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000d56:	230f      	movs	r3, #15
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fc16 	bl	8000590 <NRF24_write_register>
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b004      	add	sp, #16
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff fbb1 	bl	80004d8 <NRF24_read_register>
 8000d76:	0003      	movs	r3, r0
 8000d78:	001a      	movs	r2, r3
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	439a      	bics	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	0019      	movs	r1, r3
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff fc03 	bl	8000590 <NRF24_write_register>
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000d98:	250f      	movs	r5, #15
 8000d9a:	197c      	adds	r4, r7, r5
 8000d9c:	f7ff fc98 	bl	80006d0 <NRF24_get_status>
 8000da0:	0003      	movs	r3, r0
 8000da2:	7023      	strb	r3, [r4, #0]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000da4:	0028      	movs	r0, r5
 8000da6:	183b      	adds	r3, r7, r0
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2240      	movs	r2, #64	; 0x40
 8000dac:	401a      	ands	r2, r3
 8000dae:	240e      	movs	r4, #14
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	1e51      	subs	r1, r2, #1
 8000db4:	418a      	sbcs	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]

  if (result)
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d019      	beq.n	8000df4 <NRF24_availablePipe+0x64>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d008      	beq.n	8000dd8 <NRF24_availablePipe+0x48>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000dc6:	183b      	adds	r3, r7, r0
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	085b      	lsrs	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2207      	movs	r2, #7
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	2007      	movs	r0, #7
 8000ddc:	f7ff fbd8 	bl	8000590 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000de0:	230f      	movs	r3, #15
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2220      	movs	r2, #32
 8000de8:	4013      	ands	r3, r2
 8000dea:	d003      	beq.n	8000df4 <NRF24_availablePipe+0x64>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000dec:	2120      	movs	r1, #32
 8000dee:	2007      	movs	r0, #7
 8000df0:	f7ff fbce 	bl	8000590 <NRF24_write_register>
    }
  }
  return result;
 8000df4:	230e      	movs	r3, #14
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	781b      	ldrb	r3, [r3, #0]
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bdb0      	pop	{r4, r5, r7, pc}

08000e02 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e06:	2170      	movs	r1, #112	; 0x70
 8000e08:	2007      	movs	r0, #7
 8000e0a:	f7ff fbc1 	bl	8000590 <NRF24_write_register>
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fb1c 	bl	8000458 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2250      	movs	r2, #80	; 0x50
 8000e24:	701a      	strb	r2, [r3, #0]
	cmdRxBuf[1] = 0x73;
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2273      	movs	r2, #115	; 0x73
 8000e2a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000e2c:	1d39      	adds	r1, r7, #4
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <NRF24_ACTIVATE_cmd+0x34>)
 8000e30:	2364      	movs	r3, #100	; 0x64
 8000e32:	2202      	movs	r2, #2
 8000e34:	f002 f9b2 	bl	800319c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff fb0d 	bl	8000458 <NRF24_csn>
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	200000ac 	.word	0x200000ac

08000e4c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	46c6      	mov	lr, r8
 8000e50:	b500      	push	{lr}
 8000e52:	b0a0      	sub	sp, #128	; 0x80
 8000e54:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000e56:	4ac2      	ldr	r2, [pc, #776]	; (8001160 <printRadioSettings+0x314>)
 8000e58:	2508      	movs	r5, #8
 8000e5a:	197b      	adds	r3, r7, r5
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f004 fada 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e64:	197b      	adds	r3, r7, r5
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff f94e 	bl	8000108 <strlen>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	1979      	adds	r1, r7, r5
 8000e72:	48bc      	ldr	r0, [pc, #752]	; (8001164 <printRadioSettings+0x318>)
 8000e74:	230a      	movs	r3, #10
 8000e76:	f003 fecf 	bl	8004c18 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000e7a:	266f      	movs	r6, #111	; 0x6f
 8000e7c:	19bc      	adds	r4, r7, r6
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff fb2a 	bl	80004d8 <NRF24_read_register>
 8000e84:	0003      	movs	r3, r0
 8000e86:	7023      	strb	r3, [r4, #0]
	if(reg8Val & (1 << 3))
 8000e88:	0031      	movs	r1, r6
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2208      	movs	r2, #8
 8000e90:	4013      	ands	r3, r2
 8000e92:	d013      	beq.n	8000ebc <printRadioSettings+0x70>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2204      	movs	r2, #4
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d006      	beq.n	8000eac <printRadioSettings+0x60>
 8000e9e:	4ab2      	ldr	r2, [pc, #712]	; (8001168 <printRadioSettings+0x31c>)
 8000ea0:	197b      	adds	r3, r7, r5
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f004 fab7 	bl	8005418 <siprintf>
 8000eaa:	e00e      	b.n	8000eca <printRadioSettings+0x7e>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000eac:	4aaf      	ldr	r2, [pc, #700]	; (800116c <printRadioSettings+0x320>)
 8000eae:	2308      	movs	r3, #8
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f004 faaf 	bl	8005418 <siprintf>
 8000eba:	e006      	b.n	8000eca <printRadioSettings+0x7e>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000ebc:	4aac      	ldr	r2, [pc, #688]	; (8001170 <printRadioSettings+0x324>)
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f004 faa7 	bl	8005418 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000eca:	2408      	movs	r4, #8
 8000ecc:	193b      	adds	r3, r7, r4
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f7ff f91a 	bl	8000108 <strlen>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	1939      	adds	r1, r7, r4
 8000eda:	48a2      	ldr	r0, [pc, #648]	; (8001164 <printRadioSettings+0x318>)
 8000edc:	230a      	movs	r3, #10
 8000ede:	f003 fe9b 	bl	8004c18 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000ee2:	256f      	movs	r5, #111	; 0x6f
 8000ee4:	197c      	adds	r4, r7, r5
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f7ff faf6 	bl	80004d8 <NRF24_read_register>
 8000eec:	0003      	movs	r3, r0
 8000eee:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ef0:	0029      	movs	r1, r5
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000efa:	17da      	asrs	r2, r3, #31
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	0fdb      	lsrs	r3, r3, #31
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f0c:	17da      	asrs	r2, r3, #31
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	0fdb      	lsrs	r3, r3, #31
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f1e:	17da      	asrs	r2, r3, #31
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	0fdb      	lsrs	r3, r3, #31
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f30:	17da      	asrs	r2, r3, #31
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	0fdb      	lsrs	r3, r3, #31
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2210      	movs	r2, #16
 8000f40:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f42:	17da      	asrs	r2, r3, #31
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	0fdb      	lsrs	r3, r3, #31
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2220      	movs	r2, #32
 8000f52:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f54:	17da      	asrs	r2, r3, #31
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	0fdb      	lsrs	r3, r3, #31
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4985      	ldr	r1, [pc, #532]	; (8001174 <printRadioSettings+0x328>)
 8000f5e:	2208      	movs	r2, #8
 8000f60:	18b8      	adds	r0, r7, r2
 8000f62:	9303      	str	r3, [sp, #12]
 8000f64:	9602      	str	r6, [sp, #8]
 8000f66:	9501      	str	r5, [sp, #4]
 8000f68:	9400      	str	r4, [sp, #0]
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	4662      	mov	r2, ip
 8000f6e:	f004 fa53 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f72:	2408      	movs	r4, #8
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff f8c6 	bl	8000108 <strlen>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	1939      	adds	r1, r7, r4
 8000f82:	4878      	ldr	r0, [pc, #480]	; (8001164 <printRadioSettings+0x318>)
 8000f84:	230a      	movs	r3, #10
 8000f86:	f003 fe47 	bl	8004c18 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000f8a:	216f      	movs	r1, #111	; 0x6f
 8000f8c:	000d      	movs	r5, r1
 8000f8e:	187c      	adds	r4, r7, r1
 8000f90:	2002      	movs	r0, #2
 8000f92:	f7ff faa1 	bl	80004d8 <NRF24_read_register>
 8000f96:	0003      	movs	r3, r0
 8000f98:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f9a:	0029      	movs	r1, r5
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fa4:	17da      	asrs	r2, r3, #31
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	0fdb      	lsrs	r3, r3, #31
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fb6:	17da      	asrs	r2, r3, #31
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	0fdb      	lsrs	r3, r3, #31
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fc8:	17da      	asrs	r2, r3, #31
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	0fdb      	lsrs	r3, r3, #31
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fda:	17da      	asrs	r2, r3, #31
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	0fdb      	lsrs	r3, r3, #31
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2210      	movs	r2, #16
 8000fea:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fec:	17da      	asrs	r2, r3, #31
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	0fdb      	lsrs	r3, r3, #31
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ffe:	17da      	asrs	r2, r3, #31
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	0fdb      	lsrs	r3, r3, #31
 8001004:	b2db      	uxtb	r3, r3
 8001006:	495c      	ldr	r1, [pc, #368]	; (8001178 <printRadioSettings+0x32c>)
 8001008:	2208      	movs	r2, #8
 800100a:	18b8      	adds	r0, r7, r2
 800100c:	9303      	str	r3, [sp, #12]
 800100e:	9602      	str	r6, [sp, #8]
 8001010:	9501      	str	r5, [sp, #4]
 8001012:	9400      	str	r4, [sp, #0]
 8001014:	4643      	mov	r3, r8
 8001016:	4662      	mov	r2, ip
 8001018:	f004 f9fe 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800101c:	2508      	movs	r5, #8
 800101e:	197b      	adds	r3, r7, r5
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff f871 	bl	8000108 <strlen>
 8001026:	0003      	movs	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	1979      	adds	r1, r7, r5
 800102c:	484d      	ldr	r0, [pc, #308]	; (8001164 <printRadioSettings+0x318>)
 800102e:	230a      	movs	r3, #10
 8001030:	f003 fdf2 	bl	8004c18 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001034:	2003      	movs	r0, #3
 8001036:	f7ff fa4f 	bl	80004d8 <NRF24_read_register>
 800103a:	0003      	movs	r3, r0
 800103c:	0019      	movs	r1, r3
 800103e:	246f      	movs	r4, #111	; 0x6f
 8001040:	193b      	adds	r3, r7, r4
 8001042:	2203      	movs	r2, #3
 8001044:	400a      	ands	r2, r1
 8001046:	701a      	strb	r2, [r3, #0]
	reg8Val +=2;
 8001048:	193b      	adds	r3, r7, r4
 800104a:	193a      	adds	r2, r7, r4
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	3202      	adds	r2, #2
 8001050:	701a      	strb	r2, [r3, #0]
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001052:	193b      	adds	r3, r7, r4
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	4949      	ldr	r1, [pc, #292]	; (800117c <printRadioSettings+0x330>)
 8001058:	002e      	movs	r6, r5
 800105a:	19bb      	adds	r3, r7, r6
 800105c:	0018      	movs	r0, r3
 800105e:	f004 f9db 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001062:	19bb      	adds	r3, r7, r6
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff f84f 	bl	8000108 <strlen>
 800106a:	0003      	movs	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	19b9      	adds	r1, r7, r6
 8001070:	483c      	ldr	r0, [pc, #240]	; (8001164 <printRadioSettings+0x318>)
 8001072:	230a      	movs	r3, #10
 8001074:	f003 fdd0 	bl	8004c18 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001078:	0025      	movs	r5, r4
 800107a:	193c      	adds	r4, r7, r4
 800107c:	2005      	movs	r0, #5
 800107e:	f7ff fa2b 	bl	80004d8 <NRF24_read_register>
 8001082:	0003      	movs	r3, r0
 8001084:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001086:	002c      	movs	r4, r5
 8001088:	193b      	adds	r3, r7, r4
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	227f      	movs	r2, #127	; 0x7f
 800108e:	401a      	ands	r2, r3
 8001090:	493b      	ldr	r1, [pc, #236]	; (8001180 <printRadioSettings+0x334>)
 8001092:	19bb      	adds	r3, r7, r6
 8001094:	0018      	movs	r0, r3
 8001096:	f004 f9bf 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800109a:	19bb      	adds	r3, r7, r6
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff f833 	bl	8000108 <strlen>
 80010a2:	0003      	movs	r3, r0
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	19b9      	adds	r1, r7, r6
 80010a8:	482e      	ldr	r0, [pc, #184]	; (8001164 <printRadioSettings+0x318>)
 80010aa:	230a      	movs	r3, #10
 80010ac:	f003 fdb4 	bl	8004c18 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80010b0:	0025      	movs	r5, r4
 80010b2:	193c      	adds	r4, r7, r4
 80010b4:	2006      	movs	r0, #6
 80010b6:	f7ff fa0f 	bl	80004d8 <NRF24_read_register>
 80010ba:	0003      	movs	r3, r0
 80010bc:	7023      	strb	r3, [r4, #0]
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80010be:	197b      	adds	r3, r7, r5
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2208      	movs	r2, #8
 80010c4:	4013      	ands	r3, r2
 80010c6:	d006      	beq.n	80010d6 <printRadioSettings+0x28a>
 80010c8:	4a2e      	ldr	r2, [pc, #184]	; (8001184 <printRadioSettings+0x338>)
 80010ca:	19bb      	adds	r3, r7, r6
 80010cc:	0011      	movs	r1, r2
 80010ce:	0018      	movs	r0, r3
 80010d0:	f004 f9a2 	bl	8005418 <siprintf>
 80010d4:	e006      	b.n	80010e4 <printRadioSettings+0x298>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80010d6:	4a2c      	ldr	r2, [pc, #176]	; (8001188 <printRadioSettings+0x33c>)
 80010d8:	2308      	movs	r3, #8
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	0011      	movs	r1, r2
 80010de:	0018      	movs	r0, r3
 80010e0:	f004 f99a 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e4:	2408      	movs	r4, #8
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff f80d 	bl	8000108 <strlen>
 80010ee:	0003      	movs	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	1939      	adds	r1, r7, r4
 80010f4:	481b      	ldr	r0, [pc, #108]	; (8001164 <printRadioSettings+0x318>)
 80010f6:	230a      	movs	r3, #10
 80010f8:	f003 fd8e 	bl	8004c18 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80010fc:	206f      	movs	r0, #111	; 0x6f
 80010fe:	183b      	adds	r3, r7, r0
 8001100:	183a      	adds	r2, r7, r0
 8001102:	7812      	ldrb	r2, [r2, #0]
 8001104:	2106      	movs	r1, #6
 8001106:	400a      	ands	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
	reg8Val = (reg8Val>>1);
 800110a:	0001      	movs	r1, r0
 800110c:	187b      	adds	r3, r7, r1
 800110e:	187a      	adds	r2, r7, r1
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	0852      	lsrs	r2, r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001116:	187b      	adds	r3, r7, r1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d106      	bne.n	800112c <printRadioSettings+0x2e0>
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <printRadioSettings+0x340>)
 8001120:	193b      	adds	r3, r7, r4
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f004 f977 	bl	8005418 <siprintf>
 800112a:	e041      	b.n	80011b0 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800112c:	236f      	movs	r3, #111	; 0x6f
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d107      	bne.n	8001146 <printRadioSettings+0x2fa>
 8001136:	4a16      	ldr	r2, [pc, #88]	; (8001190 <printRadioSettings+0x344>)
 8001138:	2308      	movs	r3, #8
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	0011      	movs	r1, r2
 800113e:	0018      	movs	r0, r3
 8001140:	f004 f96a 	bl	8005418 <siprintf>
 8001144:	e034      	b.n	80011b0 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001146:	236f      	movs	r3, #111	; 0x6f
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d123      	bne.n	8001198 <printRadioSettings+0x34c>
 8001150:	4a10      	ldr	r2, [pc, #64]	; (8001194 <printRadioSettings+0x348>)
 8001152:	2308      	movs	r3, #8
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	0011      	movs	r1, r2
 8001158:	0018      	movs	r0, r3
 800115a:	f004 f95d 	bl	8005418 <siprintf>
 800115e:	e027      	b.n	80011b0 <printRadioSettings+0x364>
 8001160:	080066bc 	.word	0x080066bc
 8001164:	20000110 	.word	0x20000110
 8001168:	080066f0 	.word	0x080066f0
 800116c:	0800670c 	.word	0x0800670c
 8001170:	08006728 	.word	0x08006728
 8001174:	0800673c 	.word	0x0800673c
 8001178:	08006780 	.word	0x08006780
 800117c:	080067cc 	.word	0x080067cc
 8001180:	080067e8 	.word	0x080067e8
 8001184:	080067fc 	.word	0x080067fc
 8001188:	08006814 	.word	0x08006814
 800118c:	0800682c 	.word	0x0800682c
 8001190:	08006840 	.word	0x08006840
 8001194:	08006854 	.word	0x08006854
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001198:	236f      	movs	r3, #111	; 0x6f
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d106      	bne.n	80011b0 <printRadioSettings+0x364>
 80011a2:	4afe      	ldr	r2, [pc, #1016]	; (800159c <printRadioSettings+0x750>)
 80011a4:	2308      	movs	r3, #8
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f004 f934 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011b0:	2408      	movs	r4, #8
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7fe ffa7 	bl	8000108 <strlen>
 80011ba:	0003      	movs	r3, r0
 80011bc:	b29a      	uxth	r2, r3
 80011be:	1939      	adds	r1, r7, r4
 80011c0:	48f7      	ldr	r0, [pc, #988]	; (80015a0 <printRadioSettings+0x754>)
 80011c2:	230a      	movs	r3, #10
 80011c4:	f003 fd28 	bl	8004c18 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80011c8:	003b      	movs	r3, r7
 80011ca:	2205      	movs	r2, #5
 80011cc:	0019      	movs	r1, r3
 80011ce:	200a      	movs	r0, #10
 80011d0:	f7ff f9b0 	bl	8000534 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80011d4:	003b      	movs	r3, r7
 80011d6:	791b      	ldrb	r3, [r3, #4]
 80011d8:	001d      	movs	r5, r3
 80011da:	003b      	movs	r3, r7
 80011dc:	78db      	ldrb	r3, [r3, #3]
 80011de:	001e      	movs	r6, r3
 80011e0:	003b      	movs	r3, r7
 80011e2:	789b      	ldrb	r3, [r3, #2]
 80011e4:	001a      	movs	r2, r3
 80011e6:	003b      	movs	r3, r7
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	001c      	movs	r4, r3
 80011ec:	003b      	movs	r3, r7
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	49ec      	ldr	r1, [pc, #944]	; (80015a4 <printRadioSettings+0x758>)
 80011f2:	2008      	movs	r0, #8
 80011f4:	1838      	adds	r0, r7, r0
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	9401      	str	r4, [sp, #4]
 80011fa:	9200      	str	r2, [sp, #0]
 80011fc:	0033      	movs	r3, r6
 80011fe:	002a      	movs	r2, r5
 8001200:	f004 f90a 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001204:	2408      	movs	r4, #8
 8001206:	193b      	adds	r3, r7, r4
 8001208:	0018      	movs	r0, r3
 800120a:	f7fe ff7d 	bl	8000108 <strlen>
 800120e:	0003      	movs	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	1939      	adds	r1, r7, r4
 8001214:	48e2      	ldr	r0, [pc, #904]	; (80015a0 <printRadioSettings+0x754>)
 8001216:	230a      	movs	r3, #10
 8001218:	f003 fcfe 	bl	8004c18 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800121c:	003b      	movs	r3, r7
 800121e:	2205      	movs	r2, #5
 8001220:	0019      	movs	r1, r3
 8001222:	200b      	movs	r0, #11
 8001224:	f7ff f986 	bl	8000534 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001228:	003b      	movs	r3, r7
 800122a:	791b      	ldrb	r3, [r3, #4]
 800122c:	001d      	movs	r5, r3
 800122e:	003b      	movs	r3, r7
 8001230:	78db      	ldrb	r3, [r3, #3]
 8001232:	001e      	movs	r6, r3
 8001234:	003b      	movs	r3, r7
 8001236:	789b      	ldrb	r3, [r3, #2]
 8001238:	001a      	movs	r2, r3
 800123a:	003b      	movs	r3, r7
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	001c      	movs	r4, r3
 8001240:	003b      	movs	r3, r7
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	49d8      	ldr	r1, [pc, #864]	; (80015a8 <printRadioSettings+0x75c>)
 8001246:	2008      	movs	r0, #8
 8001248:	1838      	adds	r0, r7, r0
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	9401      	str	r4, [sp, #4]
 800124e:	9200      	str	r2, [sp, #0]
 8001250:	0033      	movs	r3, r6
 8001252:	002a      	movs	r2, r5
 8001254:	f004 f8e0 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001258:	2408      	movs	r4, #8
 800125a:	193b      	adds	r3, r7, r4
 800125c:	0018      	movs	r0, r3
 800125e:	f7fe ff53 	bl	8000108 <strlen>
 8001262:	0003      	movs	r3, r0
 8001264:	b29a      	uxth	r2, r3
 8001266:	1939      	adds	r1, r7, r4
 8001268:	48cd      	ldr	r0, [pc, #820]	; (80015a0 <printRadioSettings+0x754>)
 800126a:	230a      	movs	r3, #10
 800126c:	f003 fcd4 	bl	8004c18 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001270:	003b      	movs	r3, r7
 8001272:	2201      	movs	r2, #1
 8001274:	0019      	movs	r1, r3
 8001276:	200c      	movs	r0, #12
 8001278:	f7ff f95c 	bl	8000534 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800127c:	003b      	movs	r3, r7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	001a      	movs	r2, r3
 8001282:	49ca      	ldr	r1, [pc, #808]	; (80015ac <printRadioSettings+0x760>)
 8001284:	193b      	adds	r3, r7, r4
 8001286:	0018      	movs	r0, r3
 8001288:	f004 f8c6 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800128c:	193b      	adds	r3, r7, r4
 800128e:	0018      	movs	r0, r3
 8001290:	f7fe ff3a 	bl	8000108 <strlen>
 8001294:	0003      	movs	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	1939      	adds	r1, r7, r4
 800129a:	48c1      	ldr	r0, [pc, #772]	; (80015a0 <printRadioSettings+0x754>)
 800129c:	230a      	movs	r3, #10
 800129e:	f003 fcbb 	bl	8004c18 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80012a2:	003b      	movs	r3, r7
 80012a4:	2201      	movs	r2, #1
 80012a6:	0019      	movs	r1, r3
 80012a8:	200d      	movs	r0, #13
 80012aa:	f7ff f943 	bl	8000534 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012ae:	003b      	movs	r3, r7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	001a      	movs	r2, r3
 80012b4:	49be      	ldr	r1, [pc, #760]	; (80015b0 <printRadioSettings+0x764>)
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	0018      	movs	r0, r3
 80012ba:	f004 f8ad 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7fe ff21 	bl	8000108 <strlen>
 80012c6:	0003      	movs	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	1939      	adds	r1, r7, r4
 80012cc:	48b4      	ldr	r0, [pc, #720]	; (80015a0 <printRadioSettings+0x754>)
 80012ce:	230a      	movs	r3, #10
 80012d0:	f003 fca2 	bl	8004c18 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80012d4:	003b      	movs	r3, r7
 80012d6:	2201      	movs	r2, #1
 80012d8:	0019      	movs	r1, r3
 80012da:	200e      	movs	r0, #14
 80012dc:	f7ff f92a 	bl	8000534 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012e0:	003b      	movs	r3, r7
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	001a      	movs	r2, r3
 80012e6:	49b3      	ldr	r1, [pc, #716]	; (80015b4 <printRadioSettings+0x768>)
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	0018      	movs	r0, r3
 80012ec:	f004 f894 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7fe ff08 	bl	8000108 <strlen>
 80012f8:	0003      	movs	r3, r0
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	1939      	adds	r1, r7, r4
 80012fe:	48a8      	ldr	r0, [pc, #672]	; (80015a0 <printRadioSettings+0x754>)
 8001300:	230a      	movs	r3, #10
 8001302:	f003 fc89 	bl	8004c18 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001306:	003b      	movs	r3, r7
 8001308:	2201      	movs	r2, #1
 800130a:	0019      	movs	r1, r3
 800130c:	200f      	movs	r0, #15
 800130e:	f7ff f911 	bl	8000534 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001312:	003b      	movs	r3, r7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	001a      	movs	r2, r3
 8001318:	49a7      	ldr	r1, [pc, #668]	; (80015b8 <printRadioSettings+0x76c>)
 800131a:	193b      	adds	r3, r7, r4
 800131c:	0018      	movs	r0, r3
 800131e:	f004 f87b 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001322:	193b      	adds	r3, r7, r4
 8001324:	0018      	movs	r0, r3
 8001326:	f7fe feef 	bl	8000108 <strlen>
 800132a:	0003      	movs	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	1939      	adds	r1, r7, r4
 8001330:	489b      	ldr	r0, [pc, #620]	; (80015a0 <printRadioSettings+0x754>)
 8001332:	230a      	movs	r3, #10
 8001334:	f003 fc70 	bl	8004c18 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001338:	003b      	movs	r3, r7
 800133a:	2205      	movs	r2, #5
 800133c:	0019      	movs	r1, r3
 800133e:	2010      	movs	r0, #16
 8001340:	f7ff f8f8 	bl	8000534 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001344:	003b      	movs	r3, r7
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	001d      	movs	r5, r3
 800134a:	003b      	movs	r3, r7
 800134c:	78db      	ldrb	r3, [r3, #3]
 800134e:	001e      	movs	r6, r3
 8001350:	003b      	movs	r3, r7
 8001352:	789b      	ldrb	r3, [r3, #2]
 8001354:	001a      	movs	r2, r3
 8001356:	003b      	movs	r3, r7
 8001358:	785b      	ldrb	r3, [r3, #1]
 800135a:	001c      	movs	r4, r3
 800135c:	003b      	movs	r3, r7
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4996      	ldr	r1, [pc, #600]	; (80015bc <printRadioSettings+0x770>)
 8001362:	2008      	movs	r0, #8
 8001364:	1838      	adds	r0, r7, r0
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	9401      	str	r4, [sp, #4]
 800136a:	9200      	str	r2, [sp, #0]
 800136c:	0033      	movs	r3, r6
 800136e:	002a      	movs	r2, r5
 8001370:	f004 f852 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001374:	2508      	movs	r5, #8
 8001376:	197b      	adds	r3, r7, r5
 8001378:	0018      	movs	r0, r3
 800137a:	f7fe fec5 	bl	8000108 <strlen>
 800137e:	0003      	movs	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	1979      	adds	r1, r7, r5
 8001384:	4886      	ldr	r0, [pc, #536]	; (80015a0 <printRadioSettings+0x754>)
 8001386:	230a      	movs	r3, #10
 8001388:	f003 fc46 	bl	8004c18 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800138c:	266f      	movs	r6, #111	; 0x6f
 800138e:	19bc      	adds	r4, r7, r6
 8001390:	2011      	movs	r0, #17
 8001392:	f7ff f8a1 	bl	80004d8 <NRF24_read_register>
 8001396:	0003      	movs	r3, r0
 8001398:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800139a:	0034      	movs	r4, r6
 800139c:	193b      	adds	r3, r7, r4
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	223f      	movs	r2, #63	; 0x3f
 80013a2:	401a      	ands	r2, r3
 80013a4:	4986      	ldr	r1, [pc, #536]	; (80015c0 <printRadioSettings+0x774>)
 80013a6:	197b      	adds	r3, r7, r5
 80013a8:	0018      	movs	r0, r3
 80013aa:	f004 f835 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013ae:	197b      	adds	r3, r7, r5
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7fe fea9 	bl	8000108 <strlen>
 80013b6:	0003      	movs	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	1979      	adds	r1, r7, r5
 80013bc:	4878      	ldr	r0, [pc, #480]	; (80015a0 <printRadioSettings+0x754>)
 80013be:	230a      	movs	r3, #10
 80013c0:	f003 fc2a 	bl	8004c18 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80013c4:	0026      	movs	r6, r4
 80013c6:	193c      	adds	r4, r7, r4
 80013c8:	2012      	movs	r0, #18
 80013ca:	f7ff f885 	bl	80004d8 <NRF24_read_register>
 80013ce:	0003      	movs	r3, r0
 80013d0:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80013d2:	0034      	movs	r4, r6
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	223f      	movs	r2, #63	; 0x3f
 80013da:	401a      	ands	r2, r3
 80013dc:	4979      	ldr	r1, [pc, #484]	; (80015c4 <printRadioSettings+0x778>)
 80013de:	197b      	adds	r3, r7, r5
 80013e0:	0018      	movs	r0, r3
 80013e2:	f004 f819 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013e6:	197b      	adds	r3, r7, r5
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7fe fe8d 	bl	8000108 <strlen>
 80013ee:	0003      	movs	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	1979      	adds	r1, r7, r5
 80013f4:	486a      	ldr	r0, [pc, #424]	; (80015a0 <printRadioSettings+0x754>)
 80013f6:	230a      	movs	r3, #10
 80013f8:	f003 fc0e 	bl	8004c18 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80013fc:	0026      	movs	r6, r4
 80013fe:	193c      	adds	r4, r7, r4
 8001400:	2013      	movs	r0, #19
 8001402:	f7ff f869 	bl	80004d8 <NRF24_read_register>
 8001406:	0003      	movs	r3, r0
 8001408:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800140a:	0034      	movs	r4, r6
 800140c:	193b      	adds	r3, r7, r4
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	223f      	movs	r2, #63	; 0x3f
 8001412:	401a      	ands	r2, r3
 8001414:	496c      	ldr	r1, [pc, #432]	; (80015c8 <printRadioSettings+0x77c>)
 8001416:	197b      	adds	r3, r7, r5
 8001418:	0018      	movs	r0, r3
 800141a:	f003 fffd 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800141e:	197b      	adds	r3, r7, r5
 8001420:	0018      	movs	r0, r3
 8001422:	f7fe fe71 	bl	8000108 <strlen>
 8001426:	0003      	movs	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	1979      	adds	r1, r7, r5
 800142c:	485c      	ldr	r0, [pc, #368]	; (80015a0 <printRadioSettings+0x754>)
 800142e:	230a      	movs	r3, #10
 8001430:	f003 fbf2 	bl	8004c18 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001434:	0026      	movs	r6, r4
 8001436:	193c      	adds	r4, r7, r4
 8001438:	2014      	movs	r0, #20
 800143a:	f7ff f84d 	bl	80004d8 <NRF24_read_register>
 800143e:	0003      	movs	r3, r0
 8001440:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001442:	0034      	movs	r4, r6
 8001444:	193b      	adds	r3, r7, r4
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	223f      	movs	r2, #63	; 0x3f
 800144a:	401a      	ands	r2, r3
 800144c:	495f      	ldr	r1, [pc, #380]	; (80015cc <printRadioSettings+0x780>)
 800144e:	197b      	adds	r3, r7, r5
 8001450:	0018      	movs	r0, r3
 8001452:	f003 ffe1 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001456:	197b      	adds	r3, r7, r5
 8001458:	0018      	movs	r0, r3
 800145a:	f7fe fe55 	bl	8000108 <strlen>
 800145e:	0003      	movs	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	1979      	adds	r1, r7, r5
 8001464:	484e      	ldr	r0, [pc, #312]	; (80015a0 <printRadioSettings+0x754>)
 8001466:	230a      	movs	r3, #10
 8001468:	f003 fbd6 	bl	8004c18 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800146c:	0026      	movs	r6, r4
 800146e:	193c      	adds	r4, r7, r4
 8001470:	2015      	movs	r0, #21
 8001472:	f7ff f831 	bl	80004d8 <NRF24_read_register>
 8001476:	0003      	movs	r3, r0
 8001478:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800147a:	0034      	movs	r4, r6
 800147c:	193b      	adds	r3, r7, r4
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	223f      	movs	r2, #63	; 0x3f
 8001482:	401a      	ands	r2, r3
 8001484:	4952      	ldr	r1, [pc, #328]	; (80015d0 <printRadioSettings+0x784>)
 8001486:	197b      	adds	r3, r7, r5
 8001488:	0018      	movs	r0, r3
 800148a:	f003 ffc5 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800148e:	197b      	adds	r3, r7, r5
 8001490:	0018      	movs	r0, r3
 8001492:	f7fe fe39 	bl	8000108 <strlen>
 8001496:	0003      	movs	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	1979      	adds	r1, r7, r5
 800149c:	4840      	ldr	r0, [pc, #256]	; (80015a0 <printRadioSettings+0x754>)
 800149e:	230a      	movs	r3, #10
 80014a0:	f003 fbba 	bl	8004c18 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80014a4:	0026      	movs	r6, r4
 80014a6:	193c      	adds	r4, r7, r4
 80014a8:	2016      	movs	r0, #22
 80014aa:	f7ff f815 	bl	80004d8 <NRF24_read_register>
 80014ae:	0003      	movs	r3, r0
 80014b0:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014b2:	0034      	movs	r4, r6
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	223f      	movs	r2, #63	; 0x3f
 80014ba:	401a      	ands	r2, r3
 80014bc:	4945      	ldr	r1, [pc, #276]	; (80015d4 <printRadioSettings+0x788>)
 80014be:	197b      	adds	r3, r7, r5
 80014c0:	0018      	movs	r0, r3
 80014c2:	f003 ffa9 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c6:	197b      	adds	r3, r7, r5
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7fe fe1d 	bl	8000108 <strlen>
 80014ce:	0003      	movs	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	1979      	adds	r1, r7, r5
 80014d4:	4832      	ldr	r0, [pc, #200]	; (80015a0 <printRadioSettings+0x754>)
 80014d6:	230a      	movs	r3, #10
 80014d8:	f003 fb9e 	bl	8004c18 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80014dc:	0026      	movs	r6, r4
 80014de:	193c      	adds	r4, r7, r4
 80014e0:	201c      	movs	r0, #28
 80014e2:	f7fe fff9 	bl	80004d8 <NRF24_read_register>
 80014e6:	0003      	movs	r3, r0
 80014e8:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014ea:	0031      	movs	r1, r6
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014f4:	17da      	asrs	r2, r3, #31
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	0fdb      	lsrs	r3, r3, #31
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001506:	17da      	asrs	r2, r3, #31
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	0fdb      	lsrs	r3, r3, #31
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001510:	187b      	adds	r3, r7, r1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2204      	movs	r2, #4
 8001516:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001518:	17da      	asrs	r2, r3, #31
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	0fdb      	lsrs	r3, r3, #31
 800151e:	b2db      	uxtb	r3, r3
 8001520:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001522:	187b      	adds	r3, r7, r1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2208      	movs	r2, #8
 8001528:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800152a:	17da      	asrs	r2, r3, #31
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	0fdb      	lsrs	r3, r3, #31
 8001530:	b2db      	uxtb	r3, r3
 8001532:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001534:	187b      	adds	r3, r7, r1
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2210      	movs	r2, #16
 800153a:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800153c:	17da      	asrs	r2, r3, #31
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	0fdb      	lsrs	r3, r3, #31
 8001542:	b2db      	uxtb	r3, r3
 8001544:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001546:	187b      	adds	r3, r7, r1
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2220      	movs	r2, #32
 800154c:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800154e:	17da      	asrs	r2, r3, #31
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	0fdb      	lsrs	r3, r3, #31
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4920      	ldr	r1, [pc, #128]	; (80015d8 <printRadioSettings+0x78c>)
 8001558:	2208      	movs	r2, #8
 800155a:	18b8      	adds	r0, r7, r2
 800155c:	9303      	str	r3, [sp, #12]
 800155e:	9602      	str	r6, [sp, #8]
 8001560:	9501      	str	r5, [sp, #4]
 8001562:	9400      	str	r4, [sp, #0]
 8001564:	4643      	mov	r3, r8
 8001566:	4662      	mov	r2, ip
 8001568:	f003 ff56 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156c:	2508      	movs	r5, #8
 800156e:	197b      	adds	r3, r7, r5
 8001570:	0018      	movs	r0, r3
 8001572:	f7fe fdc9 	bl	8000108 <strlen>
 8001576:	0003      	movs	r3, r0
 8001578:	b29a      	uxth	r2, r3
 800157a:	1979      	adds	r1, r7, r5
 800157c:	4808      	ldr	r0, [pc, #32]	; (80015a0 <printRadioSettings+0x754>)
 800157e:	230a      	movs	r3, #10
 8001580:	f003 fb4a 	bl	8004c18 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001584:	266f      	movs	r6, #111	; 0x6f
 8001586:	19bc      	adds	r4, r7, r6
 8001588:	201d      	movs	r0, #29
 800158a:	f7fe ffa5 	bl	80004d8 <NRF24_read_register>
 800158e:	0003      	movs	r3, r0
 8001590:	7023      	strb	r3, [r4, #0]
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001592:	19bb      	adds	r3, r7, r6
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2204      	movs	r2, #4
 8001598:	4013      	ands	r3, r2
 800159a:	e01f      	b.n	80015dc <printRadioSettings+0x790>
 800159c:	08006868 	.word	0x08006868
 80015a0:	20000110 	.word	0x20000110
 80015a4:	0800687c 	.word	0x0800687c
 80015a8:	080068ac 	.word	0x080068ac
 80015ac:	080068dc 	.word	0x080068dc
 80015b0:	08006904 	.word	0x08006904
 80015b4:	0800692c 	.word	0x0800692c
 80015b8:	08006954 	.word	0x08006954
 80015bc:	0800697c 	.word	0x0800697c
 80015c0:	080069a8 	.word	0x080069a8
 80015c4:	080069c4 	.word	0x080069c4
 80015c8:	080069e0 	.word	0x080069e0
 80015cc:	080069fc 	.word	0x080069fc
 80015d0:	08006a18 	.word	0x08006a18
 80015d4:	08006a34 	.word	0x08006a34
 80015d8:	08006a50 	.word	0x08006a50
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <printRadioSettings+0x7a2>
 80015e0:	4a28      	ldr	r2, [pc, #160]	; (8001684 <printRadioSettings+0x838>)
 80015e2:	197b      	adds	r3, r7, r5
 80015e4:	0011      	movs	r1, r2
 80015e6:	0018      	movs	r0, r3
 80015e8:	f003 ff16 	bl	8005418 <siprintf>
 80015ec:	e006      	b.n	80015fc <printRadioSettings+0x7b0>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80015ee:	4a26      	ldr	r2, [pc, #152]	; (8001688 <printRadioSettings+0x83c>)
 80015f0:	2308      	movs	r3, #8
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	0011      	movs	r1, r2
 80015f6:	0018      	movs	r0, r3
 80015f8:	f003 ff0e 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015fc:	2408      	movs	r4, #8
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	0018      	movs	r0, r3
 8001602:	f7fe fd81 	bl	8000108 <strlen>
 8001606:	0003      	movs	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	1939      	adds	r1, r7, r4
 800160c:	481f      	ldr	r0, [pc, #124]	; (800168c <printRadioSettings+0x840>)
 800160e:	230a      	movs	r3, #10
 8001610:	f003 fb02 	bl	8004c18 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001614:	236f      	movs	r3, #111	; 0x6f
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2202      	movs	r2, #2
 800161c:	4013      	ands	r3, r2
 800161e:	d006      	beq.n	800162e <printRadioSettings+0x7e2>
 8001620:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <printRadioSettings+0x844>)
 8001622:	193b      	adds	r3, r7, r4
 8001624:	0011      	movs	r1, r2
 8001626:	0018      	movs	r0, r3
 8001628:	f003 fef6 	bl	8005418 <siprintf>
 800162c:	e006      	b.n	800163c <printRadioSettings+0x7f0>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <printRadioSettings+0x848>)
 8001630:	2308      	movs	r3, #8
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	0011      	movs	r1, r2
 8001636:	0018      	movs	r0, r3
 8001638:	f003 feee 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800163c:	2408      	movs	r4, #8
 800163e:	193b      	adds	r3, r7, r4
 8001640:	0018      	movs	r0, r3
 8001642:	f7fe fd61 	bl	8000108 <strlen>
 8001646:	0003      	movs	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	1939      	adds	r1, r7, r4
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <printRadioSettings+0x840>)
 800164e:	230a      	movs	r3, #10
 8001650:	f003 fae2 	bl	8004c18 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001654:	4a10      	ldr	r2, [pc, #64]	; (8001698 <printRadioSettings+0x84c>)
 8001656:	193b      	adds	r3, r7, r4
 8001658:	0011      	movs	r1, r2
 800165a:	0018      	movs	r0, r3
 800165c:	f003 fedc 	bl	8005418 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001660:	193b      	adds	r3, r7, r4
 8001662:	0018      	movs	r0, r3
 8001664:	f7fe fd50 	bl	8000108 <strlen>
 8001668:	0003      	movs	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	1939      	adds	r1, r7, r4
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <printRadioSettings+0x840>)
 8001670:	230a      	movs	r3, #10
 8001672:	f003 fad1 	bl	8004c18 <HAL_UART_Transmit>
}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b01c      	add	sp, #112	; 0x70
 800167c:	bc80      	pop	{r7}
 800167e:	46b8      	mov	r8, r7
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	08006a9c 	.word	0x08006a9c
 8001688:	08006ab4 	.word	0x08006ab4
 800168c:	20000110 	.word	0x20000110
 8001690:	08006acc 	.word	0x08006acc
 8001694:	08006ae8 	.word	0x08006ae8
 8001698:	080066bc 	.word	0x080066bc

0800169c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800169c:	b084      	sub	sp, #16
 800169e:	b5b0      	push	{r4, r5, r7, lr}
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	2510      	movs	r5, #16
 80016a4:	197c      	adds	r4, r7, r5
 80016a6:	6020      	str	r0, [r4, #0]
 80016a8:	6061      	str	r1, [r4, #4]
 80016aa:	60a2      	str	r2, [r4, #8]
 80016ac:	60e3      	str	r3, [r4, #12]
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <nrf24_DebugUART_Init+0x30>)
 80016b0:	197b      	adds	r3, r7, r5
 80016b2:	0010      	movs	r0, r2
 80016b4:	0019      	movs	r1, r3
 80016b6:	2384      	movs	r3, #132	; 0x84
 80016b8:	001a      	movs	r2, r3
 80016ba:	f003 fe81 	bl	80053c0 <memcpy>
}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bcb0      	pop	{r4, r5, r7}
 80016c4:	bc08      	pop	{r3}
 80016c6:	b004      	add	sp, #16
 80016c8:	4718      	bx	r3
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	20000110 	.word	0x20000110

080016d0 <_write>:
uint32_t newAvg[4] = {0};			//our moving averages

//In order to print on uart as a serial debugger this function allows the use of printf
//when you use printf like normal and have this function and uart properly enabled your
//output will happen on your selected uart outputs
int _write(int file, char *outgoing, int len) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart2, outgoing, len, 100);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <_write+0x24>)
 80016e4:	2364      	movs	r3, #100	; 0x64
 80016e6:	f003 fa97 	bl	8004c18 <HAL_UART_Transmit>
   return len;
 80016ea:	687b      	ldr	r3, [r7, #4]
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b004      	add	sp, #16
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200002f4 	.word	0x200002f4

080016f8 <map>:

//maps our values from one range to another
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	69b9      	ldr	r1, [r7, #24]
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	1a8a      	subs	r2, r1, r2
 8001712:	435a      	muls	r2, r3
 8001714:	0010      	movs	r0, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	0019      	movs	r1, r3
 800171e:	f7fe fd8f 	bl	8000240 <__divsi3>
 8001722:	0003      	movs	r3, r0
 8001724:	001a      	movs	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	18d3      	adds	r3, r2, r3
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b004      	add	sp, #16
 8001730:	bd80      	pop	{r7, pc}

08001732 <movingAvg>:

//Function for smoothing our input for pwm uses the moving average algorithm
int movingAvg(int *ptrArrNumbers, long *ptrSum, int pos, int len, int nextNum)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	603b      	str	r3, [r7, #0]
  //Subtract the oldest number from the prev sum, add the new number
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	68f9      	ldr	r1, [r7, #12]
 800174a:	18cb      	adds	r3, r1, r3
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	1ad2      	subs	r2, r2, r3
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	18d2      	adds	r2, r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	601a      	str	r2, [r3, #0]
  //Assign the nextNum to the position in the array
  ptrArrNumbers[pos] = nextNum;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	18d3      	adds	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	601a      	str	r2, [r3, #0]
  //return the average
  return *ptrSum / len;
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	f7fe fd68 	bl	8000240 <__divsi3>
 8001770:	0003      	movs	r3, r0
}
 8001772:	0018      	movs	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	b004      	add	sp, #16
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	46c6      	mov	lr, r8
 8001780:	b500      	push	{lr}
 8001782:	b0a0      	sub	sp, #128	; 0x80
 8001784:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001786:	f000 fd2b 	bl	80021e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178a:	f000 f8ed 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178e:	f000 fa23 	bl	8001bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001792:	f000 f9f1 	bl	8001b78 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001796:	f000 f931 	bl	80019fc <MX_SPI1_Init>
  MX_TIM3_Init();
 800179a:	f000 f96d 	bl	8001a78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //Start Timers for all four PWM outputs
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800179e:	4b62      	ldr	r3, [pc, #392]	; (8001928 <main+0x1ac>)
 80017a0:	2100      	movs	r1, #0
 80017a2:	0018      	movs	r0, r3
 80017a4:	f002 fc38 	bl	8004018 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017a8:	4b5f      	ldr	r3, [pc, #380]	; (8001928 <main+0x1ac>)
 80017aa:	2104      	movs	r1, #4
 80017ac:	0018      	movs	r0, r3
 80017ae:	f002 fc33 	bl	8004018 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80017b2:	4b5d      	ldr	r3, [pc, #372]	; (8001928 <main+0x1ac>)
 80017b4:	2108      	movs	r1, #8
 80017b6:	0018      	movs	r0, r3
 80017b8:	f002 fc2e 	bl	8004018 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80017bc:	4b5a      	ldr	r3, [pc, #360]	; (8001928 <main+0x1ac>)
 80017be:	210c      	movs	r1, #12
 80017c0:	0018      	movs	r0, r3
 80017c2:	f002 fc29 	bl	8004018 <HAL_TIM_PWM_Start>

  //Initialize our NRF24 module with the correct pins and spi handler
  NRF24_begin(CEpin_GPIO_Port, CSNpin_Pin, CEpin_Pin, hspi1);
 80017c6:	4c59      	ldr	r4, [pc, #356]	; (800192c <main+0x1b0>)
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	009e      	lsls	r6, r3, #2
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	005d      	lsls	r5, r3, #1
 80017d0:	4b57      	ldr	r3, [pc, #348]	; (8001930 <main+0x1b4>)
 80017d2:	4698      	mov	r8, r3
 80017d4:	466b      	mov	r3, sp
 80017d6:	0018      	movs	r0, r3
 80017d8:	1d23      	adds	r3, r4, #4
 80017da:	2260      	movs	r2, #96	; 0x60
 80017dc:	0019      	movs	r1, r3
 80017de:	f003 fdef 	bl	80053c0 <memcpy>
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	0032      	movs	r2, r6
 80017e6:	0029      	movs	r1, r5
 80017e8:	4640      	mov	r0, r8
 80017ea:	f7fe ff81 	bl	80006f0 <NRF24_begin>

  //Initialize where our NRF24 debug messages will be displayed (we select uart)
  nrf24_DebugUART_Init(huart2);
 80017ee:	4c51      	ldr	r4, [pc, #324]	; (8001934 <main+0x1b8>)
 80017f0:	466b      	mov	r3, sp
 80017f2:	0018      	movs	r0, r3
 80017f4:	0023      	movs	r3, r4
 80017f6:	3310      	adds	r3, #16
 80017f8:	2274      	movs	r2, #116	; 0x74
 80017fa:	0019      	movs	r1, r3
 80017fc:	f003 fde0 	bl	80053c0 <memcpy>
 8001800:	6820      	ldr	r0, [r4, #0]
 8001802:	6861      	ldr	r1, [r4, #4]
 8001804:	68a2      	ldr	r2, [r4, #8]
 8001806:	68e3      	ldr	r3, [r4, #12]
 8001808:	f7ff ff48 	bl	800169c <nrf24_DebugUART_Init>
  //Print the NRF24 settings
  printRadioSettings();
 800180c:	f7ff fb1e 	bl	8000e4c <printRadioSettings>

  //Initialize various NRF24 options open the reading pipe and start listening
  NRF24_setAutoAck(false);
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff f9af 	bl	8000b74 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 8001816:	2034      	movs	r0, #52	; 0x34
 8001818:	f7ff f944 	bl	8000aa4 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 800181c:	2020      	movs	r0, #32
 800181e:	f7ff f95d 	bl	8000adc <NRF24_setPayloadSize>
  NRF24_openReadingPipe(1, RxpipeAddrs);
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <main+0x1bc>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2001      	movs	r0, #1
 800182a:	f7ff f8c3 	bl	80009b4 <NRF24_openReadingPipe>
  NRF24_startListening();
 800182e:	f7ff f869 	bl	8000904 <NRF24_startListening>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Check if we've received a packet from our transmitter
	if(NRF24_available()){
 8001832:	f7ff f891 	bl	8000958 <NRF24_available>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d0fb      	beq.n	8001832 <main+0xb6>

		//read the transmitted data into our array myRxData
		NRF24_read(myRxData, 32);
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <main+0x1c0>)
 800183c:	2120      	movs	r1, #32
 800183e:	0018      	movs	r0, r3
 8001840:	f7ff f893 	bl	800096a <NRF24_read>
		//180 degrees because we are using a range of 20ms and we need a duty cycle of 5ms to 25ms we use 500-2500
		//because of our clock settings (prescalar 48, period 20,000 us)
		//
		//Then we smooth our values using our movingAvg function
		uint8_t i;
		for(i = 0; i < 4; i++){
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e02d      	b.n	80018a8 <main+0x12c>
			int mapped = map(myRxData[i], 0, 180, 500, 2500);
 800184c:	1dfb      	adds	r3, r7, #7
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4a3a      	ldr	r2, [pc, #232]	; (800193c <main+0x1c0>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	0018      	movs	r0, r3
 8001856:	23fa      	movs	r3, #250	; 0xfa
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4a39      	ldr	r2, [pc, #228]	; (8001940 <main+0x1c4>)
 800185c:	9200      	str	r2, [sp, #0]
 800185e:	22b4      	movs	r2, #180	; 0xb4
 8001860:	2100      	movs	r1, #0
 8001862:	f7ff ff49 	bl	80016f8 <map>
 8001866:	0003      	movs	r3, r0
 8001868:	603b      	str	r3, [r7, #0]
			newAvg[i] = movingAvg(arrNumbers[i], &sum[i], pos, len, mapped);
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	015a      	lsls	r2, r3, #5
 8001870:	4b34      	ldr	r3, [pc, #208]	; (8001944 <main+0x1c8>)
 8001872:	18d0      	adds	r0, r2, r3
 8001874:	1dfb      	adds	r3, r7, #7
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	009a      	lsls	r2, r3, #2
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <main+0x1cc>)
 800187c:	18d1      	adds	r1, r2, r3
 800187e:	4b33      	ldr	r3, [pc, #204]	; (800194c <main+0x1d0>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	001a      	movs	r2, r3
 8001884:	2308      	movs	r3, #8
 8001886:	001c      	movs	r4, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	0023      	movs	r3, r4
 800188e:	f7ff ff50 	bl	8001732 <movingAvg>
 8001892:	0001      	movs	r1, r0
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <main+0x1d4>)
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	50d1      	str	r1, [r2, r3]
		for(i = 0; i < 4; i++){
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	3201      	adds	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d9cd      	bls.n	800184c <main+0xd0>
		}

		//Printing our adjusted values for debugging
		printf("0: %lu \r\n", newAvg[0]);
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <main+0x1d4>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <main+0x1d8>)
 80018b6:	0011      	movs	r1, r2
 80018b8:	0018      	movs	r0, r3
 80018ba:	f003 fd93 	bl	80053e4 <iprintf>
		printf("1: %lu \r\n", newAvg[1]);
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <main+0x1d4>)
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <main+0x1dc>)
 80018c4:	0011      	movs	r1, r2
 80018c6:	0018      	movs	r0, r3
 80018c8:	f003 fd8c 	bl	80053e4 <iprintf>
		printf("2: %lu \r\n", newAvg[2]);
 80018cc:	4b20      	ldr	r3, [pc, #128]	; (8001950 <main+0x1d4>)
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <main+0x1e0>)
 80018d2:	0011      	movs	r1, r2
 80018d4:	0018      	movs	r0, r3
 80018d6:	f003 fd85 	bl	80053e4 <iprintf>
		printf("3: %lu \r\n", newAvg[3]);
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <main+0x1d4>)
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <main+0x1e4>)
 80018e0:	0011      	movs	r1, r2
 80018e2:	0018      	movs	r0, r3
 80018e4:	f003 fd7e 	bl	80053e4 <iprintf>

		//increment our position in our arrayss of samples for moving average
		pos++;
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <main+0x1d0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <main+0x1d0>)
 80018f2:	701a      	strb	r2, [r3, #0]
		if(pos >= len){
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <main+0x1d0>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2208      	movs	r2, #8
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d302      	bcc.n	8001904 <main+0x188>
			pos = 0;
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <main+0x1d0>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
		}

		//Setting our PWM timers to our received and adjusted data
		TIM3->CCR1 = newAvg[0];
 8001904:	4a17      	ldr	r2, [pc, #92]	; (8001964 <main+0x1e8>)
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <main+0x1d4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2 = newAvg[1];
 800190c:	4a15      	ldr	r2, [pc, #84]	; (8001964 <main+0x1e8>)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <main+0x1d4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	6393      	str	r3, [r2, #56]	; 0x38
		TIM3->CCR3 = newAvg[2];
 8001914:	4a13      	ldr	r2, [pc, #76]	; (8001964 <main+0x1e8>)
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <main+0x1d4>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM3->CCR4 = newAvg[3];
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <main+0x1e8>)
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <main+0x1d4>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	6413      	str	r3, [r2, #64]	; 0x40
	if(NRF24_available()){
 8001924:	e785      	b.n	8001832 <main+0xb6>
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	20000248 	.word	0x20000248
 800192c:	20000290 	.word	0x20000290
 8001930:	48000400 	.word	0x48000400
 8001934:	200002f4 	.word	0x200002f4
 8001938:	20000000 	.word	0x20000000
 800193c:	20000244 	.word	0x20000244
 8001940:	000009c4 	.word	0x000009c4
 8001944:	20000194 	.word	0x20000194
 8001948:	20000218 	.word	0x20000218
 800194c:	20000214 	.word	0x20000214
 8001950:	20000228 	.word	0x20000228
 8001954:	08006c00 	.word	0x08006c00
 8001958:	08006c0c 	.word	0x08006c0c
 800195c:	08006c18 	.word	0x08006c18
 8001960:	08006c24 	.word	0x08006c24
 8001964:	40000400 	.word	0x40000400

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b091      	sub	sp, #68	; 0x44
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	2410      	movs	r4, #16
 8001970:	193b      	adds	r3, r7, r4
 8001972:	0018      	movs	r0, r3
 8001974:	2330      	movs	r3, #48	; 0x30
 8001976:	001a      	movs	r2, r3
 8001978:	2100      	movs	r1, #0
 800197a:	f003 fd2a 	bl	80053d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197e:	003b      	movs	r3, r7
 8001980:	0018      	movs	r0, r3
 8001982:	2310      	movs	r3, #16
 8001984:	001a      	movs	r2, r3
 8001986:	2100      	movs	r1, #0
 8001988:	f003 fd23 	bl	80053d2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800198c:	0021      	movs	r1, r4
 800198e:	187b      	adds	r3, r7, r1
 8001990:	2202      	movs	r2, #2
 8001992:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001994:	187b      	adds	r3, r7, r1
 8001996:	2201      	movs	r2, #1
 8001998:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800199a:	187b      	adds	r3, r7, r1
 800199c:	2210      	movs	r2, #16
 800199e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	2202      	movs	r2, #2
 80019a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	2200      	movs	r2, #0
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	22a0      	movs	r2, #160	; 0xa0
 80019b0:	0392      	lsls	r2, r2, #14
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2200      	movs	r2, #0
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	0018      	movs	r0, r3
 80019be:	f000 fe9f 	bl	8002700 <HAL_RCC_OscConfig>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x62>
  {
    Error_Handler();
 80019c6:	f000 f971 	bl	8001cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ca:	003b      	movs	r3, r7
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d0:	003b      	movs	r3, r7
 80019d2:	2202      	movs	r2, #2
 80019d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d6:	003b      	movs	r3, r7
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019dc:	003b      	movs	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019e2:	003b      	movs	r3, r7
 80019e4:	2101      	movs	r1, #1
 80019e6:	0018      	movs	r0, r3
 80019e8:	f001 f9a4 	bl	8002d34 <HAL_RCC_ClockConfig>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80019f0:	f000 f95c 	bl	8001cac <Error_Handler>
  }
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b011      	add	sp, #68	; 0x44
 80019fa:	bd90      	pop	{r4, r7, pc}

080019fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <MX_SPI1_Init+0x78>)
 8001a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a08:	2282      	movs	r2, #130	; 0x82
 8001a0a:	0052      	lsls	r2, r2, #1
 8001a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a16:	22e0      	movs	r2, #224	; 0xe0
 8001a18:	00d2      	lsls	r2, r2, #3
 8001a1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a32:	2220      	movs	r2, #32
 8001a34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a56:	2208      	movs	r2, #8
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <MX_SPI1_Init+0x74>)
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f001 fae5 	bl	800302c <HAL_SPI_Init>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a66:	f000 f921 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000290 	.word	0x20000290
 8001a74:	40013000 	.word	0x40013000

08001a78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7e:	2320      	movs	r3, #32
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	0018      	movs	r0, r3
 8001a84:	2308      	movs	r3, #8
 8001a86:	001a      	movs	r2, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f003 fca2 	bl	80053d2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	0018      	movs	r0, r3
 8001a92:	231c      	movs	r3, #28
 8001a94:	001a      	movs	r2, r3
 8001a96:	2100      	movs	r1, #0
 8001a98:	f003 fc9b 	bl	80053d2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001a9e:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <MX_TIM3_Init+0xf8>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001aa2:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001aa4:	2230      	movs	r2, #48	; 0x30
 8001aa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001aae:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001ab0:	4a30      	ldr	r2, [pc, #192]	; (8001b74 <MX_TIM3_Init+0xfc>)
 8001ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f002 fa58 	bl	8003f78 <HAL_TIM_PWM_Init>
 8001ac8:	1e03      	subs	r3, r0, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001acc:	f000 f8ee 	bl	8001cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	187b      	adds	r3, r7, r1
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ade:	187a      	adds	r2, r7, r1
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f002 ffdb 	bl	8004aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001aee:	f000 f8dd 	bl	8001cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2260      	movs	r2, #96	; 0x60
 8001af6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	22fa      	movs	r2, #250	; 0xfa
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0c:	1d39      	adds	r1, r7, #4
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	0018      	movs	r0, r3
 8001b14:	f002 fc48 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8001b18:	1e03      	subs	r3, r0, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8001b1c:	f000 f8c6 	bl	8001cac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b20:	1d39      	adds	r1, r7, #4
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001b24:	2204      	movs	r2, #4
 8001b26:	0018      	movs	r0, r3
 8001b28:	f002 fc3e 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8001b2c:	1e03      	subs	r3, r0, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8001b30:	f000 f8bc 	bl	8001cac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b34:	1d39      	adds	r1, r7, #4
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001b38:	2208      	movs	r2, #8
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f002 fc34 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8001b40:	1e03      	subs	r3, r0, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001b44:	f000 f8b2 	bl	8001cac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b48:	1d39      	adds	r1, r7, #4
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001b4c:	220c      	movs	r2, #12
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f002 fc2a 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001b58:	f000 f8a8 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <MX_TIM3_Init+0xf4>)
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f95e 	bl	8001e20 <HAL_TIM_MspPostInit>

}
 8001b64:	46c0      	nop			; (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b00a      	add	sp, #40	; 0x28
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000248 	.word	0x20000248
 8001b70:	40000400 	.word	0x40000400
 8001b74:	00004e20 	.word	0x00004e20

08001b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <MX_USART2_UART_Init+0x5c>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b84:	2296      	movs	r2, #150	; 0x96
 8001b86:	0212      	lsls	r2, r2, #8
 8001b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f002 ffd7 	bl	8004b70 <HAL_UART_Init>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d001      	beq.n	8001bca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bc6:	f000 f871 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200002f4 	.word	0x200002f4
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	240c      	movs	r4, #12
 8001be0:	193b      	adds	r3, r7, r4
 8001be2:	0018      	movs	r0, r3
 8001be4:	2314      	movs	r3, #20
 8001be6:	001a      	movs	r2, r3
 8001be8:	2100      	movs	r1, #0
 8001bea:	f003 fbf2 	bl	80053d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <MX_GPIO_Init+0xa8>)
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <MX_GPIO_Init+0xa8>)
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	0289      	lsls	r1, r1, #10
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <MX_GPIO_Init+0xa8>)
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	029b      	lsls	r3, r3, #10
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_GPIO_Init+0xa8>)
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <MX_GPIO_Init+0xa8>)
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	02c9      	lsls	r1, r1, #11
 8001c14:	430a      	orrs	r2, r1
 8001c16:	615a      	str	r2, [r3, #20]
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <MX_GPIO_Init+0xa8>)
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	02db      	lsls	r3, r3, #11
 8001c20:	4013      	ands	r3, r2
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_GPIO_Init+0xa8>)
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <MX_GPIO_Init+0xa8>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0309      	lsls	r1, r1, #12
 8001c30:	430a      	orrs	r2, r1
 8001c32:	615a      	str	r2, [r3, #20]
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <MX_GPIO_Init+0xa8>)
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	031b      	lsls	r3, r3, #12
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 8001c42:	23c0      	movs	r3, #192	; 0xc0
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	480f      	ldr	r0, [pc, #60]	; (8001c84 <MX_GPIO_Init+0xac>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	f000 fd3a 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
 8001c50:	193b      	adds	r3, r7, r4
 8001c52:	22c0      	movs	r2, #192	; 0xc0
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c58:	193b      	adds	r3, r7, r4
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	193b      	adds	r3, r7, r4
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	193b      	adds	r3, r7, r4
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <MX_GPIO_Init+0xac>)
 8001c6e:	0019      	movs	r1, r3
 8001c70:	0010      	movs	r0, r2
 8001c72:	f000 fbb7 	bl	80023e4 <HAL_GPIO_Init>

}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b009      	add	sp, #36	; 0x24
 8001c7c:	bd90      	pop	{r4, r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	40021000 	.word	0x40021000
 8001c84:	48000400 	.word	0x48000400

08001c88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c9a:	f000 fab5 	bl	8002208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	40012c00 	.word	0x40012c00

08001cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb0:	b672      	cpsid	i
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <Error_Handler+0x8>
	...

08001cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_MspInit+0x44>)
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_MspInit+0x44>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	619a      	str	r2, [r3, #24]
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_MspInit+0x44>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_MspInit+0x44>)
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_MspInit+0x44>)
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	0549      	lsls	r1, r1, #21
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	61da      	str	r2, [r3, #28]
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_MspInit+0x44>)
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	055b      	lsls	r3, r3, #21
 8001cec:	4013      	ands	r3, r2
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b002      	add	sp, #8
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b08b      	sub	sp, #44	; 0x2c
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	2414      	movs	r4, #20
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	2314      	movs	r3, #20
 8001d10:	001a      	movs	r2, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	f003 fb5d 	bl	80053d2 <memset>
  if(hspi->Instance==SPI1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2e      	ldr	r2, [pc, #184]	; (8001dd8 <HAL_SPI_MspInit+0xd8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d155      	bne.n	8001dce <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_SPI_MspInit+0xdc>)
 8001d24:	699a      	ldr	r2, [r3, #24]
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_SPI_MspInit+0xdc>)
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0149      	lsls	r1, r1, #5
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	619a      	str	r2, [r3, #24]
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <HAL_SPI_MspInit+0xdc>)
 8001d32:	699a      	ldr	r2, [r3, #24]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	015b      	lsls	r3, r3, #5
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_SPI_MspInit+0xdc>)
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_SPI_MspInit+0xdc>)
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	0289      	lsls	r1, r1, #10
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	615a      	str	r2, [r3, #20]
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <HAL_SPI_MspInit+0xdc>)
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	029b      	lsls	r3, r3, #10
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_SPI_MspInit+0xdc>)
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <HAL_SPI_MspInit+0xdc>)
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	02c9      	lsls	r1, r1, #11
 8001d64:	430a      	orrs	r2, r1
 8001d66:	615a      	str	r2, [r3, #20]
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_SPI_MspInit+0xdc>)
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	02db      	lsls	r3, r3, #11
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d76:	193b      	adds	r3, r7, r4
 8001d78:	22c0      	movs	r2, #192	; 0xc0
 8001d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	193b      	adds	r3, r7, r4
 8001d7e:	2202      	movs	r2, #2
 8001d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	193b      	adds	r3, r7, r4
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	193b      	adds	r3, r7, r4
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d8e:	193b      	adds	r3, r7, r4
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	193a      	adds	r2, r7, r4
 8001d96:	2390      	movs	r3, #144	; 0x90
 8001d98:	05db      	lsls	r3, r3, #23
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 fb21 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001da2:	0021      	movs	r1, r4
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	2208      	movs	r2, #8
 8001da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	2202      	movs	r2, #2
 8001dae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2203      	movs	r2, #3
 8001dba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_SPI_MspInit+0xe0>)
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	0010      	movs	r0, r2
 8001dca:	f000 fb0b 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b00b      	add	sp, #44	; 0x2c
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	40013000 	.word	0x40013000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	48000400 	.word	0x48000400

08001de4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <HAL_TIM_PWM_MspInit+0x34>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10b      	bne.n	8001e0e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_TIM_PWM_MspInit+0x38>)
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_TIM_PWM_MspInit+0x38>)
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	61da      	str	r2, [r3, #28]
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_TIM_PWM_MspInit+0x38>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	2202      	movs	r2, #2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b004      	add	sp, #16
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b08b      	sub	sp, #44	; 0x2c
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	2414      	movs	r4, #20
 8001e2a:	193b      	adds	r3, r7, r4
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	2314      	movs	r3, #20
 8001e30:	001a      	movs	r2, r3
 8001e32:	2100      	movs	r1, #0
 8001e34:	f003 facd 	bl	80053d2 <memset>
  if(htim->Instance==TIM3)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a26      	ldr	r2, [pc, #152]	; (8001ed8 <HAL_TIM_MspPostInit+0xb8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d146      	bne.n	8001ed0 <HAL_TIM_MspPostInit+0xb0>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_TIM_MspPostInit+0xbc>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_TIM_MspPostInit+0xbc>)
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	02c9      	lsls	r1, r1, #11
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <HAL_TIM_MspPostInit+0xbc>)
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	02db      	lsls	r3, r3, #11
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <HAL_TIM_MspPostInit+0xbc>)
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_TIM_MspPostInit+0xbc>)
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	0309      	lsls	r1, r1, #12
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_TIM_MspPostInit+0xbc>)
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	031b      	lsls	r3, r3, #12
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e7a:	193b      	adds	r3, r7, r4
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	193b      	adds	r3, r7, r4
 8001e82:	2202      	movs	r2, #2
 8001e84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	193b      	adds	r3, r7, r4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	193b      	adds	r3, r7, r4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	2201      	movs	r2, #1
 8001e96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e98:	193b      	adds	r3, r7, r4
 8001e9a:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_TIM_MspPostInit+0xc0>)
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	f000 faa0 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ea4:	0021      	movs	r1, r4
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	22c0      	movs	r2, #192	; 0xc0
 8001eaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	2202      	movs	r2, #2
 8001eb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001ebe:	187b      	adds	r3, r7, r1
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_TIM_MspPostInit+0xc4>)
 8001ec8:	0019      	movs	r1, r3
 8001eca:	0010      	movs	r0, r2
 8001ecc:	f000 fa8a 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b00b      	add	sp, #44	; 0x2c
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	48000800 	.word	0x48000800

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b08b      	sub	sp, #44	; 0x2c
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	2414      	movs	r4, #20
 8001ef2:	193b      	adds	r3, r7, r4
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	2314      	movs	r3, #20
 8001ef8:	001a      	movs	r2, r3
 8001efa:	2100      	movs	r1, #0
 8001efc:	f003 fa69 	bl	80053d2 <memset>
  if(huart->Instance==USART2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_UART_MspInit+0x90>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d132      	bne.n	8001f70 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_UART_MspInit+0x94>)
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_UART_MspInit+0x94>)
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	0289      	lsls	r1, r1, #10
 8001f14:	430a      	orrs	r2, r1
 8001f16:	61da      	str	r2, [r3, #28]
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_UART_MspInit+0x94>)
 8001f1a:	69da      	ldr	r2, [r3, #28]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_UART_MspInit+0x94>)
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_UART_MspInit+0x94>)
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	0289      	lsls	r1, r1, #10
 8001f30:	430a      	orrs	r2, r1
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_UART_MspInit+0x94>)
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	029b      	lsls	r3, r3, #10
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f42:	0021      	movs	r1, r4
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	220c      	movs	r2, #12
 8001f48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	2201      	movs	r2, #1
 8001f60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	187a      	adds	r2, r7, r1
 8001f64:	2390      	movs	r3, #144	; 0x90
 8001f66:	05db      	lsls	r3, r3, #23
 8001f68:	0011      	movs	r1, r2
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 fa3a 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b00b      	add	sp, #44	; 0x2c
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	40004400 	.word	0x40004400
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	0019      	movs	r1, r3
 8001f96:	200d      	movs	r0, #13
 8001f98:	f000 f9fe 	bl	8002398 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001f9c:	200d      	movs	r0, #13
 8001f9e:	f000 fa10 	bl	80023c2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_InitTick+0xa8>)
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_InitTick+0xa8>)
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	0109      	lsls	r1, r1, #4
 8001fac:	430a      	orrs	r2, r1
 8001fae:	619a      	str	r2, [r3, #24]
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_InitTick+0xa8>)
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	18fa      	adds	r2, r7, r3
 8001fc2:	2310      	movs	r3, #16
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	0011      	movs	r1, r2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f001 f805 	bl	8002fd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fce:	f000 ffed 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	4914      	ldr	r1, [pc, #80]	; (800202c <HAL_InitTick+0xac>)
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7fe f8a6 	bl	800012c <__udivsi3>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0xb0>)
 8001fe8:	4a12      	ldr	r2, [pc, #72]	; (8002034 <HAL_InitTick+0xb4>)
 8001fea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_InitTick+0xb0>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_InitTick+0xb8>)
 8001ff0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_InitTick+0xb0>)
 8001ff4:	6a3a      	ldr	r2, [r7, #32]
 8001ff6:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_InitTick+0xb0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_InitTick+0xb0>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_InitTick+0xb0>)
 8002006:	0018      	movs	r0, r3
 8002008:	f001 ff12 	bl	8003e30 <HAL_TIM_Base_Init>
 800200c:	1e03      	subs	r3, r0, #0
 800200e:	d105      	bne.n	800201c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_InitTick+0xb0>)
 8002012:	0018      	movs	r0, r3
 8002014:	f001 ff64 	bl	8003ee0 <HAL_TIM_Base_Start_IT>
 8002018:	0003      	movs	r3, r0
 800201a:	e000      	b.n	800201e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b00a      	add	sp, #40	; 0x28
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	40021000 	.word	0x40021000
 800202c:	000f4240 	.word	0x000f4240
 8002030:	20000378 	.word	0x20000378
 8002034:	40012c00 	.word	0x40012c00
 8002038:	000003e7 	.word	0x000003e7

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800206e:	0018      	movs	r0, r3
 8002070:	f002 f884 	bl	800417c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	20000378 	.word	0x20000378

08002080 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e00a      	b.n	80020a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002092:	e000      	b.n	8002096 <_read+0x16>
 8002094:	bf00      	nop
 8002096:	0001      	movs	r1, r0
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	60ba      	str	r2, [r7, #8]
 800209e:	b2ca      	uxtb	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dbf0      	blt.n	8002092 <_read+0x12>
	}

return len;
 80020b0:	687b      	ldr	r3, [r7, #4]
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b006      	add	sp, #24
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	return -1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	425b      	negs	r3, r3
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b002      	add	sp, #8
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	0192      	lsls	r2, r2, #6
 80020de:	605a      	str	r2, [r3, #4]
	return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b002      	add	sp, #8
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_isatty>:

int _isatty(int file)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
	return 1;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	b004      	add	sp, #16
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <_sbrk+0x5c>)
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <_sbrk+0x60>)
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <_sbrk+0x64>)
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <_sbrk+0x68>)
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	18d3      	adds	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d207      	bcs.n	8002154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002144:	f003 f912 	bl	800536c <__errno>
 8002148:	0003      	movs	r3, r0
 800214a:	220c      	movs	r2, #12
 800214c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214e:	2301      	movs	r3, #1
 8002150:	425b      	negs	r3, r3
 8002152:	e009      	b.n	8002168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	18d2      	adds	r2, r2, r3
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <_sbrk+0x64>)
 8002164:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b006      	add	sp, #24
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20002000 	.word	0x20002000
 8002174:	00000400 	.word	0x00000400
 8002178:	20000238 	.word	0x20000238
 800217c:	200003d8 	.word	0x200003d8

08002180 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800218e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002190:	480d      	ldr	r0, [pc, #52]	; (80021c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002192:	490e      	ldr	r1, [pc, #56]	; (80021cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002194:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <LoopForever+0xe>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a8:	4c0b      	ldr	r4, [pc, #44]	; (80021d8 <LoopForever+0x16>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021b6:	f7ff ffe3 	bl	8002180 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80021ba:	f003 f8dd 	bl	8005378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021be:	f7ff fadd 	bl	800177c <main>

080021c2 <LoopForever>:

LoopForever:
    b LoopForever
 80021c2:	e7fe      	b.n	80021c2 <LoopForever>
  ldr   r0, =_estack
 80021c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80021d0:	08006d18 	.word	0x08006d18
  ldr r2, =_sbss
 80021d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80021d8:	200003d4 	.word	0x200003d4

080021dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC1_IRQHandler>
	...

080021e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_Init+0x24>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_Init+0x24>)
 80021ea:	2110      	movs	r1, #16
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f7ff fec5 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f6:	f7ff fd5f 	bl	8001cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_IncTick+0x1c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	001a      	movs	r2, r3
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_IncTick+0x20>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	18d2      	adds	r2, r2, r3
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_IncTick+0x20>)
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	2000000c 	.word	0x2000000c
 8002228:	200003c0 	.word	0x200003c0

0800222c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b02      	ldr	r3, [pc, #8]	; (800223c <HAL_GetTick+0x10>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	200003c0 	.word	0x200003c0

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff fff0 	bl	800222c <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3301      	adds	r3, #1
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_Delay+0x44>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	001a      	movs	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	189b      	adds	r3, r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	f7ff ffe0 	bl	800222c <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b004      	add	sp, #16
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	2000000c 	.word	0x2000000c

08002288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	0002      	movs	r2, r0
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b7f      	cmp	r3, #127	; 0x7f
 800229a:	d809      	bhi.n	80022b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	001a      	movs	r2, r3
 80022a2:	231f      	movs	r3, #31
 80022a4:	401a      	ands	r2, r3
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <__NVIC_EnableIRQ+0x30>)
 80022a8:	2101      	movs	r1, #1
 80022aa:	4091      	lsls	r1, r2
 80022ac:	000a      	movs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
  }
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	e000e100 	.word	0xe000e100

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	0002      	movs	r2, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b7f      	cmp	r3, #127	; 0x7f
 80022d0:	d828      	bhi.n	8002324 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022d2:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <__NVIC_SetPriority+0xd4>)
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	33c0      	adds	r3, #192	; 0xc0
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	589b      	ldr	r3, [r3, r2]
 80022e2:	1dfa      	adds	r2, r7, #7
 80022e4:	7812      	ldrb	r2, [r2, #0]
 80022e6:	0011      	movs	r1, r2
 80022e8:	2203      	movs	r2, #3
 80022ea:	400a      	ands	r2, r1
 80022ec:	00d2      	lsls	r2, r2, #3
 80022ee:	21ff      	movs	r1, #255	; 0xff
 80022f0:	4091      	lsls	r1, r2
 80022f2:	000a      	movs	r2, r1
 80022f4:	43d2      	mvns	r2, r2
 80022f6:	401a      	ands	r2, r3
 80022f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	019b      	lsls	r3, r3, #6
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	401a      	ands	r2, r3
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	0018      	movs	r0, r3
 8002308:	2303      	movs	r3, #3
 800230a:	4003      	ands	r3, r0
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002310:	481f      	ldr	r0, [pc, #124]	; (8002390 <__NVIC_SetPriority+0xd4>)
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b25b      	sxtb	r3, r3
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	430a      	orrs	r2, r1
 800231c:	33c0      	adds	r3, #192	; 0xc0
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002322:	e031      	b.n	8002388 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002324:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <__NVIC_SetPriority+0xd8>)
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	0019      	movs	r1, r3
 800232c:	230f      	movs	r3, #15
 800232e:	400b      	ands	r3, r1
 8002330:	3b08      	subs	r3, #8
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3306      	adds	r3, #6
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	18d3      	adds	r3, r2, r3
 800233a:	3304      	adds	r3, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1dfa      	adds	r2, r7, #7
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	0011      	movs	r1, r2
 8002344:	2203      	movs	r2, #3
 8002346:	400a      	ands	r2, r1
 8002348:	00d2      	lsls	r2, r2, #3
 800234a:	21ff      	movs	r1, #255	; 0xff
 800234c:	4091      	lsls	r1, r2
 800234e:	000a      	movs	r2, r1
 8002350:	43d2      	mvns	r2, r2
 8002352:	401a      	ands	r2, r3
 8002354:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	019b      	lsls	r3, r3, #6
 800235a:	22ff      	movs	r2, #255	; 0xff
 800235c:	401a      	ands	r2, r3
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	0018      	movs	r0, r3
 8002364:	2303      	movs	r3, #3
 8002366:	4003      	ands	r3, r0
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <__NVIC_SetPriority+0xd8>)
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	001c      	movs	r4, r3
 8002374:	230f      	movs	r3, #15
 8002376:	4023      	ands	r3, r4
 8002378:	3b08      	subs	r3, #8
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	430a      	orrs	r2, r1
 800237e:	3306      	adds	r3, #6
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	18c3      	adds	r3, r0, r3
 8002384:	3304      	adds	r3, #4
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b003      	add	sp, #12
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	210f      	movs	r1, #15
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	1c02      	adds	r2, r0, #0
 80023a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	0011      	movs	r1, r2
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7ff ff81 	bl	80022bc <__NVIC_SetPriority>
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	0002      	movs	r2, r0
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7ff ff57 	bl	8002288 <__NVIC_EnableIRQ>
}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	46bd      	mov	sp, r7
 80023de:	b002      	add	sp, #8
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f2:	e14f      	b.n	8002694 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4091      	lsls	r1, r2
 80023fe:	000a      	movs	r2, r1
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d100      	bne.n	800240c <HAL_GPIO_Init+0x28>
 800240a:	e140      	b.n	800268e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2203      	movs	r2, #3
 8002412:	4013      	ands	r3, r2
 8002414:	2b01      	cmp	r3, #1
 8002416:	d005      	beq.n	8002424 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2203      	movs	r2, #3
 800241e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002420:	2b02      	cmp	r3, #2
 8002422:	d130      	bne.n	8002486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	409a      	lsls	r2, r3
 8002432:	0013      	movs	r3, r2
 8002434:	43da      	mvns	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	409a      	lsls	r2, r3
 8002446:	0013      	movs	r3, r2
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800245a:	2201      	movs	r2, #1
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
 8002460:	0013      	movs	r3, r2
 8002462:	43da      	mvns	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	2201      	movs	r2, #1
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
 8002478:	0013      	movs	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2203      	movs	r2, #3
 800248c:	4013      	ands	r3, r2
 800248e:	2b03      	cmp	r3, #3
 8002490:	d017      	beq.n	80024c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	409a      	lsls	r2, r3
 80024b4:	0013      	movs	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2203      	movs	r2, #3
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d123      	bne.n	8002516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	58d3      	ldr	r3, [r2, r3]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2207      	movs	r2, #7
 80024e0:	4013      	ands	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	409a      	lsls	r2, r3
 80024e8:	0013      	movs	r3, r2
 80024ea:	43da      	mvns	r2, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2107      	movs	r1, #7
 80024fa:	400b      	ands	r3, r1
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	409a      	lsls	r2, r3
 8002500:	0013      	movs	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	6939      	ldr	r1, [r7, #16]
 8002514:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	409a      	lsls	r2, r3
 8002524:	0013      	movs	r3, r2
 8002526:	43da      	mvns	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2203      	movs	r2, #3
 8002534:	401a      	ands	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	409a      	lsls	r2, r3
 800253c:	0013      	movs	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	029b      	lsls	r3, r3, #10
 8002552:	4013      	ands	r3, r2
 8002554:	d100      	bne.n	8002558 <HAL_GPIO_Init+0x174>
 8002556:	e09a      	b.n	800268e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002558:	4b54      	ldr	r3, [pc, #336]	; (80026ac <HAL_GPIO_Init+0x2c8>)
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_GPIO_Init+0x2c8>)
 800255e:	2101      	movs	r1, #1
 8002560:	430a      	orrs	r2, r1
 8002562:	619a      	str	r2, [r3, #24]
 8002564:	4b51      	ldr	r3, [pc, #324]	; (80026ac <HAL_GPIO_Init+0x2c8>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2201      	movs	r2, #1
 800256a:	4013      	ands	r3, r2
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002570:	4a4f      	ldr	r2, [pc, #316]	; (80026b0 <HAL_GPIO_Init+0x2cc>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	589b      	ldr	r3, [r3, r2]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2203      	movs	r2, #3
 8002582:	4013      	ands	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	409a      	lsls	r2, r3
 800258a:	0013      	movs	r3, r2
 800258c:	43da      	mvns	r2, r3
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	2390      	movs	r3, #144	; 0x90
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	429a      	cmp	r2, r3
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_Init+0x1e2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a44      	ldr	r2, [pc, #272]	; (80026b4 <HAL_GPIO_Init+0x2d0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00d      	beq.n	80025c2 <HAL_GPIO_Init+0x1de>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a43      	ldr	r2, [pc, #268]	; (80026b8 <HAL_GPIO_Init+0x2d4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d007      	beq.n	80025be <HAL_GPIO_Init+0x1da>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a42      	ldr	r2, [pc, #264]	; (80026bc <HAL_GPIO_Init+0x2d8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <HAL_GPIO_Init+0x1d6>
 80025b6:	2303      	movs	r3, #3
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x1e4>
 80025ba:	2305      	movs	r3, #5
 80025bc:	e004      	b.n	80025c8 <HAL_GPIO_Init+0x1e4>
 80025be:	2302      	movs	r3, #2
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_Init+0x1e4>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x1e4>
 80025c6:	2300      	movs	r3, #0
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	2103      	movs	r1, #3
 80025cc:	400a      	ands	r2, r1
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	4093      	lsls	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025d8:	4935      	ldr	r1, [pc, #212]	; (80026b0 <HAL_GPIO_Init+0x2cc>)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43da      	mvns	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	025b      	lsls	r3, r3, #9
 80025fe:	4013      	ands	r3, r2
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800260a:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43da      	mvns	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	4013      	ands	r3, r2
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43da      	mvns	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	035b      	lsls	r3, r3, #13
 8002652:	4013      	ands	r3, r2
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43da      	mvns	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	039b      	lsls	r3, r3, #14
 800267c:	4013      	ands	r3, r2
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	40da      	lsrs	r2, r3
 800269c:	1e13      	subs	r3, r2, #0
 800269e:	d000      	beq.n	80026a2 <HAL_GPIO_Init+0x2be>
 80026a0:	e6a8      	b.n	80023f4 <HAL_GPIO_Init+0x10>
  } 
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b006      	add	sp, #24
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000
 80026b4:	48000400 	.word	0x48000400
 80026b8:	48000800 	.word	0x48000800
 80026bc:	48000c00 	.word	0x48000c00
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	0008      	movs	r0, r1
 80026ce:	0011      	movs	r1, r2
 80026d0:	1cbb      	adds	r3, r7, #2
 80026d2:	1c02      	adds	r2, r0, #0
 80026d4:	801a      	strh	r2, [r3, #0]
 80026d6:	1c7b      	adds	r3, r7, #1
 80026d8:	1c0a      	adds	r2, r1, #0
 80026da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026dc:	1c7b      	adds	r3, r7, #1
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026e4:	1cbb      	adds	r3, r7, #2
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026ec:	e003      	b.n	80026f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ee:	1cbb      	adds	r3, r7, #2
 80026f0:	881a      	ldrh	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b002      	add	sp, #8
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e301      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2201      	movs	r2, #1
 8002718:	4013      	ands	r3, r2
 800271a:	d100      	bne.n	800271e <HAL_RCC_OscConfig+0x1e>
 800271c:	e08d      	b.n	800283a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800271e:	4bc3      	ldr	r3, [pc, #780]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	220c      	movs	r2, #12
 8002724:	4013      	ands	r3, r2
 8002726:	2b04      	cmp	r3, #4
 8002728:	d00e      	beq.n	8002748 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800272a:	4bc0      	ldr	r3, [pc, #768]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	220c      	movs	r2, #12
 8002730:	4013      	ands	r3, r2
 8002732:	2b08      	cmp	r3, #8
 8002734:	d116      	bne.n	8002764 <HAL_RCC_OscConfig+0x64>
 8002736:	4bbd      	ldr	r3, [pc, #756]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	025b      	lsls	r3, r3, #9
 800273e:	401a      	ands	r2, r3
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	025b      	lsls	r3, r3, #9
 8002744:	429a      	cmp	r2, r3
 8002746:	d10d      	bne.n	8002764 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	4bb8      	ldr	r3, [pc, #736]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	029b      	lsls	r3, r3, #10
 8002750:	4013      	ands	r3, r2
 8002752:	d100      	bne.n	8002756 <HAL_RCC_OscConfig+0x56>
 8002754:	e070      	b.n	8002838 <HAL_RCC_OscConfig+0x138>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d000      	beq.n	8002760 <HAL_RCC_OscConfig+0x60>
 800275e:	e06b      	b.n	8002838 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e2d8      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_RCC_OscConfig+0x7c>
 800276c:	4baf      	ldr	r3, [pc, #700]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4bae      	ldr	r3, [pc, #696]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	0249      	lsls	r1, r1, #9
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e02f      	b.n	80027dc <HAL_RCC_OscConfig+0xdc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10c      	bne.n	800279e <HAL_RCC_OscConfig+0x9e>
 8002784:	4ba9      	ldr	r3, [pc, #676]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4ba8      	ldr	r3, [pc, #672]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800278a:	49a9      	ldr	r1, [pc, #676]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 800278c:	400a      	ands	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	4ba6      	ldr	r3, [pc, #664]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4ba5      	ldr	r3, [pc, #660]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002796:	49a7      	ldr	r1, [pc, #668]	; (8002a34 <HAL_RCC_OscConfig+0x334>)
 8002798:	400a      	ands	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e01e      	b.n	80027dc <HAL_RCC_OscConfig+0xdc>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d10e      	bne.n	80027c4 <HAL_RCC_OscConfig+0xc4>
 80027a6:	4ba1      	ldr	r3, [pc, #644]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4ba0      	ldr	r3, [pc, #640]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	02c9      	lsls	r1, r1, #11
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	4b9d      	ldr	r3, [pc, #628]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b9c      	ldr	r3, [pc, #624]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027ba:	2180      	movs	r1, #128	; 0x80
 80027bc:	0249      	lsls	r1, r1, #9
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0xdc>
 80027c4:	4b99      	ldr	r3, [pc, #612]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b98      	ldr	r3, [pc, #608]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027ca:	4999      	ldr	r1, [pc, #612]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 80027cc:	400a      	ands	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	4b96      	ldr	r3, [pc, #600]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b95      	ldr	r3, [pc, #596]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80027d6:	4997      	ldr	r1, [pc, #604]	; (8002a34 <HAL_RCC_OscConfig+0x334>)
 80027d8:	400a      	ands	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d014      	beq.n	800280e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fd22 	bl	800222c <HAL_GetTick>
 80027e8:	0003      	movs	r3, r0
 80027ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ee:	f7ff fd1d 	bl	800222c <HAL_GetTick>
 80027f2:	0002      	movs	r2, r0
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e28a      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002800:	4b8a      	ldr	r3, [pc, #552]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	4013      	ands	r3, r2
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0xee>
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7ff fd0d 	bl	800222c <HAL_GetTick>
 8002812:	0003      	movs	r3, r0
 8002814:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002818:	f7ff fd08 	bl	800222c <HAL_GetTick>
 800281c:	0002      	movs	r2, r0
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e275      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	4b80      	ldr	r3, [pc, #512]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	029b      	lsls	r3, r3, #10
 8002832:	4013      	ands	r3, r2
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x118>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2202      	movs	r2, #2
 8002840:	4013      	ands	r3, r2
 8002842:	d100      	bne.n	8002846 <HAL_RCC_OscConfig+0x146>
 8002844:	e069      	b.n	800291a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002846:	4b79      	ldr	r3, [pc, #484]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	220c      	movs	r2, #12
 800284c:	4013      	ands	r3, r2
 800284e:	d00b      	beq.n	8002868 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002850:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	220c      	movs	r2, #12
 8002856:	4013      	ands	r3, r2
 8002858:	2b08      	cmp	r3, #8
 800285a:	d11c      	bne.n	8002896 <HAL_RCC_OscConfig+0x196>
 800285c:	4b73      	ldr	r3, [pc, #460]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	025b      	lsls	r3, r3, #9
 8002864:	4013      	ands	r3, r2
 8002866:	d116      	bne.n	8002896 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002868:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2202      	movs	r2, #2
 800286e:	4013      	ands	r3, r2
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x17e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e24b      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	22f8      	movs	r2, #248	; 0xf8
 8002884:	4393      	bics	r3, r2
 8002886:	0019      	movs	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	00da      	lsls	r2, r3, #3
 800288e:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002894:	e041      	b.n	800291a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d024      	beq.n	80028e8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4b62      	ldr	r3, [pc, #392]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028a4:	2101      	movs	r1, #1
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7ff fcbf 	bl	800222c <HAL_GetTick>
 80028ae:	0003      	movs	r3, r0
 80028b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b4:	f7ff fcba 	bl	800222c <HAL_GetTick>
 80028b8:	0002      	movs	r2, r0
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e227      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2202      	movs	r2, #2
 80028cc:	4013      	ands	r3, r2
 80028ce:	d0f1      	beq.n	80028b4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	22f8      	movs	r2, #248	; 0xf8
 80028d6:	4393      	bics	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00da      	lsls	r2, r3, #3
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e018      	b.n	800291a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e8:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b4f      	ldr	r3, [pc, #316]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80028ee:	2101      	movs	r1, #1
 80028f0:	438a      	bics	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fc9a 	bl	800222c <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7ff fc95 	bl	800222c <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e202      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002910:	4b46      	ldr	r3, [pc, #280]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2202      	movs	r2, #2
 8002916:	4013      	ands	r3, r2
 8002918:	d1f1      	bne.n	80028fe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2208      	movs	r2, #8
 8002920:	4013      	ands	r3, r2
 8002922:	d036      	beq.n	8002992 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d019      	beq.n	8002960 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292c:	4b3f      	ldr	r3, [pc, #252]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800292e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002930:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002932:	2101      	movs	r1, #1
 8002934:	430a      	orrs	r2, r1
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7ff fc78 	bl	800222c <HAL_GetTick>
 800293c:	0003      	movs	r3, r0
 800293e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002942:	f7ff fc73 	bl	800222c <HAL_GetTick>
 8002946:	0002      	movs	r2, r0
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1e0      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	2202      	movs	r2, #2
 800295a:	4013      	ands	r3, r2
 800295c:	d0f1      	beq.n	8002942 <HAL_RCC_OscConfig+0x242>
 800295e:	e018      	b.n	8002992 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002964:	4b31      	ldr	r3, [pc, #196]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002966:	2101      	movs	r1, #1
 8002968:	438a      	bics	r2, r1
 800296a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f7ff fc5e 	bl	800222c <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002976:	f7ff fc59 	bl	800222c <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1c6      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d1f1      	bne.n	8002976 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2204      	movs	r2, #4
 8002998:	4013      	ands	r3, r2
 800299a:	d100      	bne.n	800299e <HAL_RCC_OscConfig+0x29e>
 800299c:	e0b4      	b.n	8002b08 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299e:	201f      	movs	r0, #31
 80029a0:	183b      	adds	r3, r7, r0
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a6:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	055b      	lsls	r3, r3, #21
 80029ae:	4013      	ands	r3, r2
 80029b0:	d110      	bne.n	80029d4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0549      	lsls	r1, r1, #21
 80029bc:	430a      	orrs	r2, r1
 80029be:	61da      	str	r2, [r3, #28]
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	055b      	lsls	r3, r3, #21
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029ce:	183b      	adds	r3, r7, r0
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_RCC_OscConfig+0x338>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4013      	ands	r3, r2
 80029de:	d11a      	bne.n	8002a16 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_RCC_OscConfig+0x338>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_RCC_OscConfig+0x338>)
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	0049      	lsls	r1, r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7ff fc1d 	bl	800222c <HAL_GetTick>
 80029f2:	0003      	movs	r3, r0
 80029f4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7ff fc18 	bl	800222c <HAL_GetTick>
 80029fc:	0002      	movs	r2, r0
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e185      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_OscConfig+0x338>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10e      	bne.n	8002a3c <HAL_RCC_OscConfig+0x33c>
 8002a1e:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	4b02      	ldr	r3, [pc, #8]	; (8002a2c <HAL_RCC_OscConfig+0x32c>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	621a      	str	r2, [r3, #32]
 8002a2a:	e035      	b.n	8002a98 <HAL_RCC_OscConfig+0x398>
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	fffeffff 	.word	0xfffeffff
 8002a34:	fffbffff 	.word	0xfffbffff
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x35e>
 8002a44:	4bb6      	ldr	r3, [pc, #728]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a46:	6a1a      	ldr	r2, [r3, #32]
 8002a48:	4bb5      	ldr	r3, [pc, #724]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	621a      	str	r2, [r3, #32]
 8002a50:	4bb3      	ldr	r3, [pc, #716]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a52:	6a1a      	ldr	r2, [r3, #32]
 8002a54:	4bb2      	ldr	r3, [pc, #712]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a56:	2104      	movs	r1, #4
 8002a58:	438a      	bics	r2, r1
 8002a5a:	621a      	str	r2, [r3, #32]
 8002a5c:	e01c      	b.n	8002a98 <HAL_RCC_OscConfig+0x398>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x380>
 8002a66:	4bae      	ldr	r3, [pc, #696]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a68:	6a1a      	ldr	r2, [r3, #32]
 8002a6a:	4bad      	ldr	r3, [pc, #692]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a6c:	2104      	movs	r1, #4
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	621a      	str	r2, [r3, #32]
 8002a72:	4bab      	ldr	r3, [pc, #684]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a74:	6a1a      	ldr	r2, [r3, #32]
 8002a76:	4baa      	ldr	r3, [pc, #680]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	621a      	str	r2, [r3, #32]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0x398>
 8002a80:	4ba7      	ldr	r3, [pc, #668]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	4ba6      	ldr	r3, [pc, #664]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a86:	2101      	movs	r1, #1
 8002a88:	438a      	bics	r2, r1
 8002a8a:	621a      	str	r2, [r3, #32]
 8002a8c:	4ba4      	ldr	r3, [pc, #656]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a8e:	6a1a      	ldr	r2, [r3, #32]
 8002a90:	4ba3      	ldr	r3, [pc, #652]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002a92:	2104      	movs	r1, #4
 8002a94:	438a      	bics	r2, r1
 8002a96:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d014      	beq.n	8002aca <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa0:	f7ff fbc4 	bl	800222c <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa8:	e009      	b.n	8002abe <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7ff fbbf 	bl	800222c <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	4a9b      	ldr	r2, [pc, #620]	; (8002d24 <HAL_RCC_OscConfig+0x624>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e12b      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abe:	4b98      	ldr	r3, [pc, #608]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3aa>
 8002ac8:	e013      	b.n	8002af2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aca:	f7ff fbaf 	bl	800222c <HAL_GetTick>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	e009      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7ff fbaa 	bl	800222c <HAL_GetTick>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	4a91      	ldr	r2, [pc, #580]	; (8002d24 <HAL_RCC_OscConfig+0x624>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e116      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae8:	4b8d      	ldr	r3, [pc, #564]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	2202      	movs	r2, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002af2:	231f      	movs	r3, #31
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afc:	4b88      	ldr	r3, [pc, #544]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	4b87      	ldr	r3, [pc, #540]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b02:	4989      	ldr	r1, [pc, #548]	; (8002d28 <HAL_RCC_OscConfig+0x628>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d12a      	bne.n	8002b70 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b1a:	4b81      	ldr	r3, [pc, #516]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b1e:	4b80      	ldr	r3, [pc, #512]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b20:	2104      	movs	r1, #4
 8002b22:	430a      	orrs	r2, r1
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b26:	4b7e      	ldr	r3, [pc, #504]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b2a:	4b7d      	ldr	r3, [pc, #500]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7ff fb7b 	bl	800222c <HAL_GetTick>
 8002b36:	0003      	movs	r3, r0
 8002b38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b3c:	f7ff fb76 	bl	800222c <HAL_GetTick>
 8002b40:	0002      	movs	r2, r0
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0e3      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b4e:	4b74      	ldr	r3, [pc, #464]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	2202      	movs	r2, #2
 8002b54:	4013      	ands	r3, r2
 8002b56:	d0f1      	beq.n	8002b3c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b58:	4b71      	ldr	r3, [pc, #452]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	22f8      	movs	r2, #248	; 0xf8
 8002b5e:	4393      	bics	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	00da      	lsls	r2, r3, #3
 8002b68:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b6e:	e034      	b.n	8002bda <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	3305      	adds	r3, #5
 8002b76:	d111      	bne.n	8002b9c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b78:	4b69      	ldr	r3, [pc, #420]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7c:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b7e:	2104      	movs	r1, #4
 8002b80:	438a      	bics	r2, r1
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b84:	4b66      	ldr	r3, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	22f8      	movs	r2, #248	; 0xf8
 8002b8a:	4393      	bics	r3, r2
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	00da      	lsls	r2, r3, #3
 8002b94:	4b62      	ldr	r3, [pc, #392]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b96:	430a      	orrs	r2, r1
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34
 8002b9a:	e01e      	b.n	8002bda <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b9c:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba0:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ba8:	4b5d      	ldr	r3, [pc, #372]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bac:	4b5c      	ldr	r3, [pc, #368]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	438a      	bics	r2, r1
 8002bb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb4:	f7ff fb3a 	bl	800222c <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bbe:	f7ff fb35 	bl	800222c <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0a2      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d1f1      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d100      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4e4>
 8002be2:	e097      	b.n	8002d14 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be4:	4b4e      	ldr	r3, [pc, #312]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	220c      	movs	r2, #12
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d100      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4f2>
 8002bf0:	e06b      	b.n	8002cca <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d14c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b48      	ldr	r3, [pc, #288]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c00:	494a      	ldr	r1, [pc, #296]	; (8002d2c <HAL_RCC_OscConfig+0x62c>)
 8002c02:	400a      	ands	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7ff fb11 	bl	800222c <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c10:	f7ff fb0c 	bl	800222c <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e079      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	049b      	lsls	r3, r3, #18
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2e:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	220f      	movs	r2, #15
 8002c34:	4393      	bics	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3c:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4a3a      	ldr	r2, [pc, #232]	; (8002d30 <HAL_RCC_OscConfig+0x630>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	431a      	orrs	r2, r3
 8002c56:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	0449      	lsls	r1, r1, #17
 8002c66:	430a      	orrs	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff fadf 	bl	800222c <HAL_GetTick>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c74:	f7ff fada 	bl	800222c <HAL_GetTick>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e047      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c86:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	049b      	lsls	r3, r3, #18
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x574>
 8002c92:	e03f      	b.n	8002d14 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c94:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002c9a:	4924      	ldr	r1, [pc, #144]	; (8002d2c <HAL_RCC_OscConfig+0x62c>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7ff fac4 	bl	800222c <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002caa:	f7ff fabf 	bl	800222c <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e02c      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	049b      	lsls	r3, r3, #18
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x5aa>
 8002cc8:	e024      	b.n	8002d14 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e01f      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x620>)
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	025b      	lsls	r3, r3, #9
 8002ce8:	401a      	ands	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d10e      	bne.n	8002d10 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	23f0      	movs	r3, #240	; 0xf0
 8002d04:	039b      	lsls	r3, r3, #14
 8002d06:	401a      	ands	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b008      	add	sp, #32
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	40021000 	.word	0x40021000
 8002d24:	00001388 	.word	0x00001388
 8002d28:	efffffff 	.word	0xefffffff
 8002d2c:	feffffff 	.word	0xfeffffff
 8002d30:	ffc2ffff 	.word	0xffc2ffff

08002d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0b3      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <HAL_RCC_ClockConfig+0x184>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4013      	ands	r3, r2
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d911      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b58      	ldr	r3, [pc, #352]	; (8002eb8 <HAL_RCC_ClockConfig+0x184>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <HAL_RCC_ClockConfig+0x184>)
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d68:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_ClockConfig+0x184>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4013      	ands	r3, r2
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e09a      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	4013      	ands	r3, r2
 8002d82:	d015      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2204      	movs	r2, #4
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d006      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d8e:	4b4b      	ldr	r3, [pc, #300]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	4b4a      	ldr	r3, [pc, #296]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002d94:	21e0      	movs	r1, #224	; 0xe0
 8002d96:	00c9      	lsls	r1, r1, #3
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b47      	ldr	r3, [pc, #284]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	22f0      	movs	r2, #240	; 0xf0
 8002da2:	4393      	bics	r3, r2
 8002da4:	0019      	movs	r1, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	4b44      	ldr	r3, [pc, #272]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002dac:	430a      	orrs	r2, r1
 8002dae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	d040      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d114      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06e      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b38      	ldr	r3, [pc, #224]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	049b      	lsls	r3, r3, #18
 8002de2:	4013      	ands	r3, r2
 8002de4:	d108      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e062      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b34      	ldr	r3, [pc, #208]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2202      	movs	r2, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e05b      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df8:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	4393      	bics	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7ff fa0e 	bl	800222c <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e14:	e009      	b.n	8002e2a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e16:	f7ff fa09 	bl	800222c <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <HAL_RCC_ClockConfig+0x18c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e042      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	220c      	movs	r2, #12
 8002e30:	401a      	ands	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1ec      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <HAL_RCC_ClockConfig+0x184>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4013      	ands	r3, r2
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d211      	bcs.n	8002e6e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_RCC_ClockConfig+0x184>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4393      	bics	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_RCC_ClockConfig+0x184>)
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_RCC_ClockConfig+0x184>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2201      	movs	r2, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e020      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2204      	movs	r2, #4
 8002e74:	4013      	ands	r3, r2
 8002e76:	d009      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_RCC_ClockConfig+0x190>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e8c:	f000 f820 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e90:	0001      	movs	r1, r0
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_RCC_ClockConfig+0x188>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	220f      	movs	r2, #15
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x194>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	000a      	movs	r2, r1
 8002ea2:	40da      	lsrs	r2, r3
 8002ea4:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x198>)
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ea8:	2003      	movs	r0, #3
 8002eaa:	f7ff f869 	bl	8001f80 <HAL_InitTick>
  
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b004      	add	sp, #16
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40022000 	.word	0x40022000
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	00001388 	.word	0x00001388
 8002ec4:	fffff8ff 	.word	0xfffff8ff
 8002ec8:	08006c60 	.word	0x08006c60
 8002ecc:	20000008 	.word	0x20000008

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b08f      	sub	sp, #60	; 0x3c
 8002ed4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002ed6:	2314      	movs	r3, #20
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002edc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ede:	c313      	stmia	r3!, {r0, r1, r4}
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ee8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002eea:	c313      	stmia	r3!, {r0, r1, r4}
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef8:	2300      	movs	r3, #0
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002f04:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	220c      	movs	r2, #12
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d002      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x4a>
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d003      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x50>
 8002f18:	e02d      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f1a:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f1e:	e02d      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	0c9b      	lsrs	r3, r3, #18
 8002f24:	220f      	movs	r2, #15
 8002f26:	4013      	ands	r3, r2
 8002f28:	2214      	movs	r2, #20
 8002f2a:	18ba      	adds	r2, r7, r2
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f30:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	220f      	movs	r2, #15
 8002f36:	4013      	ands	r3, r2
 8002f38:	1d3a      	adds	r2, r7, #4
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	025b      	lsls	r3, r3, #9
 8002f44:	4013      	ands	r3, r2
 8002f46:	d009      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f4a:	4812      	ldr	r0, [pc, #72]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f4c:	f7fd f8ee 	bl	800012c <__udivsi3>
 8002f50:	0003      	movs	r3, r0
 8002f52:	001a      	movs	r2, r3
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	4353      	muls	r3, r2
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
 8002f5a:	e009      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f5e:	000a      	movs	r2, r1
 8002f60:	0152      	lsls	r2, r2, #5
 8002f62:	1a52      	subs	r2, r2, r1
 8002f64:	0193      	lsls	r3, r2, #6
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	185b      	adds	r3, r3, r1
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f74:	e002      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b00f      	add	sp, #60	; 0x3c
 8002f84:	bd90      	pop	{r4, r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	08006c30 	.word	0x08006c30
 8002f8c:	08006c40 	.word	0x08006c40
 8002f90:	40021000 	.word	0x40021000
 8002f94:	007a1200 	.word	0x007a1200

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	20000008 	.word	0x20000008

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002fb0:	f7ff fff2 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb4:	0001      	movs	r1, r0
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fc2:	5cd3      	ldrb	r3, [r2, r3]
 8002fc4:	40d9      	lsrs	r1, r3
 8002fc6:	000b      	movs	r3, r1
}    
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08006c70 	.word	0x08006c70

08002fd8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_RCC_GetClockConfig+0x4c>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2203      	movs	r2, #3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_GetClockConfig+0x4c>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	22f0      	movs	r2, #240	; 0xf0
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_RCC_GetClockConfig+0x4c>)
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	23e0      	movs	r3, #224	; 0xe0
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	401a      	ands	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_RCC_GetClockConfig+0x50>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2201      	movs	r2, #1
 8003014:	401a      	ands	r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	601a      	str	r2, [r3, #0]
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b002      	add	sp, #8
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	40021000 	.word	0x40021000
 8003028:	40022000 	.word	0x40022000

0800302c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e0a8      	b.n	8003190 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	2382      	movs	r3, #130	; 0x82
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	429a      	cmp	r2, r3
 8003050:	d009      	beq.n	8003066 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	61da      	str	r2, [r3, #28]
 8003058:	e005      	b.n	8003066 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	225d      	movs	r2, #93	; 0x5d
 8003070:	5c9b      	ldrb	r3, [r3, r2]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d107      	bne.n	8003088 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	225c      	movs	r2, #92	; 0x5c
 800307c:	2100      	movs	r1, #0
 800307e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0018      	movs	r0, r3
 8003084:	f7fe fe3c 	bl	8001d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	225d      	movs	r2, #93	; 0x5d
 800308c:	2102      	movs	r1, #2
 800308e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2140      	movs	r1, #64	; 0x40
 800309c:	438a      	bics	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	23e0      	movs	r3, #224	; 0xe0
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d902      	bls.n	80030b2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	e002      	b.n	80030b8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	015b      	lsls	r3, r3, #5
 80030b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	23f0      	movs	r3, #240	; 0xf0
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d008      	beq.n	80030d6 <HAL_SPI_Init+0xaa>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	23e0      	movs	r3, #224	; 0xe0
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d002      	beq.n	80030d6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	2382      	movs	r3, #130	; 0x82
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	401a      	ands	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6899      	ldr	r1, [r3, #8]
 80030e4:	2384      	movs	r3, #132	; 0x84
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	400b      	ands	r3, r1
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2102      	movs	r1, #2
 80030f2:	400b      	ands	r3, r1
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2101      	movs	r1, #1
 80030fc:	400b      	ands	r3, r1
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6999      	ldr	r1, [r3, #24]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	400b      	ands	r3, r1
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	2138      	movs	r1, #56	; 0x38
 8003112:	400b      	ands	r3, r1
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	2180      	movs	r1, #128	; 0x80
 800311c:	400b      	ands	r3, r1
 800311e:	431a      	orrs	r2, r3
 8003120:	0011      	movs	r1, r2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	401a      	ands	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	2204      	movs	r2, #4
 800313c:	401a      	ands	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2110      	movs	r1, #16
 8003144:	400b      	ands	r3, r1
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	2108      	movs	r1, #8
 800314e:	400b      	ands	r3, r1
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68d9      	ldr	r1, [r3, #12]
 8003156:	23f0      	movs	r3, #240	; 0xf0
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	400b      	ands	r3, r1
 800315c:	431a      	orrs	r2, r3
 800315e:	0011      	movs	r1, r2
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	015b      	lsls	r3, r3, #5
 8003166:	401a      	ands	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4907      	ldr	r1, [pc, #28]	; (8003198 <HAL_SPI_Init+0x16c>)
 800317c:	400a      	ands	r2, r1
 800317e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	225d      	movs	r2, #93	; 0x5d
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b004      	add	sp, #16
 8003196:	bd80      	pop	{r7, pc}
 8003198:	fffff7ff 	.word	0xfffff7ff

0800319c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	1dbb      	adds	r3, r7, #6
 80031aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031ac:	231f      	movs	r3, #31
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	225c      	movs	r2, #92	; 0x5c
 80031b8:	5c9b      	ldrb	r3, [r3, r2]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_SPI_Transmit+0x26>
 80031be:	2302      	movs	r3, #2
 80031c0:	e140      	b.n	8003444 <HAL_SPI_Transmit+0x2a8>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	225c      	movs	r2, #92	; 0x5c
 80031c6:	2101      	movs	r1, #1
 80031c8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ca:	f7ff f82f 	bl	800222c <HAL_GetTick>
 80031ce:	0003      	movs	r3, r0
 80031d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031d2:	2316      	movs	r3, #22
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	1dba      	adds	r2, r7, #6
 80031d8:	8812      	ldrh	r2, [r2, #0]
 80031da:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	225d      	movs	r2, #93	; 0x5d
 80031e0:	5c9b      	ldrb	r3, [r3, r2]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d004      	beq.n	80031f2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80031e8:	231f      	movs	r3, #31
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	2202      	movs	r2, #2
 80031ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80031f0:	e11d      	b.n	800342e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_SPI_Transmit+0x64>
 80031f8:	1dbb      	adds	r3, r7, #6
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003200:	231f      	movs	r3, #31
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
    goto error;
 8003208:	e111      	b.n	800342e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	225d      	movs	r2, #93	; 0x5d
 800320e:	2103      	movs	r1, #3
 8003210:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1dba      	adds	r2, r7, #6
 8003222:	8812      	ldrh	r2, [r2, #0]
 8003224:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1dba      	adds	r2, r7, #6
 800322a:	8812      	ldrh	r2, [r2, #0]
 800322c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2244      	movs	r2, #68	; 0x44
 8003238:	2100      	movs	r1, #0
 800323a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2246      	movs	r2, #70	; 0x46
 8003240:	2100      	movs	r1, #0
 8003242:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	429a      	cmp	r2, r3
 800325a:	d110      	bne.n	800327e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2140      	movs	r1, #64	; 0x40
 8003268:	438a      	bics	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	01c9      	lsls	r1, r1, #7
 800327a:	430a      	orrs	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2240      	movs	r2, #64	; 0x40
 8003286:	4013      	ands	r3, r2
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d007      	beq.n	800329c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2140      	movs	r1, #64	; 0x40
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	23e0      	movs	r3, #224	; 0xe0
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d94e      	bls.n	8003346 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <HAL_SPI_Transmit+0x11e>
 80032b0:	2316      	movs	r3, #22
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d13f      	bne.n	800333a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	881a      	ldrh	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	1c9a      	adds	r2, r3, #2
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032de:	e02c      	b.n	800333a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2202      	movs	r2, #2
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d112      	bne.n	8003314 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	881a      	ldrh	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	1c9a      	adds	r2, r3, #2
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003312:	e012      	b.n	800333a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003314:	f7fe ff8a 	bl	800222c <HAL_GetTick>
 8003318:	0002      	movs	r2, r0
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d802      	bhi.n	800332a <HAL_SPI_Transmit+0x18e>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	3301      	adds	r3, #1
 8003328:	d102      	bne.n	8003330 <HAL_SPI_Transmit+0x194>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003330:	231f      	movs	r3, #31
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2203      	movs	r2, #3
 8003336:	701a      	strb	r2, [r3, #0]
          goto error;
 8003338:	e079      	b.n	800342e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1cd      	bne.n	80032e0 <HAL_SPI_Transmit+0x144>
 8003344:	e04f      	b.n	80033e6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d004      	beq.n	8003358 <HAL_SPI_Transmit+0x1bc>
 800334e:	2316      	movs	r3, #22
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d141      	bne.n	80033dc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	330c      	adds	r3, #12
 8003362:	7812      	ldrb	r2, [r2, #0]
 8003364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800337e:	e02d      	b.n	80033dc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2202      	movs	r2, #2
 8003388:	4013      	ands	r3, r2
 800338a:	2b02      	cmp	r3, #2
 800338c:	d113      	bne.n	80033b6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033b4:	e012      	b.n	80033dc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033b6:	f7fe ff39 	bl	800222c <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d802      	bhi.n	80033cc <HAL_SPI_Transmit+0x230>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	d102      	bne.n	80033d2 <HAL_SPI_Transmit+0x236>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80033d2:	231f      	movs	r3, #31
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	2203      	movs	r2, #3
 80033d8:	701a      	strb	r2, [r3, #0]
          goto error;
 80033da:	e028      	b.n	800342e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1cc      	bne.n	8003380 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f000 fcd9 	bl	8003da4 <SPI_EndRxTxTransaction>
 80033f2:	1e03      	subs	r3, r0, #0
 80033f4:	d002      	beq.n	80033fc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003422:	231f      	movs	r3, #31
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e000      	b.n	800342e <HAL_SPI_Transmit+0x292>
  }

error:
 800342c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	225d      	movs	r2, #93	; 0x5d
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	225c      	movs	r2, #92	; 0x5c
 800343a:	2100      	movs	r1, #0
 800343c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800343e:	231f      	movs	r3, #31
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	781b      	ldrb	r3, [r3, #0]
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b008      	add	sp, #32
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344c:	b590      	push	{r4, r7, lr}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	1dbb      	adds	r3, r7, #6
 800345a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800345c:	2317      	movs	r3, #23
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	2382      	movs	r3, #130	; 0x82
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	429a      	cmp	r2, r3
 800346e:	d113      	bne.n	8003498 <HAL_SPI_Receive+0x4c>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10f      	bne.n	8003498 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	225d      	movs	r2, #93	; 0x5d
 800347c:	2104      	movs	r1, #4
 800347e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003480:	1dbb      	adds	r3, r7, #6
 8003482:	881c      	ldrh	r4, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	0023      	movs	r3, r4
 8003490:	f000 f928 	bl	80036e4 <HAL_SPI_TransmitReceive>
 8003494:	0003      	movs	r3, r0
 8003496:	e11c      	b.n	80036d2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	225c      	movs	r2, #92	; 0x5c
 800349c:	5c9b      	ldrb	r3, [r3, r2]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_SPI_Receive+0x5a>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e115      	b.n	80036d2 <HAL_SPI_Receive+0x286>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	225c      	movs	r2, #92	; 0x5c
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ae:	f7fe febd 	bl	800222c <HAL_GetTick>
 80034b2:	0003      	movs	r3, r0
 80034b4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	225d      	movs	r2, #93	; 0x5d
 80034ba:	5c9b      	ldrb	r3, [r3, r2]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d004      	beq.n	80034cc <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80034c2:	2317      	movs	r3, #23
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2202      	movs	r2, #2
 80034c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80034ca:	e0f7      	b.n	80036bc <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_SPI_Receive+0x8e>
 80034d2:	1dbb      	adds	r3, r7, #6
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d104      	bne.n	80034e4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80034da:	2317      	movs	r3, #23
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80034e2:	e0eb      	b.n	80036bc <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	225d      	movs	r2, #93	; 0x5d
 80034e8:	2104      	movs	r1, #4
 80034ea:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1dba      	adds	r2, r7, #6
 80034fc:	2144      	movs	r1, #68	; 0x44
 80034fe:	8812      	ldrh	r2, [r2, #0]
 8003500:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1dba      	adds	r2, r7, #6
 8003506:	2146      	movs	r1, #70	; 0x46
 8003508:	8812      	ldrh	r2, [r2, #0]
 800350a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	23e0      	movs	r3, #224	; 0xe0
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	429a      	cmp	r2, r3
 8003534:	d908      	bls.n	8003548 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4966      	ldr	r1, [pc, #408]	; (80036dc <HAL_SPI_Receive+0x290>)
 8003542:	400a      	ands	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	e008      	b.n	800355a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	0149      	lsls	r1, r1, #5
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	429a      	cmp	r2, r3
 8003564:	d10f      	bne.n	8003586 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2140      	movs	r1, #64	; 0x40
 8003572:	438a      	bics	r2, r1
 8003574:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4957      	ldr	r1, [pc, #348]	; (80036e0 <HAL_SPI_Receive+0x294>)
 8003582:	400a      	ands	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	4013      	ands	r3, r2
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d007      	beq.n	80035a4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2140      	movs	r1, #64	; 0x40
 80035a0:	430a      	orrs	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	23e0      	movs	r3, #224	; 0xe0
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d900      	bls.n	80035b2 <HAL_SPI_Receive+0x166>
 80035b0:	e069      	b.n	8003686 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035b2:	e031      	b.n	8003618 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2201      	movs	r2, #1
 80035bc:	4013      	ands	r3, r2
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d117      	bne.n	80035f2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	330c      	adds	r3, #12
 80035c8:	001a      	movs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2246      	movs	r2, #70	; 0x46
 80035e2:	5a9b      	ldrh	r3, [r3, r2]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b299      	uxth	r1, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2246      	movs	r2, #70	; 0x46
 80035ee:	5299      	strh	r1, [r3, r2]
 80035f0:	e012      	b.n	8003618 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f2:	f7fe fe1b 	bl	800222c <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d802      	bhi.n	8003608 <HAL_SPI_Receive+0x1bc>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	3301      	adds	r3, #1
 8003606:	d102      	bne.n	800360e <HAL_SPI_Receive+0x1c2>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d104      	bne.n	8003618 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800360e:	2317      	movs	r3, #23
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2203      	movs	r2, #3
 8003614:	701a      	strb	r2, [r3, #0]
          goto error;
 8003616:	e051      	b.n	80036bc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2246      	movs	r2, #70	; 0x46
 800361c:	5a9b      	ldrh	r3, [r3, r2]
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1c7      	bne.n	80035b4 <HAL_SPI_Receive+0x168>
 8003624:	e035      	b.n	8003692 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2201      	movs	r2, #1
 800362e:	4013      	ands	r3, r2
 8003630:	2b01      	cmp	r3, #1
 8003632:	d115      	bne.n	8003660 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	b292      	uxth	r2, r2
 8003640:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	1c9a      	adds	r2, r3, #2
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2246      	movs	r2, #70	; 0x46
 8003650:	5a9b      	ldrh	r3, [r3, r2]
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b299      	uxth	r1, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2246      	movs	r2, #70	; 0x46
 800365c:	5299      	strh	r1, [r3, r2]
 800365e:	e012      	b.n	8003686 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003660:	f7fe fde4 	bl	800222c <HAL_GetTick>
 8003664:	0002      	movs	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d802      	bhi.n	8003676 <HAL_SPI_Receive+0x22a>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	d102      	bne.n	800367c <HAL_SPI_Receive+0x230>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800367c:	2317      	movs	r3, #23
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2203      	movs	r2, #3
 8003682:	701a      	strb	r2, [r3, #0]
          goto error;
 8003684:	e01a      	b.n	80036bc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2246      	movs	r2, #70	; 0x46
 800368a:	5a9b      	ldrh	r3, [r3, r2]
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1c9      	bne.n	8003626 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	0018      	movs	r0, r3
 800369a:	f000 fb25 	bl	8003ce8 <SPI_EndRxTransaction>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80036b0:	2317      	movs	r3, #23
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e000      	b.n	80036bc <HAL_SPI_Receive+0x270>
  }

error :
 80036ba:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	225d      	movs	r2, #93	; 0x5d
 80036c0:	2101      	movs	r1, #1
 80036c2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	225c      	movs	r2, #92	; 0x5c
 80036c8:	2100      	movs	r1, #0
 80036ca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80036cc:	2317      	movs	r3, #23
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	781b      	ldrb	r3, [r3, #0]
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b007      	add	sp, #28
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	ffffefff 	.word	0xffffefff
 80036e0:	ffffbfff 	.word	0xffffbfff

080036e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	001a      	movs	r2, r3
 80036f2:	1cbb      	adds	r3, r7, #2
 80036f4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036f6:	2301      	movs	r3, #1
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036fa:	2323      	movs	r3, #35	; 0x23
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	225c      	movs	r2, #92	; 0x5c
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_SPI_TransmitReceive+0x2c>
 800370c:	2302      	movs	r3, #2
 800370e:	e1b5      	b.n	8003a7c <HAL_SPI_TransmitReceive+0x398>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	225c      	movs	r2, #92	; 0x5c
 8003714:	2101      	movs	r1, #1
 8003716:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003718:	f7fe fd88 	bl	800222c <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003720:	201b      	movs	r0, #27
 8003722:	183b      	adds	r3, r7, r0
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	215d      	movs	r1, #93	; 0x5d
 8003728:	5c52      	ldrb	r2, [r2, r1]
 800372a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003732:	2312      	movs	r3, #18
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	1cba      	adds	r2, r7, #2
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800373c:	183b      	adds	r3, r7, r0
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d011      	beq.n	8003768 <HAL_SPI_TransmitReceive+0x84>
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	2382      	movs	r3, #130	; 0x82
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	429a      	cmp	r2, r3
 800374c:	d107      	bne.n	800375e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <HAL_SPI_TransmitReceive+0x7a>
 8003756:	183b      	adds	r3, r7, r0
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d004      	beq.n	8003768 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800375e:	2323      	movs	r3, #35	; 0x23
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	2202      	movs	r2, #2
 8003764:	701a      	strb	r2, [r3, #0]
    goto error;
 8003766:	e17e      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <HAL_SPI_TransmitReceive+0x98>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_SPI_TransmitReceive+0x98>
 8003774:	1cbb      	adds	r3, r7, #2
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d104      	bne.n	8003786 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800377c:	2323      	movs	r3, #35	; 0x23
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
    goto error;
 8003784:	e16f      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	225d      	movs	r2, #93	; 0x5d
 800378a:	5c9b      	ldrb	r3, [r3, r2]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b04      	cmp	r3, #4
 8003790:	d003      	beq.n	800379a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	225d      	movs	r2, #93	; 0x5d
 8003796:	2105      	movs	r1, #5
 8003798:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1cba      	adds	r2, r7, #2
 80037aa:	2146      	movs	r1, #70	; 0x46
 80037ac:	8812      	ldrh	r2, [r2, #0]
 80037ae:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1cba      	adds	r2, r7, #2
 80037b4:	2144      	movs	r1, #68	; 0x44
 80037b6:	8812      	ldrh	r2, [r2, #0]
 80037b8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1cba      	adds	r2, r7, #2
 80037c4:	8812      	ldrh	r2, [r2, #0]
 80037c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1cba      	adds	r2, r7, #2
 80037cc:	8812      	ldrh	r2, [r2, #0]
 80037ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	23e0      	movs	r3, #224	; 0xe0
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d908      	bls.n	80037fa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	49a4      	ldr	r1, [pc, #656]	; (8003a84 <HAL_SPI_TransmitReceive+0x3a0>)
 80037f4:	400a      	ands	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	e008      	b.n	800380c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	0149      	lsls	r1, r1, #5
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2240      	movs	r2, #64	; 0x40
 8003814:	4013      	ands	r3, r2
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d007      	beq.n	800382a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2140      	movs	r1, #64	; 0x40
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	23e0      	movs	r3, #224	; 0xe0
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	429a      	cmp	r2, r3
 8003834:	d800      	bhi.n	8003838 <HAL_SPI_TransmitReceive+0x154>
 8003836:	e07f      	b.n	8003938 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_SPI_TransmitReceive+0x168>
 8003840:	2312      	movs	r3, #18
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d000      	beq.n	800384c <HAL_SPI_TransmitReceive+0x168>
 800384a:	e069      	b.n	8003920 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	1c9a      	adds	r2, r3, #2
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003870:	e056      	b.n	8003920 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2202      	movs	r2, #2
 800387a:	4013      	ands	r3, r2
 800387c:	2b02      	cmp	r3, #2
 800387e:	d11b      	bne.n	80038b8 <HAL_SPI_TransmitReceive+0x1d4>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d016      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x1d4>
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	2b01      	cmp	r3, #1
 800388e:	d113      	bne.n	80038b8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	881a      	ldrh	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	1c9a      	adds	r2, r3, #2
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2201      	movs	r2, #1
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d11c      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x21c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2246      	movs	r2, #70	; 0x46
 80038ca:	5a9b      	ldrh	r3, [r3, r2]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	b292      	uxth	r2, r2
 80038de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	1c9a      	adds	r2, r3, #2
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2246      	movs	r2, #70	; 0x46
 80038ee:	5a9b      	ldrh	r3, [r3, r2]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b299      	uxth	r1, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2246      	movs	r2, #70	; 0x46
 80038fa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038fc:	2301      	movs	r3, #1
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003900:	f7fe fc94 	bl	800222c <HAL_GetTick>
 8003904:	0002      	movs	r2, r0
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390c:	429a      	cmp	r2, r3
 800390e:	d807      	bhi.n	8003920 <HAL_SPI_TransmitReceive+0x23c>
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	3301      	adds	r3, #1
 8003914:	d004      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003916:	2323      	movs	r3, #35	; 0x23
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	2203      	movs	r2, #3
 800391c:	701a      	strb	r2, [r3, #0]
        goto error;
 800391e:	e0a2      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1a3      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x18e>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2246      	movs	r2, #70	; 0x46
 800392e:	5a9b      	ldrh	r3, [r3, r2]
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d19d      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x18e>
 8003936:	e085      	b.n	8003a44 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_SPI_TransmitReceive+0x268>
 8003940:	2312      	movs	r3, #18
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d000      	beq.n	800394c <HAL_SPI_TransmitReceive+0x268>
 800394a:	e070      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003972:	e05c      	b.n	8003a2e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2202      	movs	r2, #2
 800397c:	4013      	ands	r3, r2
 800397e:	2b02      	cmp	r3, #2
 8003980:	d11c      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x2d8>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d017      	beq.n	80039bc <HAL_SPI_TransmitReceive+0x2d8>
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	2b01      	cmp	r3, #1
 8003990:	d114      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2201      	movs	r2, #1
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d11e      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x324>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2246      	movs	r2, #70	; 0x46
 80039ce:	5a9b      	ldrh	r3, [r3, r2]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d018      	beq.n	8003a08 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	001a      	movs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	7812      	ldrb	r2, [r2, #0]
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2246      	movs	r2, #70	; 0x46
 80039f6:	5a9b      	ldrh	r3, [r3, r2]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b299      	uxth	r1, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2246      	movs	r2, #70	; 0x46
 8003a02:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a04:	2301      	movs	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a08:	f7fe fc10 	bl	800222c <HAL_GetTick>
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d802      	bhi.n	8003a1e <HAL_SPI_TransmitReceive+0x33a>
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	d102      	bne.n	8003a24 <HAL_SPI_TransmitReceive+0x340>
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003a24:	2323      	movs	r3, #35	; 0x23
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	2203      	movs	r2, #3
 8003a2a:	701a      	strb	r2, [r3, #0]
        goto error;
 8003a2c:	e01b      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d19d      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x290>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2246      	movs	r2, #70	; 0x46
 8003a3c:	5a9b      	ldrh	r3, [r3, r2]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d197      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 f9aa 	bl	8003da4 <SPI_EndRxTxTransaction>
 8003a50:	1e03      	subs	r3, r0, #0
 8003a52:	d007      	beq.n	8003a64 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003a54:	2323      	movs	r3, #35	; 0x23
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	661a      	str	r2, [r3, #96]	; 0x60
 8003a62:	e000      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003a64:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	225d      	movs	r2, #93	; 0x5d
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	225c      	movs	r2, #92	; 0x5c
 8003a72:	2100      	movs	r1, #0
 8003a74:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003a76:	2323      	movs	r3, #35	; 0x23
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	781b      	ldrb	r3, [r3, #0]
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b00a      	add	sp, #40	; 0x28
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	ffffefff 	.word	0xffffefff

08003a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	1dfb      	adds	r3, r7, #7
 8003a96:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a98:	f7fe fbc8 	bl	800222c <HAL_GetTick>
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	18d3      	adds	r3, r2, r3
 8003aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aa8:	f7fe fbc0 	bl	800222c <HAL_GetTick>
 8003aac:	0003      	movs	r3, r0
 8003aae:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ab0:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	015b      	lsls	r3, r3, #5
 8003ab6:	0d1b      	lsrs	r3, r3, #20
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	4353      	muls	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003abe:	e058      	b.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	d055      	beq.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ac6:	f7fe fbb1 	bl	800222c <HAL_GetTick>
 8003aca:	0002      	movs	r2, r0
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d902      	bls.n	8003adc <SPI_WaitFlagStateUntilTimeout+0x54>
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d142      	bne.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	21e0      	movs	r1, #224	; 0xe0
 8003ae8:	438a      	bics	r2, r1
 8003aea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	2382      	movs	r3, #130	; 0x82
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d113      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d005      	beq.n	8003b10 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d107      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2140      	movs	r1, #64	; 0x40
 8003b1c:	438a      	bics	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	019b      	lsls	r3, r3, #6
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d110      	bne.n	8003b4e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	491a      	ldr	r1, [pc, #104]	; (8003ba0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003b38:	400a      	ands	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	0189      	lsls	r1, r1, #6
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	225d      	movs	r2, #93	; 0x5d
 8003b52:	2101      	movs	r1, #1
 8003b54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	225c      	movs	r2, #92	; 0x5c
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e017      	b.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	425a      	negs	r2, r3
 8003b82:	4153      	adcs	r3, r2
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	001a      	movs	r2, r3
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d197      	bne.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b008      	add	sp, #32
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	20000008 	.word	0x20000008
 8003ba0:	ffffdfff 	.word	0xffffdfff

08003ba4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bb2:	2317      	movs	r3, #23
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bba:	f7fe fb37 	bl	800222c <HAL_GetTick>
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	18d3      	adds	r3, r2, r3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003bca:	f7fe fb2f 	bl	800222c <HAL_GetTick>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bda:	4b41      	ldr	r3, [pc, #260]	; (8003ce0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	0013      	movs	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	00da      	lsls	r2, r3, #3
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	0d1b      	lsrs	r3, r3, #20
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	4353      	muls	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bf0:	e068      	b.n	8003cc4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	23c0      	movs	r3, #192	; 0xc0
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d10a      	bne.n	8003c12 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	2117      	movs	r1, #23
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	d055      	beq.n	8003cc4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c18:	f7fe fb08 	bl	800222c <HAL_GetTick>
 8003c1c:	0002      	movs	r2, r0
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d902      	bls.n	8003c2e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d142      	bne.n	8003cb4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	21e0      	movs	r1, #224	; 0xe0
 8003c3a:	438a      	bics	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	2382      	movs	r3, #130	; 0x82
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d113      	bne.n	8003c72 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	2380      	movs	r3, #128	; 0x80
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d005      	beq.n	8003c62 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d107      	bne.n	8003c72 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2140      	movs	r1, #64	; 0x40
 8003c6e:	438a      	bics	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	019b      	lsls	r3, r3, #6
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d110      	bne.n	8003ca0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4916      	ldr	r1, [pc, #88]	; (8003ce4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	0189      	lsls	r1, r1, #6
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	225d      	movs	r2, #93	; 0x5d
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	225c      	movs	r2, #92	; 0x5c
 8003cac:	2100      	movs	r1, #0
 8003cae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e010      	b.n	8003cd6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d18e      	bne.n	8003bf2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b00a      	add	sp, #40	; 0x28
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	20000008 	.word	0x20000008
 8003ce4:	ffffdfff 	.word	0xffffdfff

08003ce8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	2382      	movs	r3, #130	; 0x82
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d113      	bne.n	8003d28 <SPI_EndRxTransaction+0x40>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d005      	beq.n	8003d18 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d107      	bne.n	8003d28 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2140      	movs	r1, #64	; 0x40
 8003d24:	438a      	bics	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	0013      	movs	r3, r2
 8003d32:	2200      	movs	r2, #0
 8003d34:	2180      	movs	r1, #128	; 0x80
 8003d36:	f7ff fea7 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003d3a:	1e03      	subs	r3, r0, #0
 8003d3c:	d007      	beq.n	8003d4e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d42:	2220      	movs	r2, #32
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e026      	b.n	8003d9c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	2382      	movs	r3, #130	; 0x82
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d11f      	bne.n	8003d9a <SPI_EndRxTransaction+0xb2>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d005      	beq.n	8003d72 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d113      	bne.n	8003d9a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	23c0      	movs	r3, #192	; 0xc0
 8003d76:	00d9      	lsls	r1, r3, #3
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	0013      	movs	r3, r2
 8003d80:	2200      	movs	r2, #0
 8003d82:	f7ff ff0f 	bl	8003ba4 <SPI_WaitFifoStateUntilTimeout>
 8003d86:	1e03      	subs	r3, r0, #0
 8003d88:	d007      	beq.n	8003d9a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8e:	2220      	movs	r2, #32
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e000      	b.n	8003d9c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b004      	add	sp, #16
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	23c0      	movs	r3, #192	; 0xc0
 8003db4:	0159      	lsls	r1, r3, #5
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	0013      	movs	r3, r2
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f7ff fef0 	bl	8003ba4 <SPI_WaitFifoStateUntilTimeout>
 8003dc4:	1e03      	subs	r3, r0, #0
 8003dc6:	d007      	beq.n	8003dd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dcc:	2220      	movs	r2, #32
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e027      	b.n	8003e28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	0013      	movs	r3, r2
 8003de2:	2200      	movs	r2, #0
 8003de4:	2180      	movs	r1, #128	; 0x80
 8003de6:	f7ff fe4f 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d007      	beq.n	8003dfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df2:	2220      	movs	r2, #32
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e014      	b.n	8003e28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	23c0      	movs	r3, #192	; 0xc0
 8003e02:	00d9      	lsls	r1, r3, #3
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	0013      	movs	r3, r2
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f7ff fec9 	bl	8003ba4 <SPI_WaitFifoStateUntilTimeout>
 8003e12:	1e03      	subs	r3, r0, #0
 8003e14:	d007      	beq.n	8003e26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e000      	b.n	8003e28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b004      	add	sp, #16
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e042      	b.n	8003ec8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	223d      	movs	r2, #61	; 0x3d
 8003e46:	5c9b      	ldrb	r3, [r3, r2]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d107      	bne.n	8003e5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	223c      	movs	r2, #60	; 0x3c
 8003e52:	2100      	movs	r1, #0
 8003e54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f000 f839 	bl	8003ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	223d      	movs	r2, #61	; 0x3d
 8003e62:	2102      	movs	r1, #2
 8003e64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	0019      	movs	r1, r3
 8003e70:	0010      	movs	r0, r2
 8003e72:	f000 fb7f 	bl	8004574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2246      	movs	r2, #70	; 0x46
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	223e      	movs	r2, #62	; 0x3e
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	223f      	movs	r2, #63	; 0x3f
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2240      	movs	r2, #64	; 0x40
 8003e92:	2101      	movs	r1, #1
 8003e94:	5499      	strb	r1, [r3, r2]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2241      	movs	r2, #65	; 0x41
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2242      	movs	r2, #66	; 0x42
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	5499      	strb	r1, [r3, r2]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2243      	movs	r2, #67	; 0x43
 8003eaa:	2101      	movs	r1, #1
 8003eac:	5499      	strb	r1, [r3, r2]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2244      	movs	r2, #68	; 0x44
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	5499      	strb	r1, [r3, r2]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2245      	movs	r2, #69	; 0x45
 8003eba:	2101      	movs	r1, #1
 8003ebc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	223d      	movs	r2, #61	; 0x3d
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	0018      	movs	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	223d      	movs	r2, #61	; 0x3d
 8003eec:	5c9b      	ldrb	r3, [r3, r2]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d001      	beq.n	8003ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e035      	b.n	8003f64 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	223d      	movs	r2, #61	; 0x3d
 8003efc:	2102      	movs	r1, #2
 8003efe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <HAL_TIM_Base_Start_IT+0x8c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x4e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <HAL_TIM_Base_Start_IT+0x90>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x4e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <HAL_TIM_Base_Start_IT+0x94>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d111      	bne.n	8003f52 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2207      	movs	r2, #7
 8003f36:	4013      	ands	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b06      	cmp	r3, #6
 8003f3e:	d010      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	e007      	b.n	8003f62 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b004      	add	sp, #16
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40014000 	.word	0x40014000

08003f78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e042      	b.n	8004010 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	223d      	movs	r2, #61	; 0x3d
 8003f8e:	5c9b      	ldrb	r3, [r3, r2]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d107      	bne.n	8003fa6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	223c      	movs	r2, #60	; 0x3c
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7fd ff1f 	bl	8001de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223d      	movs	r2, #61	; 0x3d
 8003faa:	2102      	movs	r1, #2
 8003fac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	0010      	movs	r0, r2
 8003fba:	f000 fadb 	bl	8004574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2246      	movs	r2, #70	; 0x46
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	223e      	movs	r2, #62	; 0x3e
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	223f      	movs	r2, #63	; 0x3f
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	5499      	strb	r1, [r3, r2]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2240      	movs	r2, #64	; 0x40
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2241      	movs	r2, #65	; 0x41
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2242      	movs	r2, #66	; 0x42
 8003fea:	2101      	movs	r1, #1
 8003fec:	5499      	strb	r1, [r3, r2]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2243      	movs	r2, #67	; 0x43
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	5499      	strb	r1, [r3, r2]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2244      	movs	r2, #68	; 0x44
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	5499      	strb	r1, [r3, r2]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2245      	movs	r2, #69	; 0x45
 8004002:	2101      	movs	r1, #1
 8004004:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	223d      	movs	r2, #61	; 0x3d
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b002      	add	sp, #8
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d108      	bne.n	800403a <HAL_TIM_PWM_Start+0x22>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	223e      	movs	r2, #62	; 0x3e
 800402c:	5c9b      	ldrb	r3, [r3, r2]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	1e5a      	subs	r2, r3, #1
 8004034:	4193      	sbcs	r3, r2
 8004036:	b2db      	uxtb	r3, r3
 8004038:	e01f      	b.n	800407a <HAL_TIM_PWM_Start+0x62>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d108      	bne.n	8004052 <HAL_TIM_PWM_Start+0x3a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	223f      	movs	r2, #63	; 0x3f
 8004044:	5c9b      	ldrb	r3, [r3, r2]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	1e5a      	subs	r2, r3, #1
 800404c:	4193      	sbcs	r3, r2
 800404e:	b2db      	uxtb	r3, r3
 8004050:	e013      	b.n	800407a <HAL_TIM_PWM_Start+0x62>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d108      	bne.n	800406a <HAL_TIM_PWM_Start+0x52>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2240      	movs	r2, #64	; 0x40
 800405c:	5c9b      	ldrb	r3, [r3, r2]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	1e5a      	subs	r2, r3, #1
 8004064:	4193      	sbcs	r3, r2
 8004066:	b2db      	uxtb	r3, r3
 8004068:	e007      	b.n	800407a <HAL_TIM_PWM_Start+0x62>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2241      	movs	r2, #65	; 0x41
 800406e:	5c9b      	ldrb	r3, [r3, r2]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	1e5a      	subs	r2, r3, #1
 8004076:	4193      	sbcs	r3, r2
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06e      	b.n	8004160 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <HAL_TIM_PWM_Start+0x7a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	223e      	movs	r2, #62	; 0x3e
 800408c:	2102      	movs	r1, #2
 800408e:	5499      	strb	r1, [r3, r2]
 8004090:	e013      	b.n	80040ba <HAL_TIM_PWM_Start+0xa2>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d104      	bne.n	80040a2 <HAL_TIM_PWM_Start+0x8a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	223f      	movs	r2, #63	; 0x3f
 800409c:	2102      	movs	r1, #2
 800409e:	5499      	strb	r1, [r3, r2]
 80040a0:	e00b      	b.n	80040ba <HAL_TIM_PWM_Start+0xa2>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_PWM_Start+0x9a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2240      	movs	r2, #64	; 0x40
 80040ac:	2102      	movs	r1, #2
 80040ae:	5499      	strb	r1, [r3, r2]
 80040b0:	e003      	b.n	80040ba <HAL_TIM_PWM_Start+0xa2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2241      	movs	r2, #65	; 0x41
 80040b6:	2102      	movs	r1, #2
 80040b8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6839      	ldr	r1, [r7, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	0018      	movs	r0, r3
 80040c4:	f000 fcc8 	bl	8004a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a26      	ldr	r2, [pc, #152]	; (8004168 <HAL_TIM_PWM_Start+0x150>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00e      	beq.n	80040f0 <HAL_TIM_PWM_Start+0xd8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a25      	ldr	r2, [pc, #148]	; (800416c <HAL_TIM_PWM_Start+0x154>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_TIM_PWM_Start+0xd8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a23      	ldr	r2, [pc, #140]	; (8004170 <HAL_TIM_PWM_Start+0x158>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_TIM_PWM_Start+0xd8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a22      	ldr	r2, [pc, #136]	; (8004174 <HAL_TIM_PWM_Start+0x15c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d101      	bne.n	80040f4 <HAL_TIM_PWM_Start+0xdc>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <HAL_TIM_PWM_Start+0xde>
 80040f4:	2300      	movs	r3, #0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	0209      	lsls	r1, r1, #8
 8004108:	430a      	orrs	r2, r1
 800410a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <HAL_TIM_PWM_Start+0x150>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_TIM_PWM_Start+0x112>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a17      	ldr	r2, [pc, #92]	; (8004178 <HAL_TIM_PWM_Start+0x160>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_TIM_PWM_Start+0x112>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a11      	ldr	r2, [pc, #68]	; (800416c <HAL_TIM_PWM_Start+0x154>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d111      	bne.n	800414e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2207      	movs	r2, #7
 8004132:	4013      	ands	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b06      	cmp	r3, #6
 800413a:	d010      	beq.n	800415e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2101      	movs	r1, #1
 8004148:	430a      	orrs	r2, r1
 800414a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	e007      	b.n	800415e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	0018      	movs	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	b004      	add	sp, #16
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800
 8004178:	40000400 	.word	0x40000400

0800417c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2202      	movs	r2, #2
 800418c:	4013      	ands	r3, r2
 800418e:	2b02      	cmp	r3, #2
 8004190:	d124      	bne.n	80041dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2202      	movs	r2, #2
 800419a:	4013      	ands	r3, r2
 800419c:	2b02      	cmp	r3, #2
 800419e:	d11d      	bne.n	80041dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2203      	movs	r2, #3
 80041a6:	4252      	negs	r2, r2
 80041a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2203      	movs	r2, #3
 80041b8:	4013      	ands	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 f9c0 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e007      	b.n	80041d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	0018      	movs	r0, r3
 80041ca:	f000 f9b3 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 f9bf 	bl	8004554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2204      	movs	r2, #4
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d125      	bne.n	8004236 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2204      	movs	r2, #4
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d11e      	bne.n	8004236 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2205      	movs	r2, #5
 80041fe:	4252      	negs	r2, r2
 8004200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	23c0      	movs	r3, #192	; 0xc0
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4013      	ands	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 f993 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 800421e:	e007      	b.n	8004230 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f986 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 f992 	bl	8004554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2208      	movs	r2, #8
 800423e:	4013      	ands	r3, r2
 8004240:	2b08      	cmp	r3, #8
 8004242:	d124      	bne.n	800428e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2208      	movs	r2, #8
 800424c:	4013      	ands	r3, r2
 800424e:	2b08      	cmp	r3, #8
 8004250:	d11d      	bne.n	800428e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2209      	movs	r2, #9
 8004258:	4252      	negs	r2, r2
 800425a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2204      	movs	r2, #4
 8004260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	2203      	movs	r2, #3
 800426a:	4013      	ands	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	0018      	movs	r0, r3
 8004272:	f000 f967 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 8004276:	e007      	b.n	8004288 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	0018      	movs	r0, r3
 800427c:	f000 f95a 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	0018      	movs	r0, r3
 8004284:	f000 f966 	bl	8004554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2210      	movs	r2, #16
 8004296:	4013      	ands	r3, r2
 8004298:	2b10      	cmp	r3, #16
 800429a:	d125      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2210      	movs	r2, #16
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d11e      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2211      	movs	r2, #17
 80042b0:	4252      	negs	r2, r2
 80042b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2208      	movs	r2, #8
 80042b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	23c0      	movs	r3, #192	; 0xc0
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4013      	ands	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0018      	movs	r0, r3
 80042cc:	f000 f93a 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 80042d0:	e007      	b.n	80042e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 f92d 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 f939 	bl	8004554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2201      	movs	r2, #1
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d10f      	bne.n	8004316 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	4013      	ands	r3, r2
 8004300:	2b01      	cmp	r3, #1
 8004302:	d108      	bne.n	8004316 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2202      	movs	r2, #2
 800430a:	4252      	negs	r2, r2
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	0018      	movs	r0, r3
 8004312:	f7fd fcb9 	bl	8001c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2280      	movs	r2, #128	; 0x80
 800431e:	4013      	ands	r3, r2
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d10f      	bne.n	8004344 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2280      	movs	r2, #128	; 0x80
 800432c:	4013      	ands	r3, r2
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d108      	bne.n	8004344 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2281      	movs	r2, #129	; 0x81
 8004338:	4252      	negs	r2, r2
 800433a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	0018      	movs	r0, r3
 8004340:	f000 fc0e 	bl	8004b60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2240      	movs	r2, #64	; 0x40
 800434c:	4013      	ands	r3, r2
 800434e:	2b40      	cmp	r3, #64	; 0x40
 8004350:	d10f      	bne.n	8004372 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2240      	movs	r2, #64	; 0x40
 800435a:	4013      	ands	r3, r2
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d108      	bne.n	8004372 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2241      	movs	r2, #65	; 0x41
 8004366:	4252      	negs	r2, r2
 8004368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 f8f9 	bl	8004564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2220      	movs	r2, #32
 800437a:	4013      	ands	r3, r2
 800437c:	2b20      	cmp	r3, #32
 800437e:	d10f      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	4013      	ands	r3, r2
 800438a:	2b20      	cmp	r3, #32
 800438c:	d108      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2221      	movs	r2, #33	; 0x21
 8004394:	4252      	negs	r2, r2
 8004396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	0018      	movs	r0, r3
 800439c:	f000 fbd8 	bl	8004b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a0:	46c0      	nop			; (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b002      	add	sp, #8
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2317      	movs	r3, #23
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	223c      	movs	r2, #60	; 0x3c
 80043c0:	5c9b      	ldrb	r3, [r3, r2]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_PWM_ConfigChannel+0x22>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e0ad      	b.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	223c      	movs	r2, #60	; 0x3c
 80043ce:	2101      	movs	r1, #1
 80043d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d100      	bne.n	80043da <HAL_TIM_PWM_ConfigChannel+0x32>
 80043d8:	e076      	b.n	80044c8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b0c      	cmp	r3, #12
 80043de:	d900      	bls.n	80043e2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80043e0:	e095      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x166>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d04e      	beq.n	8004486 <HAL_TIM_PWM_ConfigChannel+0xde>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d900      	bls.n	80043f0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80043ee:	e08e      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x166>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_PWM_ConfigChannel+0x56>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d021      	beq.n	8004440 <HAL_TIM_PWM_ConfigChannel+0x98>
 80043fc:	e087      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	0011      	movs	r1, r2
 8004406:	0018      	movs	r0, r3
 8004408:	f000 f92a 	bl	8004660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2108      	movs	r1, #8
 8004418:	430a      	orrs	r2, r1
 800441a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2104      	movs	r1, #4
 8004428:	438a      	bics	r2, r1
 800442a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	619a      	str	r2, [r3, #24]
      break;
 800443e:	e06b      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	0011      	movs	r1, r2
 8004448:	0018      	movs	r0, r3
 800444a:	f000 f991 	bl	8004770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	0109      	lsls	r1, r1, #4
 800445c:	430a      	orrs	r2, r1
 800445e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4931      	ldr	r1, [pc, #196]	; (8004530 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800446c:	400a      	ands	r2, r1
 800446e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6999      	ldr	r1, [r3, #24]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	021a      	lsls	r2, r3, #8
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	619a      	str	r2, [r3, #24]
      break;
 8004484:	e048      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	0011      	movs	r1, r2
 800448e:	0018      	movs	r0, r3
 8004490:	f000 f9f2 	bl	8004878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2108      	movs	r1, #8
 80044a0:	430a      	orrs	r2, r1
 80044a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2104      	movs	r1, #4
 80044b0:	438a      	bics	r2, r1
 80044b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69d9      	ldr	r1, [r3, #28]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	61da      	str	r2, [r3, #28]
      break;
 80044c6:	e027      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	0011      	movs	r1, r2
 80044d0:	0018      	movs	r0, r3
 80044d2:	f000 fa57 	bl	8004984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2180      	movs	r1, #128	; 0x80
 80044e2:	0109      	lsls	r1, r1, #4
 80044e4:	430a      	orrs	r2, r1
 80044e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69da      	ldr	r2, [r3, #28]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	490f      	ldr	r1, [pc, #60]	; (8004530 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80044f4:	400a      	ands	r2, r1
 80044f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69d9      	ldr	r1, [r3, #28]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	61da      	str	r2, [r3, #28]
      break;
 800450c:	e004      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800450e:	2317      	movs	r3, #23
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	2201      	movs	r2, #1
 8004514:	701a      	strb	r2, [r3, #0]
      break;
 8004516:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	223c      	movs	r2, #60	; 0x3c
 800451c:	2100      	movs	r1, #0
 800451e:	5499      	strb	r1, [r3, r2]

  return status;
 8004520:	2317      	movs	r3, #23
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	781b      	ldrb	r3, [r3, #0]
}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b006      	add	sp, #24
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	fffffbff 	.word	0xfffffbff

08004534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	46bd      	mov	sp, r7
 8004540:	b002      	add	sp, #8
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b002      	add	sp, #8
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	b002      	add	sp, #8
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}

08004574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a2f      	ldr	r2, [pc, #188]	; (8004644 <TIM_Base_SetConfig+0xd0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_Base_SetConfig+0x20>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a2e      	ldr	r2, [pc, #184]	; (8004648 <TIM_Base_SetConfig+0xd4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d108      	bne.n	80045a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2270      	movs	r2, #112	; 0x70
 8004598:	4393      	bics	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a26      	ldr	r2, [pc, #152]	; (8004644 <TIM_Base_SetConfig+0xd0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <TIM_Base_SetConfig+0x62>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a25      	ldr	r2, [pc, #148]	; (8004648 <TIM_Base_SetConfig+0xd4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00f      	beq.n	80045d6 <TIM_Base_SetConfig+0x62>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a24      	ldr	r2, [pc, #144]	; (800464c <TIM_Base_SetConfig+0xd8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <TIM_Base_SetConfig+0x62>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a23      	ldr	r2, [pc, #140]	; (8004650 <TIM_Base_SetConfig+0xdc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_Base_SetConfig+0x62>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a22      	ldr	r2, [pc, #136]	; (8004654 <TIM_Base_SetConfig+0xe0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_Base_SetConfig+0x62>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a21      	ldr	r2, [pc, #132]	; (8004658 <TIM_Base_SetConfig+0xe4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a20      	ldr	r2, [pc, #128]	; (800465c <TIM_Base_SetConfig+0xe8>)
 80045da:	4013      	ands	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2280      	movs	r2, #128	; 0x80
 80045ec:	4393      	bics	r3, r2
 80045ee:	001a      	movs	r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a0c      	ldr	r2, [pc, #48]	; (8004644 <TIM_Base_SetConfig+0xd0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00b      	beq.n	800462e <TIM_Base_SetConfig+0xba>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a0d      	ldr	r2, [pc, #52]	; (8004650 <TIM_Base_SetConfig+0xdc>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d007      	beq.n	800462e <TIM_Base_SetConfig+0xba>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <TIM_Base_SetConfig+0xe0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d003      	beq.n	800462e <TIM_Base_SetConfig+0xba>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <TIM_Base_SetConfig+0xe4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d103      	bne.n	8004636 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	615a      	str	r2, [r3, #20]
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b004      	add	sp, #16
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40012c00 	.word	0x40012c00
 8004648:	40000400 	.word	0x40000400
 800464c:	40002000 	.word	0x40002000
 8004650:	40014000 	.word	0x40014000
 8004654:	40014400 	.word	0x40014400
 8004658:	40014800 	.word	0x40014800
 800465c:	fffffcff 	.word	0xfffffcff

08004660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	2201      	movs	r2, #1
 8004670:	4393      	bics	r3, r2
 8004672:	001a      	movs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2270      	movs	r2, #112	; 0x70
 800468e:	4393      	bics	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2203      	movs	r2, #3
 8004696:	4393      	bics	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2202      	movs	r2, #2
 80046a8:	4393      	bics	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a27      	ldr	r2, [pc, #156]	; (8004758 <TIM_OC1_SetConfig+0xf8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00b      	beq.n	80046d6 <TIM_OC1_SetConfig+0x76>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a26      	ldr	r2, [pc, #152]	; (800475c <TIM_OC1_SetConfig+0xfc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <TIM_OC1_SetConfig+0x76>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a25      	ldr	r2, [pc, #148]	; (8004760 <TIM_OC1_SetConfig+0x100>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d003      	beq.n	80046d6 <TIM_OC1_SetConfig+0x76>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a24      	ldr	r2, [pc, #144]	; (8004764 <TIM_OC1_SetConfig+0x104>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d10c      	bne.n	80046f0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2208      	movs	r2, #8
 80046da:	4393      	bics	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2204      	movs	r2, #4
 80046ec:	4393      	bics	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a19      	ldr	r2, [pc, #100]	; (8004758 <TIM_OC1_SetConfig+0xf8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00b      	beq.n	8004710 <TIM_OC1_SetConfig+0xb0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a18      	ldr	r2, [pc, #96]	; (800475c <TIM_OC1_SetConfig+0xfc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d007      	beq.n	8004710 <TIM_OC1_SetConfig+0xb0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a17      	ldr	r2, [pc, #92]	; (8004760 <TIM_OC1_SetConfig+0x100>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_OC1_SetConfig+0xb0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a16      	ldr	r2, [pc, #88]	; (8004764 <TIM_OC1_SetConfig+0x104>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d111      	bne.n	8004734 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4a15      	ldr	r2, [pc, #84]	; (8004768 <TIM_OC1_SetConfig+0x108>)
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4a14      	ldr	r2, [pc, #80]	; (800476c <TIM_OC1_SetConfig+0x10c>)
 800471c:	4013      	ands	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	46bd      	mov	sp, r7
 8004752:	b006      	add	sp, #24
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400
 8004764:	40014800 	.word	0x40014800
 8004768:	fffffeff 	.word	0xfffffeff
 800476c:	fffffdff 	.word	0xfffffdff

08004770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	2210      	movs	r2, #16
 8004780:	4393      	bics	r3, r2
 8004782:	001a      	movs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a2e      	ldr	r2, [pc, #184]	; (8004858 <TIM_OC2_SetConfig+0xe8>)
 800479e:	4013      	ands	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4a2d      	ldr	r2, [pc, #180]	; (800485c <TIM_OC2_SetConfig+0xec>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2220      	movs	r2, #32
 80047ba:	4393      	bics	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a24      	ldr	r2, [pc, #144]	; (8004860 <TIM_OC2_SetConfig+0xf0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10d      	bne.n	80047ee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2280      	movs	r2, #128	; 0x80
 80047d6:	4393      	bics	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2240      	movs	r2, #64	; 0x40
 80047ea:	4393      	bics	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <TIM_OC2_SetConfig+0xf0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00b      	beq.n	800480e <TIM_OC2_SetConfig+0x9e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a1a      	ldr	r2, [pc, #104]	; (8004864 <TIM_OC2_SetConfig+0xf4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <TIM_OC2_SetConfig+0x9e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <TIM_OC2_SetConfig+0xf8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <TIM_OC2_SetConfig+0x9e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a18      	ldr	r2, [pc, #96]	; (800486c <TIM_OC2_SetConfig+0xfc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d113      	bne.n	8004836 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4a17      	ldr	r2, [pc, #92]	; (8004870 <TIM_OC2_SetConfig+0x100>)
 8004812:	4013      	ands	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4a16      	ldr	r2, [pc, #88]	; (8004874 <TIM_OC2_SetConfig+0x104>)
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	621a      	str	r2, [r3, #32]
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b006      	add	sp, #24
 8004856:	bd80      	pop	{r7, pc}
 8004858:	ffff8fff 	.word	0xffff8fff
 800485c:	fffffcff 	.word	0xfffffcff
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800
 8004870:	fffffbff 	.word	0xfffffbff
 8004874:	fffff7ff 	.word	0xfffff7ff

08004878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	4a35      	ldr	r2, [pc, #212]	; (800495c <TIM_OC3_SetConfig+0xe4>)
 8004888:	401a      	ands	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2270      	movs	r2, #112	; 0x70
 80048a4:	4393      	bics	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2203      	movs	r2, #3
 80048ac:	4393      	bics	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	4a28      	ldr	r2, [pc, #160]	; (8004960 <TIM_OC3_SetConfig+0xe8>)
 80048be:	4013      	ands	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a24      	ldr	r2, [pc, #144]	; (8004964 <TIM_OC3_SetConfig+0xec>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10d      	bne.n	80048f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	4a23      	ldr	r2, [pc, #140]	; (8004968 <TIM_OC3_SetConfig+0xf0>)
 80048da:	4013      	ands	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	4a1f      	ldr	r2, [pc, #124]	; (800496c <TIM_OC3_SetConfig+0xf4>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <TIM_OC3_SetConfig+0xec>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00b      	beq.n	8004912 <TIM_OC3_SetConfig+0x9a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <TIM_OC3_SetConfig+0xf8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <TIM_OC3_SetConfig+0x9a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1b      	ldr	r2, [pc, #108]	; (8004974 <TIM_OC3_SetConfig+0xfc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d003      	beq.n	8004912 <TIM_OC3_SetConfig+0x9a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <TIM_OC3_SetConfig+0x100>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d113      	bne.n	800493a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4a19      	ldr	r2, [pc, #100]	; (800497c <TIM_OC3_SetConfig+0x104>)
 8004916:	4013      	ands	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4a18      	ldr	r2, [pc, #96]	; (8004980 <TIM_OC3_SetConfig+0x108>)
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	b006      	add	sp, #24
 800495a:	bd80      	pop	{r7, pc}
 800495c:	fffffeff 	.word	0xfffffeff
 8004960:	fffffdff 	.word	0xfffffdff
 8004964:	40012c00 	.word	0x40012c00
 8004968:	fffff7ff 	.word	0xfffff7ff
 800496c:	fffffbff 	.word	0xfffffbff
 8004970:	40014000 	.word	0x40014000
 8004974:	40014400 	.word	0x40014400
 8004978:	40014800 	.word	0x40014800
 800497c:	ffffefff 	.word	0xffffefff
 8004980:	ffffdfff 	.word	0xffffdfff

08004984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	4a28      	ldr	r2, [pc, #160]	; (8004a34 <TIM_OC4_SetConfig+0xb0>)
 8004994:	401a      	ands	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <TIM_OC4_SetConfig+0xb4>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a21      	ldr	r2, [pc, #132]	; (8004a3c <TIM_OC4_SetConfig+0xb8>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	4a1d      	ldr	r2, [pc, #116]	; (8004a40 <TIM_OC4_SetConfig+0xbc>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	031b      	lsls	r3, r3, #12
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a19      	ldr	r2, [pc, #100]	; (8004a44 <TIM_OC4_SetConfig+0xc0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00b      	beq.n	80049fc <TIM_OC4_SetConfig+0x78>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <TIM_OC4_SetConfig+0xc4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d007      	beq.n	80049fc <TIM_OC4_SetConfig+0x78>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <TIM_OC4_SetConfig+0xc8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_OC4_SetConfig+0x78>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <TIM_OC4_SetConfig+0xcc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d109      	bne.n	8004a10 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <TIM_OC4_SetConfig+0xd0>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	019b      	lsls	r3, r3, #6
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b006      	add	sp, #24
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	ffffefff 	.word	0xffffefff
 8004a38:	ffff8fff 	.word	0xffff8fff
 8004a3c:	fffffcff 	.word	0xfffffcff
 8004a40:	ffffdfff 	.word	0xffffdfff
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400
 8004a50:	40014800 	.word	0x40014800
 8004a54:	ffffbfff 	.word	0xffffbfff

08004a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	221f      	movs	r2, #31
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	0013      	movs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	43d2      	mvns	r2, r2
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1a      	ldr	r2, [r3, #32]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	211f      	movs	r1, #31
 8004a88:	400b      	ands	r3, r1
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4099      	lsls	r1, r3
 8004a8e:	000b      	movs	r3, r1
 8004a90:	431a      	orrs	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b006      	add	sp, #24
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	223c      	movs	r2, #60	; 0x3c
 8004aae:	5c9b      	ldrb	r3, [r3, r2]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e041      	b.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	223c      	movs	r2, #60	; 0x3c
 8004abc:	2101      	movs	r1, #1
 8004abe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	223d      	movs	r2, #61	; 0x3d
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2270      	movs	r2, #112	; 0x70
 8004adc:	4393      	bics	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a13      	ldr	r2, [pc, #76]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d009      	beq.n	8004b10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d10c      	bne.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	4393      	bics	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	223d      	movs	r2, #61	; 0x3d
 8004b2e:	2101      	movs	r1, #1
 8004b30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	223c      	movs	r2, #60	; 0x3c
 8004b36:	2100      	movs	r1, #0
 8004b38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b004      	add	sp, #16
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40014000 	.word	0x40014000

08004b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b002      	add	sp, #8
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e044      	b.n	8004c0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2274      	movs	r2, #116	; 0x74
 8004b8e:	2100      	movs	r1, #0
 8004b90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7fd f9a7 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2224      	movs	r2, #36	; 0x24
 8004b9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2101      	movs	r1, #1
 8004bac:	438a      	bics	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 f8da 	bl	8004d6c <UART_SetConfig>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e024      	b.n	8004c0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 fa0d 	bl	8004fec <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	490d      	ldr	r1, [pc, #52]	; (8004c14 <HAL_UART_Init+0xa4>)
 8004bde:	400a      	ands	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2108      	movs	r1, #8
 8004bee:	438a      	bics	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 faa5 	bl	8005154 <UART_CheckIdleState>
 8004c0a:	0003      	movs	r3, r0
}
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b002      	add	sp, #8
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	fffff7ff 	.word	0xfffff7ff

08004c18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	1dbb      	adds	r3, r7, #6
 8004c26:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d000      	beq.n	8004c32 <HAL_UART_Transmit+0x1a>
 8004c30:	e096      	b.n	8004d60 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_UART_Transmit+0x28>
 8004c38:	1dbb      	adds	r3, r7, #6
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e08e      	b.n	8004d62 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	015b      	lsls	r3, r3, #5
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d109      	bne.n	8004c64 <HAL_UART_Transmit+0x4c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d105      	bne.n	8004c64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d001      	beq.n	8004c64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e07e      	b.n	8004d62 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2274      	movs	r2, #116	; 0x74
 8004c68:	5c9b      	ldrb	r3, [r3, r2]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_Transmit+0x5a>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e077      	b.n	8004d62 <HAL_UART_Transmit+0x14a>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2274      	movs	r2, #116	; 0x74
 8004c76:	2101      	movs	r1, #1
 8004c78:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2280      	movs	r2, #128	; 0x80
 8004c7e:	2100      	movs	r1, #0
 8004c80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2221      	movs	r2, #33	; 0x21
 8004c86:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c88:	f7fd fad0 	bl	800222c <HAL_GetTick>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1dba      	adds	r2, r7, #6
 8004c94:	2150      	movs	r1, #80	; 0x50
 8004c96:	8812      	ldrh	r2, [r2, #0]
 8004c98:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1dba      	adds	r2, r7, #6
 8004c9e:	2152      	movs	r1, #82	; 0x52
 8004ca0:	8812      	ldrh	r2, [r2, #0]
 8004ca2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	015b      	lsls	r3, r3, #5
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d108      	bne.n	8004cc2 <HAL_UART_Transmit+0xaa>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	e003      	b.n	8004cca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2274      	movs	r2, #116	; 0x74
 8004cce:	2100      	movs	r1, #0
 8004cd0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004cd2:	e02d      	b.n	8004d30 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	0013      	movs	r3, r2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2180      	movs	r1, #128	; 0x80
 8004ce2:	f000 fa7f 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	1e03      	subs	r3, r0, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e039      	b.n	8004d62 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	881a      	ldrh	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	05d2      	lsls	r2, r2, #23
 8004cfe:	0dd2      	lsrs	r2, r2, #23
 8004d00:	b292      	uxth	r2, r2
 8004d02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	3302      	adds	r3, #2
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	e008      	b.n	8004d1e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	b292      	uxth	r2, r2
 8004d16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2252      	movs	r2, #82	; 0x52
 8004d22:	5a9b      	ldrh	r3, [r3, r2]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b299      	uxth	r1, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2252      	movs	r2, #82	; 0x52
 8004d2e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2252      	movs	r2, #82	; 0x52
 8004d34:	5a9b      	ldrh	r3, [r3, r2]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1cb      	bne.n	8004cd4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	0013      	movs	r3, r2
 8004d46:	2200      	movs	r2, #0
 8004d48:	2140      	movs	r1, #64	; 0x40
 8004d4a:	f000 fa4b 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8004d4e:	1e03      	subs	r3, r0, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e005      	b.n	8004d62 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b008      	add	sp, #32
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d74:	231e      	movs	r3, #30
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a8d      	ldr	r2, [pc, #564]	; (8004fd0 <UART_SetConfig+0x264>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	0019      	movs	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a88      	ldr	r2, [pc, #544]	; (8004fd4 <UART_SetConfig+0x268>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4a7f      	ldr	r2, [pc, #508]	; (8004fd8 <UART_SetConfig+0x26c>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	0019      	movs	r1, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a7b      	ldr	r2, [pc, #492]	; (8004fdc <UART_SetConfig+0x270>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d127      	bne.n	8004e42 <UART_SetConfig+0xd6>
 8004df2:	4b7b      	ldr	r3, [pc, #492]	; (8004fe0 <UART_SetConfig+0x274>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	2203      	movs	r2, #3
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d00d      	beq.n	8004e1a <UART_SetConfig+0xae>
 8004dfe:	d81b      	bhi.n	8004e38 <UART_SetConfig+0xcc>
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d014      	beq.n	8004e2e <UART_SetConfig+0xc2>
 8004e04:	d818      	bhi.n	8004e38 <UART_SetConfig+0xcc>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <UART_SetConfig+0xa4>
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d00a      	beq.n	8004e24 <UART_SetConfig+0xb8>
 8004e0e:	e013      	b.n	8004e38 <UART_SetConfig+0xcc>
 8004e10:	231f      	movs	r3, #31
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	e021      	b.n	8004e5e <UART_SetConfig+0xf2>
 8004e1a:	231f      	movs	r3, #31
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	2202      	movs	r2, #2
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	e01c      	b.n	8004e5e <UART_SetConfig+0xf2>
 8004e24:	231f      	movs	r3, #31
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	2204      	movs	r2, #4
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e017      	b.n	8004e5e <UART_SetConfig+0xf2>
 8004e2e:	231f      	movs	r3, #31
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	2208      	movs	r2, #8
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e012      	b.n	8004e5e <UART_SetConfig+0xf2>
 8004e38:	231f      	movs	r3, #31
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	2210      	movs	r2, #16
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e00d      	b.n	8004e5e <UART_SetConfig+0xf2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a67      	ldr	r2, [pc, #412]	; (8004fe4 <UART_SetConfig+0x278>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d104      	bne.n	8004e56 <UART_SetConfig+0xea>
 8004e4c:	231f      	movs	r3, #31
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e003      	b.n	8004e5e <UART_SetConfig+0xf2>
 8004e56:	231f      	movs	r3, #31
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69da      	ldr	r2, [r3, #28]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d15d      	bne.n	8004f26 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004e6a:	231f      	movs	r3, #31
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d015      	beq.n	8004ea0 <UART_SetConfig+0x134>
 8004e74:	dc18      	bgt.n	8004ea8 <UART_SetConfig+0x13c>
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d00d      	beq.n	8004e96 <UART_SetConfig+0x12a>
 8004e7a:	dc15      	bgt.n	8004ea8 <UART_SetConfig+0x13c>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <UART_SetConfig+0x11a>
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d005      	beq.n	8004e90 <UART_SetConfig+0x124>
 8004e84:	e010      	b.n	8004ea8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e86:	f7fe f891 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	61bb      	str	r3, [r7, #24]
        break;
 8004e8e:	e012      	b.n	8004eb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e90:	4b55      	ldr	r3, [pc, #340]	; (8004fe8 <UART_SetConfig+0x27c>)
 8004e92:	61bb      	str	r3, [r7, #24]
        break;
 8004e94:	e00f      	b.n	8004eb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e96:	f7fe f81b 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	61bb      	str	r3, [r7, #24]
        break;
 8004e9e:	e00a      	b.n	8004eb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	61bb      	str	r3, [r7, #24]
        break;
 8004ea6:	e006      	b.n	8004eb6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eac:	231e      	movs	r3, #30
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
        break;
 8004eb4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d100      	bne.n	8004ebe <UART_SetConfig+0x152>
 8004ebc:	e07b      	b.n	8004fb6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	005a      	lsls	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	18d2      	adds	r2, r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	0019      	movs	r1, r3
 8004ed0:	0010      	movs	r0, r2
 8004ed2:	f7fb f92b 	bl	800012c <__udivsi3>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	d91c      	bls.n	8004f1c <UART_SetConfig+0x1b0>
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	025b      	lsls	r3, r3, #9
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d217      	bcs.n	8004f1c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	200e      	movs	r0, #14
 8004ef2:	183b      	adds	r3, r7, r0
 8004ef4:	210f      	movs	r1, #15
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2207      	movs	r2, #7
 8004f02:	4013      	ands	r3, r2
 8004f04:	b299      	uxth	r1, r3
 8004f06:	183b      	adds	r3, r7, r0
 8004f08:	183a      	adds	r2, r7, r0
 8004f0a:	8812      	ldrh	r2, [r2, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	183a      	adds	r2, r7, r0
 8004f16:	8812      	ldrh	r2, [r2, #0]
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	e04c      	b.n	8004fb6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1c:	231e      	movs	r3, #30
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	2201      	movs	r2, #1
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e047      	b.n	8004fb6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f26:	231f      	movs	r3, #31
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d015      	beq.n	8004f5c <UART_SetConfig+0x1f0>
 8004f30:	dc18      	bgt.n	8004f64 <UART_SetConfig+0x1f8>
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d00d      	beq.n	8004f52 <UART_SetConfig+0x1e6>
 8004f36:	dc15      	bgt.n	8004f64 <UART_SetConfig+0x1f8>
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <UART_SetConfig+0x1d6>
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d005      	beq.n	8004f4c <UART_SetConfig+0x1e0>
 8004f40:	e010      	b.n	8004f64 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f42:	f7fe f833 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8004f46:	0003      	movs	r3, r0
 8004f48:	61bb      	str	r3, [r7, #24]
        break;
 8004f4a:	e012      	b.n	8004f72 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4c:	4b26      	ldr	r3, [pc, #152]	; (8004fe8 <UART_SetConfig+0x27c>)
 8004f4e:	61bb      	str	r3, [r7, #24]
        break;
 8004f50:	e00f      	b.n	8004f72 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f52:	f7fd ffbd 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8004f56:	0003      	movs	r3, r0
 8004f58:	61bb      	str	r3, [r7, #24]
        break;
 8004f5a:	e00a      	b.n	8004f72 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	61bb      	str	r3, [r7, #24]
        break;
 8004f62:	e006      	b.n	8004f72 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f68:	231e      	movs	r3, #30
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	701a      	strb	r2, [r3, #0]
        break;
 8004f70:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01e      	beq.n	8004fb6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	085a      	lsrs	r2, r3, #1
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	18d2      	adds	r2, r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	0019      	movs	r1, r3
 8004f88:	0010      	movs	r0, r2
 8004f8a:	f7fb f8cf 	bl	800012c <__udivsi3>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	d909      	bls.n	8004fae <UART_SetConfig+0x242>
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	025b      	lsls	r3, r3, #9
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d204      	bcs.n	8004fae <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	60da      	str	r2, [r3, #12]
 8004fac:	e003      	b.n	8004fb6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004fae:	231e      	movs	r3, #30
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fc2:	231e      	movs	r3, #30
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	781b      	ldrb	r3, [r3, #0]
}
 8004fc8:	0018      	movs	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b008      	add	sp, #32
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	ffff69f3 	.word	0xffff69f3
 8004fd4:	ffffcfff 	.word	0xffffcfff
 8004fd8:	fffff4ff 	.word	0xfffff4ff
 8004fdc:	40013800 	.word	0x40013800
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40004400 	.word	0x40004400
 8004fe8:	007a1200 	.word	0x007a1200

08004fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d00b      	beq.n	8005016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4a4a      	ldr	r2, [pc, #296]	; (8005130 <UART_AdvFeatureConfig+0x144>)
 8005006:	4013      	ands	r3, r2
 8005008:	0019      	movs	r1, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2202      	movs	r2, #2
 800501c:	4013      	ands	r3, r2
 800501e:	d00b      	beq.n	8005038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4a43      	ldr	r2, [pc, #268]	; (8005134 <UART_AdvFeatureConfig+0x148>)
 8005028:	4013      	ands	r3, r2
 800502a:	0019      	movs	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	2204      	movs	r2, #4
 800503e:	4013      	ands	r3, r2
 8005040:	d00b      	beq.n	800505a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4a3b      	ldr	r2, [pc, #236]	; (8005138 <UART_AdvFeatureConfig+0x14c>)
 800504a:	4013      	ands	r3, r2
 800504c:	0019      	movs	r1, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2208      	movs	r2, #8
 8005060:	4013      	ands	r3, r2
 8005062:	d00b      	beq.n	800507c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	4a34      	ldr	r2, [pc, #208]	; (800513c <UART_AdvFeatureConfig+0x150>)
 800506c:	4013      	ands	r3, r2
 800506e:	0019      	movs	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	2210      	movs	r2, #16
 8005082:	4013      	ands	r3, r2
 8005084:	d00b      	beq.n	800509e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <UART_AdvFeatureConfig+0x154>)
 800508e:	4013      	ands	r3, r2
 8005090:	0019      	movs	r1, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	2220      	movs	r2, #32
 80050a4:	4013      	ands	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	4a25      	ldr	r2, [pc, #148]	; (8005144 <UART_AdvFeatureConfig+0x158>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	0019      	movs	r1, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	2240      	movs	r2, #64	; 0x40
 80050c6:	4013      	ands	r3, r2
 80050c8:	d01d      	beq.n	8005106 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <UART_AdvFeatureConfig+0x15c>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	0019      	movs	r1, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	035b      	lsls	r3, r3, #13
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d10b      	bne.n	8005106 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4a15      	ldr	r2, [pc, #84]	; (800514c <UART_AdvFeatureConfig+0x160>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	4013      	ands	r3, r2
 800510e:	d00b      	beq.n	8005128 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	4a0e      	ldr	r2, [pc, #56]	; (8005150 <UART_AdvFeatureConfig+0x164>)
 8005118:	4013      	ands	r3, r2
 800511a:	0019      	movs	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	605a      	str	r2, [r3, #4]
  }
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b002      	add	sp, #8
 800512e:	bd80      	pop	{r7, pc}
 8005130:	fffdffff 	.word	0xfffdffff
 8005134:	fffeffff 	.word	0xfffeffff
 8005138:	fffbffff 	.word	0xfffbffff
 800513c:	ffff7fff 	.word	0xffff7fff
 8005140:	ffffefff 	.word	0xffffefff
 8005144:	ffffdfff 	.word	0xffffdfff
 8005148:	ffefffff 	.word	0xffefffff
 800514c:	ff9fffff 	.word	0xff9fffff
 8005150:	fff7ffff 	.word	0xfff7ffff

08005154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af02      	add	r7, sp, #8
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2280      	movs	r2, #128	; 0x80
 8005160:	2100      	movs	r1, #0
 8005162:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005164:	f7fd f862 	bl	800222c <HAL_GetTick>
 8005168:	0003      	movs	r3, r0
 800516a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2208      	movs	r2, #8
 8005174:	4013      	ands	r3, r2
 8005176:	2b08      	cmp	r3, #8
 8005178:	d10c      	bne.n	8005194 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	0391      	lsls	r1, r2, #14
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <UART_CheckIdleState+0x8c>)
 8005184:	9200      	str	r2, [sp, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	f000 f82c 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 800518c:	1e03      	subs	r3, r0, #0
 800518e:	d001      	beq.n	8005194 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e021      	b.n	80051d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2204      	movs	r2, #4
 800519c:	4013      	ands	r3, r2
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d10c      	bne.n	80051bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2280      	movs	r2, #128	; 0x80
 80051a6:	03d1      	lsls	r1, r2, #15
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	4a0d      	ldr	r2, [pc, #52]	; (80051e0 <UART_CheckIdleState+0x8c>)
 80051ac:	9200      	str	r2, [sp, #0]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f000 f818 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 80051b4:	1e03      	subs	r3, r0, #0
 80051b6:	d001      	beq.n	80051bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e00d      	b.n	80051d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2274      	movs	r2, #116	; 0x74
 80051d2:	2100      	movs	r1, #0
 80051d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	0018      	movs	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	b004      	add	sp, #16
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	01ffffff 	.word	0x01ffffff

080051e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b094      	sub	sp, #80	; 0x50
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	1dfb      	adds	r3, r7, #7
 80051f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f4:	e0a3      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051f8:	3301      	adds	r3, #1
 80051fa:	d100      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80051fc:	e09f      	b.n	800533e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fd f815 	bl	800222c <HAL_GetTick>
 8005202:	0002      	movs	r2, r0
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <UART_WaitOnFlagUntilTimeout+0x30>
 800520e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005210:	2b00      	cmp	r3, #0
 8005212:	d13d      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005214:	f3ef 8310 	mrs	r3, PRIMASK
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800521c:	647b      	str	r3, [r7, #68]	; 0x44
 800521e:	2301      	movs	r3, #1
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	f383 8810 	msr	PRIMASK, r3
}
 8005228:	46c0      	nop			; (mov r8, r8)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	494c      	ldr	r1, [pc, #304]	; (8005368 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005236:	400a      	ands	r2, r1
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800523c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	f383 8810 	msr	PRIMASK, r3
}
 8005244:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005246:	f3ef 8310 	mrs	r3, PRIMASK
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524e:	643b      	str	r3, [r7, #64]	; 0x40
 8005250:	2301      	movs	r3, #1
 8005252:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	f383 8810 	msr	PRIMASK, r3
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2101      	movs	r1, #1
 8005268:	438a      	bics	r2, r1
 800526a:	609a      	str	r2, [r3, #8]
 800526c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005272:	f383 8810 	msr	PRIMASK, r3
}
 8005276:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2274      	movs	r2, #116	; 0x74
 8005288:	2100      	movs	r1, #0
 800528a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e067      	b.n	8005360 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2204      	movs	r2, #4
 8005298:	4013      	ands	r3, r2
 800529a:	d050      	beq.n	800533e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69da      	ldr	r2, [r3, #28]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	401a      	ands	r2, r3
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d146      	bne.n	800533e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2280      	movs	r2, #128	; 0x80
 80052b6:	0112      	lsls	r2, r2, #4
 80052b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ba:	f3ef 8310 	mrs	r3, PRIMASK
 80052be:	613b      	str	r3, [r7, #16]
  return(result);
 80052c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c4:	2301      	movs	r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f383 8810 	msr	PRIMASK, r3
}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4923      	ldr	r1, [pc, #140]	; (8005368 <UART_WaitOnFlagUntilTimeout+0x184>)
 80052dc:	400a      	ands	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f383 8810 	msr	PRIMASK, r3
}
 80052ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ec:	f3ef 8310 	mrs	r3, PRIMASK
 80052f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80052f2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f6:	2301      	movs	r3, #1
 80052f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f383 8810 	msr	PRIMASK, r3
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	438a      	bics	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2280      	movs	r2, #128	; 0x80
 800532e:	2120      	movs	r1, #32
 8005330:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2274      	movs	r2, #116	; 0x74
 8005336:	2100      	movs	r1, #0
 8005338:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e010      	b.n	8005360 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	4013      	ands	r3, r2
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	425a      	negs	r2, r3
 800534e:	4153      	adcs	r3, r2
 8005350:	b2db      	uxtb	r3, r3
 8005352:	001a      	movs	r2, r3
 8005354:	1dfb      	adds	r3, r7, #7
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d100      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0x17a>
 800535c:	e74b      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	0018      	movs	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	b014      	add	sp, #80	; 0x50
 8005366:	bd80      	pop	{r7, pc}
 8005368:	fffffe5f 	.word	0xfffffe5f

0800536c <__errno>:
 800536c:	4b01      	ldr	r3, [pc, #4]	; (8005374 <__errno+0x8>)
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	4770      	bx	lr
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	20000010 	.word	0x20000010

08005378 <__libc_init_array>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	2600      	movs	r6, #0
 800537c:	4d0c      	ldr	r5, [pc, #48]	; (80053b0 <__libc_init_array+0x38>)
 800537e:	4c0d      	ldr	r4, [pc, #52]	; (80053b4 <__libc_init_array+0x3c>)
 8005380:	1b64      	subs	r4, r4, r5
 8005382:	10a4      	asrs	r4, r4, #2
 8005384:	42a6      	cmp	r6, r4
 8005386:	d109      	bne.n	800539c <__libc_init_array+0x24>
 8005388:	2600      	movs	r6, #0
 800538a:	f001 f98b 	bl	80066a4 <_init>
 800538e:	4d0a      	ldr	r5, [pc, #40]	; (80053b8 <__libc_init_array+0x40>)
 8005390:	4c0a      	ldr	r4, [pc, #40]	; (80053bc <__libc_init_array+0x44>)
 8005392:	1b64      	subs	r4, r4, r5
 8005394:	10a4      	asrs	r4, r4, #2
 8005396:	42a6      	cmp	r6, r4
 8005398:	d105      	bne.n	80053a6 <__libc_init_array+0x2e>
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	00b3      	lsls	r3, r6, #2
 800539e:	58eb      	ldr	r3, [r5, r3]
 80053a0:	4798      	blx	r3
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7ee      	b.n	8005384 <__libc_init_array+0xc>
 80053a6:	00b3      	lsls	r3, r6, #2
 80053a8:	58eb      	ldr	r3, [r5, r3]
 80053aa:	4798      	blx	r3
 80053ac:	3601      	adds	r6, #1
 80053ae:	e7f2      	b.n	8005396 <__libc_init_array+0x1e>
 80053b0:	08006d10 	.word	0x08006d10
 80053b4:	08006d10 	.word	0x08006d10
 80053b8:	08006d10 	.word	0x08006d10
 80053bc:	08006d14 	.word	0x08006d14

080053c0 <memcpy>:
 80053c0:	2300      	movs	r3, #0
 80053c2:	b510      	push	{r4, lr}
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d100      	bne.n	80053ca <memcpy+0xa>
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	5ccc      	ldrb	r4, [r1, r3]
 80053cc:	54c4      	strb	r4, [r0, r3]
 80053ce:	3301      	adds	r3, #1
 80053d0:	e7f8      	b.n	80053c4 <memcpy+0x4>

080053d2 <memset>:
 80053d2:	0003      	movs	r3, r0
 80053d4:	1882      	adds	r2, r0, r2
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d100      	bne.n	80053dc <memset+0xa>
 80053da:	4770      	bx	lr
 80053dc:	7019      	strb	r1, [r3, #0]
 80053de:	3301      	adds	r3, #1
 80053e0:	e7f9      	b.n	80053d6 <memset+0x4>
	...

080053e4 <iprintf>:
 80053e4:	b40f      	push	{r0, r1, r2, r3}
 80053e6:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <iprintf+0x30>)
 80053e8:	b513      	push	{r0, r1, r4, lr}
 80053ea:	681c      	ldr	r4, [r3, #0]
 80053ec:	2c00      	cmp	r4, #0
 80053ee:	d005      	beq.n	80053fc <iprintf+0x18>
 80053f0:	69a3      	ldr	r3, [r4, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d102      	bne.n	80053fc <iprintf+0x18>
 80053f6:	0020      	movs	r0, r4
 80053f8:	f000 f890 	bl	800551c <__sinit>
 80053fc:	ab05      	add	r3, sp, #20
 80053fe:	0020      	movs	r0, r4
 8005400:	9a04      	ldr	r2, [sp, #16]
 8005402:	68a1      	ldr	r1, [r4, #8]
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	f000 fb15 	bl	8005a34 <_vfiprintf_r>
 800540a:	bc16      	pop	{r1, r2, r4}
 800540c:	bc08      	pop	{r3}
 800540e:	b004      	add	sp, #16
 8005410:	4718      	bx	r3
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	20000010 	.word	0x20000010

08005418 <siprintf>:
 8005418:	b40e      	push	{r1, r2, r3}
 800541a:	b500      	push	{lr}
 800541c:	490b      	ldr	r1, [pc, #44]	; (800544c <siprintf+0x34>)
 800541e:	b09c      	sub	sp, #112	; 0x70
 8005420:	ab1d      	add	r3, sp, #116	; 0x74
 8005422:	9002      	str	r0, [sp, #8]
 8005424:	9006      	str	r0, [sp, #24]
 8005426:	9107      	str	r1, [sp, #28]
 8005428:	9104      	str	r1, [sp, #16]
 800542a:	4809      	ldr	r0, [pc, #36]	; (8005450 <siprintf+0x38>)
 800542c:	4909      	ldr	r1, [pc, #36]	; (8005454 <siprintf+0x3c>)
 800542e:	cb04      	ldmia	r3!, {r2}
 8005430:	9105      	str	r1, [sp, #20]
 8005432:	6800      	ldr	r0, [r0, #0]
 8005434:	a902      	add	r1, sp, #8
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	f000 f9d4 	bl	80057e4 <_svfiprintf_r>
 800543c:	2300      	movs	r3, #0
 800543e:	9a02      	ldr	r2, [sp, #8]
 8005440:	7013      	strb	r3, [r2, #0]
 8005442:	b01c      	add	sp, #112	; 0x70
 8005444:	bc08      	pop	{r3}
 8005446:	b003      	add	sp, #12
 8005448:	4718      	bx	r3
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	7fffffff 	.word	0x7fffffff
 8005450:	20000010 	.word	0x20000010
 8005454:	ffff0208 	.word	0xffff0208

08005458 <std>:
 8005458:	2300      	movs	r3, #0
 800545a:	b510      	push	{r4, lr}
 800545c:	0004      	movs	r4, r0
 800545e:	6003      	str	r3, [r0, #0]
 8005460:	6043      	str	r3, [r0, #4]
 8005462:	6083      	str	r3, [r0, #8]
 8005464:	8181      	strh	r1, [r0, #12]
 8005466:	6643      	str	r3, [r0, #100]	; 0x64
 8005468:	0019      	movs	r1, r3
 800546a:	81c2      	strh	r2, [r0, #14]
 800546c:	6103      	str	r3, [r0, #16]
 800546e:	6143      	str	r3, [r0, #20]
 8005470:	6183      	str	r3, [r0, #24]
 8005472:	2208      	movs	r2, #8
 8005474:	305c      	adds	r0, #92	; 0x5c
 8005476:	f7ff ffac 	bl	80053d2 <memset>
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <std+0x38>)
 800547c:	6263      	str	r3, [r4, #36]	; 0x24
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <std+0x3c>)
 8005480:	6224      	str	r4, [r4, #32]
 8005482:	62a3      	str	r3, [r4, #40]	; 0x28
 8005484:	4b04      	ldr	r3, [pc, #16]	; (8005498 <std+0x40>)
 8005486:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005488:	4b04      	ldr	r3, [pc, #16]	; (800549c <std+0x44>)
 800548a:	6323      	str	r3, [r4, #48]	; 0x30
 800548c:	bd10      	pop	{r4, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	08005fd1 	.word	0x08005fd1
 8005494:	08005ff9 	.word	0x08005ff9
 8005498:	08006031 	.word	0x08006031
 800549c:	0800605d 	.word	0x0800605d

080054a0 <_cleanup_r>:
 80054a0:	b510      	push	{r4, lr}
 80054a2:	4902      	ldr	r1, [pc, #8]	; (80054ac <_cleanup_r+0xc>)
 80054a4:	f000 f8ba 	bl	800561c <_fwalk_reent>
 80054a8:	bd10      	pop	{r4, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	08006369 	.word	0x08006369

080054b0 <__sfmoreglue>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	2568      	movs	r5, #104	; 0x68
 80054b4:	1e4a      	subs	r2, r1, #1
 80054b6:	4355      	muls	r5, r2
 80054b8:	000e      	movs	r6, r1
 80054ba:	0029      	movs	r1, r5
 80054bc:	3174      	adds	r1, #116	; 0x74
 80054be:	f000 f8d1 	bl	8005664 <_malloc_r>
 80054c2:	1e04      	subs	r4, r0, #0
 80054c4:	d008      	beq.n	80054d8 <__sfmoreglue+0x28>
 80054c6:	2100      	movs	r1, #0
 80054c8:	002a      	movs	r2, r5
 80054ca:	6001      	str	r1, [r0, #0]
 80054cc:	6046      	str	r6, [r0, #4]
 80054ce:	300c      	adds	r0, #12
 80054d0:	60a0      	str	r0, [r4, #8]
 80054d2:	3268      	adds	r2, #104	; 0x68
 80054d4:	f7ff ff7d 	bl	80053d2 <memset>
 80054d8:	0020      	movs	r0, r4
 80054da:	bd70      	pop	{r4, r5, r6, pc}

080054dc <__sfp_lock_acquire>:
 80054dc:	b510      	push	{r4, lr}
 80054de:	4802      	ldr	r0, [pc, #8]	; (80054e8 <__sfp_lock_acquire+0xc>)
 80054e0:	f000 f8bd 	bl	800565e <__retarget_lock_acquire_recursive>
 80054e4:	bd10      	pop	{r4, pc}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	200003cc 	.word	0x200003cc

080054ec <__sfp_lock_release>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	4802      	ldr	r0, [pc, #8]	; (80054f8 <__sfp_lock_release+0xc>)
 80054f0:	f000 f8b6 	bl	8005660 <__retarget_lock_release_recursive>
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	200003cc 	.word	0x200003cc

080054fc <__sinit_lock_acquire>:
 80054fc:	b510      	push	{r4, lr}
 80054fe:	4802      	ldr	r0, [pc, #8]	; (8005508 <__sinit_lock_acquire+0xc>)
 8005500:	f000 f8ad 	bl	800565e <__retarget_lock_acquire_recursive>
 8005504:	bd10      	pop	{r4, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	200003c7 	.word	0x200003c7

0800550c <__sinit_lock_release>:
 800550c:	b510      	push	{r4, lr}
 800550e:	4802      	ldr	r0, [pc, #8]	; (8005518 <__sinit_lock_release+0xc>)
 8005510:	f000 f8a6 	bl	8005660 <__retarget_lock_release_recursive>
 8005514:	bd10      	pop	{r4, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	200003c7 	.word	0x200003c7

0800551c <__sinit>:
 800551c:	b513      	push	{r0, r1, r4, lr}
 800551e:	0004      	movs	r4, r0
 8005520:	f7ff ffec 	bl	80054fc <__sinit_lock_acquire>
 8005524:	69a3      	ldr	r3, [r4, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <__sinit+0x14>
 800552a:	f7ff ffef 	bl	800550c <__sinit_lock_release>
 800552e:	bd13      	pop	{r0, r1, r4, pc}
 8005530:	64a3      	str	r3, [r4, #72]	; 0x48
 8005532:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005534:	6523      	str	r3, [r4, #80]	; 0x50
 8005536:	4b13      	ldr	r3, [pc, #76]	; (8005584 <__sinit+0x68>)
 8005538:	4a13      	ldr	r2, [pc, #76]	; (8005588 <__sinit+0x6c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	62a2      	str	r2, [r4, #40]	; 0x28
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	42a3      	cmp	r3, r4
 8005542:	d101      	bne.n	8005548 <__sinit+0x2c>
 8005544:	2301      	movs	r3, #1
 8005546:	61a3      	str	r3, [r4, #24]
 8005548:	0020      	movs	r0, r4
 800554a:	f000 f81f 	bl	800558c <__sfp>
 800554e:	6060      	str	r0, [r4, #4]
 8005550:	0020      	movs	r0, r4
 8005552:	f000 f81b 	bl	800558c <__sfp>
 8005556:	60a0      	str	r0, [r4, #8]
 8005558:	0020      	movs	r0, r4
 800555a:	f000 f817 	bl	800558c <__sfp>
 800555e:	2200      	movs	r2, #0
 8005560:	2104      	movs	r1, #4
 8005562:	60e0      	str	r0, [r4, #12]
 8005564:	6860      	ldr	r0, [r4, #4]
 8005566:	f7ff ff77 	bl	8005458 <std>
 800556a:	2201      	movs	r2, #1
 800556c:	2109      	movs	r1, #9
 800556e:	68a0      	ldr	r0, [r4, #8]
 8005570:	f7ff ff72 	bl	8005458 <std>
 8005574:	2202      	movs	r2, #2
 8005576:	2112      	movs	r1, #18
 8005578:	68e0      	ldr	r0, [r4, #12]
 800557a:	f7ff ff6d 	bl	8005458 <std>
 800557e:	2301      	movs	r3, #1
 8005580:	61a3      	str	r3, [r4, #24]
 8005582:	e7d2      	b.n	800552a <__sinit+0xe>
 8005584:	08006c78 	.word	0x08006c78
 8005588:	080054a1 	.word	0x080054a1

0800558c <__sfp>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	0007      	movs	r7, r0
 8005590:	f7ff ffa4 	bl	80054dc <__sfp_lock_acquire>
 8005594:	4b1f      	ldr	r3, [pc, #124]	; (8005614 <__sfp+0x88>)
 8005596:	681e      	ldr	r6, [r3, #0]
 8005598:	69b3      	ldr	r3, [r6, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <__sfp+0x18>
 800559e:	0030      	movs	r0, r6
 80055a0:	f7ff ffbc 	bl	800551c <__sinit>
 80055a4:	3648      	adds	r6, #72	; 0x48
 80055a6:	68b4      	ldr	r4, [r6, #8]
 80055a8:	6873      	ldr	r3, [r6, #4]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	d504      	bpl.n	80055b8 <__sfp+0x2c>
 80055ae:	6833      	ldr	r3, [r6, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d022      	beq.n	80055fa <__sfp+0x6e>
 80055b4:	6836      	ldr	r6, [r6, #0]
 80055b6:	e7f6      	b.n	80055a6 <__sfp+0x1a>
 80055b8:	220c      	movs	r2, #12
 80055ba:	5ea5      	ldrsh	r5, [r4, r2]
 80055bc:	2d00      	cmp	r5, #0
 80055be:	d11a      	bne.n	80055f6 <__sfp+0x6a>
 80055c0:	0020      	movs	r0, r4
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <__sfp+0x8c>)
 80055c4:	3058      	adds	r0, #88	; 0x58
 80055c6:	60e3      	str	r3, [r4, #12]
 80055c8:	6665      	str	r5, [r4, #100]	; 0x64
 80055ca:	f000 f847 	bl	800565c <__retarget_lock_init_recursive>
 80055ce:	f7ff ff8d 	bl	80054ec <__sfp_lock_release>
 80055d2:	0020      	movs	r0, r4
 80055d4:	2208      	movs	r2, #8
 80055d6:	0029      	movs	r1, r5
 80055d8:	6025      	str	r5, [r4, #0]
 80055da:	60a5      	str	r5, [r4, #8]
 80055dc:	6065      	str	r5, [r4, #4]
 80055de:	6125      	str	r5, [r4, #16]
 80055e0:	6165      	str	r5, [r4, #20]
 80055e2:	61a5      	str	r5, [r4, #24]
 80055e4:	305c      	adds	r0, #92	; 0x5c
 80055e6:	f7ff fef4 	bl	80053d2 <memset>
 80055ea:	6365      	str	r5, [r4, #52]	; 0x34
 80055ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80055ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80055f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80055f2:	0020      	movs	r0, r4
 80055f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f6:	3468      	adds	r4, #104	; 0x68
 80055f8:	e7d7      	b.n	80055aa <__sfp+0x1e>
 80055fa:	2104      	movs	r1, #4
 80055fc:	0038      	movs	r0, r7
 80055fe:	f7ff ff57 	bl	80054b0 <__sfmoreglue>
 8005602:	1e04      	subs	r4, r0, #0
 8005604:	6030      	str	r0, [r6, #0]
 8005606:	d1d5      	bne.n	80055b4 <__sfp+0x28>
 8005608:	f7ff ff70 	bl	80054ec <__sfp_lock_release>
 800560c:	230c      	movs	r3, #12
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	e7ef      	b.n	80055f2 <__sfp+0x66>
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	08006c78 	.word	0x08006c78
 8005618:	ffff0001 	.word	0xffff0001

0800561c <_fwalk_reent>:
 800561c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800561e:	0004      	movs	r4, r0
 8005620:	0006      	movs	r6, r0
 8005622:	2700      	movs	r7, #0
 8005624:	9101      	str	r1, [sp, #4]
 8005626:	3448      	adds	r4, #72	; 0x48
 8005628:	6863      	ldr	r3, [r4, #4]
 800562a:	68a5      	ldr	r5, [r4, #8]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	9b00      	ldr	r3, [sp, #0]
 8005630:	3b01      	subs	r3, #1
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	d504      	bpl.n	8005640 <_fwalk_reent+0x24>
 8005636:	6824      	ldr	r4, [r4, #0]
 8005638:	2c00      	cmp	r4, #0
 800563a:	d1f5      	bne.n	8005628 <_fwalk_reent+0xc>
 800563c:	0038      	movs	r0, r7
 800563e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005640:	89ab      	ldrh	r3, [r5, #12]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d908      	bls.n	8005658 <_fwalk_reent+0x3c>
 8005646:	220e      	movs	r2, #14
 8005648:	5eab      	ldrsh	r3, [r5, r2]
 800564a:	3301      	adds	r3, #1
 800564c:	d004      	beq.n	8005658 <_fwalk_reent+0x3c>
 800564e:	0029      	movs	r1, r5
 8005650:	0030      	movs	r0, r6
 8005652:	9b01      	ldr	r3, [sp, #4]
 8005654:	4798      	blx	r3
 8005656:	4307      	orrs	r7, r0
 8005658:	3568      	adds	r5, #104	; 0x68
 800565a:	e7e8      	b.n	800562e <_fwalk_reent+0x12>

0800565c <__retarget_lock_init_recursive>:
 800565c:	4770      	bx	lr

0800565e <__retarget_lock_acquire_recursive>:
 800565e:	4770      	bx	lr

08005660 <__retarget_lock_release_recursive>:
 8005660:	4770      	bx	lr
	...

08005664 <_malloc_r>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	2303      	movs	r3, #3
 8005668:	1ccd      	adds	r5, r1, #3
 800566a:	439d      	bics	r5, r3
 800566c:	3508      	adds	r5, #8
 800566e:	0006      	movs	r6, r0
 8005670:	2d0c      	cmp	r5, #12
 8005672:	d21f      	bcs.n	80056b4 <_malloc_r+0x50>
 8005674:	250c      	movs	r5, #12
 8005676:	42a9      	cmp	r1, r5
 8005678:	d81e      	bhi.n	80056b8 <_malloc_r+0x54>
 800567a:	0030      	movs	r0, r6
 800567c:	f000 ff52 	bl	8006524 <__malloc_lock>
 8005680:	4925      	ldr	r1, [pc, #148]	; (8005718 <_malloc_r+0xb4>)
 8005682:	680a      	ldr	r2, [r1, #0]
 8005684:	0014      	movs	r4, r2
 8005686:	2c00      	cmp	r4, #0
 8005688:	d11a      	bne.n	80056c0 <_malloc_r+0x5c>
 800568a:	4f24      	ldr	r7, [pc, #144]	; (800571c <_malloc_r+0xb8>)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <_malloc_r+0x38>
 8005692:	0021      	movs	r1, r4
 8005694:	0030      	movs	r0, r6
 8005696:	f000 fc89 	bl	8005fac <_sbrk_r>
 800569a:	6038      	str	r0, [r7, #0]
 800569c:	0029      	movs	r1, r5
 800569e:	0030      	movs	r0, r6
 80056a0:	f000 fc84 	bl	8005fac <_sbrk_r>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d12b      	bne.n	8005700 <_malloc_r+0x9c>
 80056a8:	230c      	movs	r3, #12
 80056aa:	0030      	movs	r0, r6
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	f000 ff41 	bl	8006534 <__malloc_unlock>
 80056b2:	e003      	b.n	80056bc <_malloc_r+0x58>
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	dade      	bge.n	8005676 <_malloc_r+0x12>
 80056b8:	230c      	movs	r3, #12
 80056ba:	6033      	str	r3, [r6, #0]
 80056bc:	2000      	movs	r0, #0
 80056be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	1b5b      	subs	r3, r3, r5
 80056c4:	d419      	bmi.n	80056fa <_malloc_r+0x96>
 80056c6:	2b0b      	cmp	r3, #11
 80056c8:	d903      	bls.n	80056d2 <_malloc_r+0x6e>
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	18e4      	adds	r4, r4, r3
 80056ce:	6025      	str	r5, [r4, #0]
 80056d0:	e003      	b.n	80056da <_malloc_r+0x76>
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	42a2      	cmp	r2, r4
 80056d6:	d10e      	bne.n	80056f6 <_malloc_r+0x92>
 80056d8:	600b      	str	r3, [r1, #0]
 80056da:	0030      	movs	r0, r6
 80056dc:	f000 ff2a 	bl	8006534 <__malloc_unlock>
 80056e0:	0020      	movs	r0, r4
 80056e2:	2207      	movs	r2, #7
 80056e4:	300b      	adds	r0, #11
 80056e6:	1d23      	adds	r3, r4, #4
 80056e8:	4390      	bics	r0, r2
 80056ea:	1ac2      	subs	r2, r0, r3
 80056ec:	4298      	cmp	r0, r3
 80056ee:	d0e6      	beq.n	80056be <_malloc_r+0x5a>
 80056f0:	1a1b      	subs	r3, r3, r0
 80056f2:	50a3      	str	r3, [r4, r2]
 80056f4:	e7e3      	b.n	80056be <_malloc_r+0x5a>
 80056f6:	6053      	str	r3, [r2, #4]
 80056f8:	e7ef      	b.n	80056da <_malloc_r+0x76>
 80056fa:	0022      	movs	r2, r4
 80056fc:	6864      	ldr	r4, [r4, #4]
 80056fe:	e7c2      	b.n	8005686 <_malloc_r+0x22>
 8005700:	2303      	movs	r3, #3
 8005702:	1cc4      	adds	r4, r0, #3
 8005704:	439c      	bics	r4, r3
 8005706:	42a0      	cmp	r0, r4
 8005708:	d0e1      	beq.n	80056ce <_malloc_r+0x6a>
 800570a:	1a21      	subs	r1, r4, r0
 800570c:	0030      	movs	r0, r6
 800570e:	f000 fc4d 	bl	8005fac <_sbrk_r>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	d1db      	bne.n	80056ce <_malloc_r+0x6a>
 8005716:	e7c7      	b.n	80056a8 <_malloc_r+0x44>
 8005718:	2000023c 	.word	0x2000023c
 800571c:	20000240 	.word	0x20000240

08005720 <__ssputs_r>:
 8005720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005722:	688e      	ldr	r6, [r1, #8]
 8005724:	b085      	sub	sp, #20
 8005726:	0007      	movs	r7, r0
 8005728:	000c      	movs	r4, r1
 800572a:	9203      	str	r2, [sp, #12]
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	429e      	cmp	r6, r3
 8005730:	d83c      	bhi.n	80057ac <__ssputs_r+0x8c>
 8005732:	2390      	movs	r3, #144	; 0x90
 8005734:	898a      	ldrh	r2, [r1, #12]
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	421a      	tst	r2, r3
 800573a:	d034      	beq.n	80057a6 <__ssputs_r+0x86>
 800573c:	2503      	movs	r5, #3
 800573e:	6909      	ldr	r1, [r1, #16]
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	1a5b      	subs	r3, r3, r1
 8005744:	9302      	str	r3, [sp, #8]
 8005746:	6963      	ldr	r3, [r4, #20]
 8005748:	9802      	ldr	r0, [sp, #8]
 800574a:	435d      	muls	r5, r3
 800574c:	0feb      	lsrs	r3, r5, #31
 800574e:	195d      	adds	r5, r3, r5
 8005750:	9b01      	ldr	r3, [sp, #4]
 8005752:	106d      	asrs	r5, r5, #1
 8005754:	3301      	adds	r3, #1
 8005756:	181b      	adds	r3, r3, r0
 8005758:	42ab      	cmp	r3, r5
 800575a:	d900      	bls.n	800575e <__ssputs_r+0x3e>
 800575c:	001d      	movs	r5, r3
 800575e:	0553      	lsls	r3, r2, #21
 8005760:	d532      	bpl.n	80057c8 <__ssputs_r+0xa8>
 8005762:	0029      	movs	r1, r5
 8005764:	0038      	movs	r0, r7
 8005766:	f7ff ff7d 	bl	8005664 <_malloc_r>
 800576a:	1e06      	subs	r6, r0, #0
 800576c:	d109      	bne.n	8005782 <__ssputs_r+0x62>
 800576e:	230c      	movs	r3, #12
 8005770:	603b      	str	r3, [r7, #0]
 8005772:	2340      	movs	r3, #64	; 0x40
 8005774:	2001      	movs	r0, #1
 8005776:	89a2      	ldrh	r2, [r4, #12]
 8005778:	4240      	negs	r0, r0
 800577a:	4313      	orrs	r3, r2
 800577c:	81a3      	strh	r3, [r4, #12]
 800577e:	b005      	add	sp, #20
 8005780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005782:	9a02      	ldr	r2, [sp, #8]
 8005784:	6921      	ldr	r1, [r4, #16]
 8005786:	f7ff fe1b 	bl	80053c0 <memcpy>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	4a14      	ldr	r2, [pc, #80]	; (80057e0 <__ssputs_r+0xc0>)
 800578e:	401a      	ands	r2, r3
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	4313      	orrs	r3, r2
 8005794:	81a3      	strh	r3, [r4, #12]
 8005796:	9b02      	ldr	r3, [sp, #8]
 8005798:	6126      	str	r6, [r4, #16]
 800579a:	18f6      	adds	r6, r6, r3
 800579c:	6026      	str	r6, [r4, #0]
 800579e:	6165      	str	r5, [r4, #20]
 80057a0:	9e01      	ldr	r6, [sp, #4]
 80057a2:	1aed      	subs	r5, r5, r3
 80057a4:	60a5      	str	r5, [r4, #8]
 80057a6:	9b01      	ldr	r3, [sp, #4]
 80057a8:	429e      	cmp	r6, r3
 80057aa:	d900      	bls.n	80057ae <__ssputs_r+0x8e>
 80057ac:	9e01      	ldr	r6, [sp, #4]
 80057ae:	0032      	movs	r2, r6
 80057b0:	9903      	ldr	r1, [sp, #12]
 80057b2:	6820      	ldr	r0, [r4, #0]
 80057b4:	f000 fea3 	bl	80064fe <memmove>
 80057b8:	68a3      	ldr	r3, [r4, #8]
 80057ba:	2000      	movs	r0, #0
 80057bc:	1b9b      	subs	r3, r3, r6
 80057be:	60a3      	str	r3, [r4, #8]
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	199e      	adds	r6, r3, r6
 80057c4:	6026      	str	r6, [r4, #0]
 80057c6:	e7da      	b.n	800577e <__ssputs_r+0x5e>
 80057c8:	002a      	movs	r2, r5
 80057ca:	0038      	movs	r0, r7
 80057cc:	f000 ff04 	bl	80065d8 <_realloc_r>
 80057d0:	1e06      	subs	r6, r0, #0
 80057d2:	d1e0      	bne.n	8005796 <__ssputs_r+0x76>
 80057d4:	0038      	movs	r0, r7
 80057d6:	6921      	ldr	r1, [r4, #16]
 80057d8:	f000 feb4 	bl	8006544 <_free_r>
 80057dc:	e7c7      	b.n	800576e <__ssputs_r+0x4e>
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	fffffb7f 	.word	0xfffffb7f

080057e4 <_svfiprintf_r>:
 80057e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e6:	b0a1      	sub	sp, #132	; 0x84
 80057e8:	9003      	str	r0, [sp, #12]
 80057ea:	001d      	movs	r5, r3
 80057ec:	898b      	ldrh	r3, [r1, #12]
 80057ee:	000f      	movs	r7, r1
 80057f0:	0016      	movs	r6, r2
 80057f2:	061b      	lsls	r3, r3, #24
 80057f4:	d511      	bpl.n	800581a <_svfiprintf_r+0x36>
 80057f6:	690b      	ldr	r3, [r1, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10e      	bne.n	800581a <_svfiprintf_r+0x36>
 80057fc:	2140      	movs	r1, #64	; 0x40
 80057fe:	f7ff ff31 	bl	8005664 <_malloc_r>
 8005802:	6038      	str	r0, [r7, #0]
 8005804:	6138      	str	r0, [r7, #16]
 8005806:	2800      	cmp	r0, #0
 8005808:	d105      	bne.n	8005816 <_svfiprintf_r+0x32>
 800580a:	230c      	movs	r3, #12
 800580c:	9a03      	ldr	r2, [sp, #12]
 800580e:	3801      	subs	r0, #1
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	b021      	add	sp, #132	; 0x84
 8005814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005816:	2340      	movs	r3, #64	; 0x40
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	2300      	movs	r3, #0
 800581c:	ac08      	add	r4, sp, #32
 800581e:	6163      	str	r3, [r4, #20]
 8005820:	3320      	adds	r3, #32
 8005822:	7663      	strb	r3, [r4, #25]
 8005824:	3310      	adds	r3, #16
 8005826:	76a3      	strb	r3, [r4, #26]
 8005828:	9507      	str	r5, [sp, #28]
 800582a:	0035      	movs	r5, r6
 800582c:	782b      	ldrb	r3, [r5, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <_svfiprintf_r+0x52>
 8005832:	2b25      	cmp	r3, #37	; 0x25
 8005834:	d147      	bne.n	80058c6 <_svfiprintf_r+0xe2>
 8005836:	1bab      	subs	r3, r5, r6
 8005838:	9305      	str	r3, [sp, #20]
 800583a:	42b5      	cmp	r5, r6
 800583c:	d00c      	beq.n	8005858 <_svfiprintf_r+0x74>
 800583e:	0032      	movs	r2, r6
 8005840:	0039      	movs	r1, r7
 8005842:	9803      	ldr	r0, [sp, #12]
 8005844:	f7ff ff6c 	bl	8005720 <__ssputs_r>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d100      	bne.n	800584e <_svfiprintf_r+0x6a>
 800584c:	e0ae      	b.n	80059ac <_svfiprintf_r+0x1c8>
 800584e:	6962      	ldr	r2, [r4, #20]
 8005850:	9b05      	ldr	r3, [sp, #20]
 8005852:	4694      	mov	ip, r2
 8005854:	4463      	add	r3, ip
 8005856:	6163      	str	r3, [r4, #20]
 8005858:	782b      	ldrb	r3, [r5, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d100      	bne.n	8005860 <_svfiprintf_r+0x7c>
 800585e:	e0a5      	b.n	80059ac <_svfiprintf_r+0x1c8>
 8005860:	2201      	movs	r2, #1
 8005862:	2300      	movs	r3, #0
 8005864:	4252      	negs	r2, r2
 8005866:	6062      	str	r2, [r4, #4]
 8005868:	a904      	add	r1, sp, #16
 800586a:	3254      	adds	r2, #84	; 0x54
 800586c:	1852      	adds	r2, r2, r1
 800586e:	1c6e      	adds	r6, r5, #1
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	60e3      	str	r3, [r4, #12]
 8005874:	60a3      	str	r3, [r4, #8]
 8005876:	7013      	strb	r3, [r2, #0]
 8005878:	65a3      	str	r3, [r4, #88]	; 0x58
 800587a:	2205      	movs	r2, #5
 800587c:	7831      	ldrb	r1, [r6, #0]
 800587e:	4854      	ldr	r0, [pc, #336]	; (80059d0 <_svfiprintf_r+0x1ec>)
 8005880:	f000 fe32 	bl	80064e8 <memchr>
 8005884:	1c75      	adds	r5, r6, #1
 8005886:	2800      	cmp	r0, #0
 8005888:	d11f      	bne.n	80058ca <_svfiprintf_r+0xe6>
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	06d3      	lsls	r3, r2, #27
 800588e:	d504      	bpl.n	800589a <_svfiprintf_r+0xb6>
 8005890:	2353      	movs	r3, #83	; 0x53
 8005892:	a904      	add	r1, sp, #16
 8005894:	185b      	adds	r3, r3, r1
 8005896:	2120      	movs	r1, #32
 8005898:	7019      	strb	r1, [r3, #0]
 800589a:	0713      	lsls	r3, r2, #28
 800589c:	d504      	bpl.n	80058a8 <_svfiprintf_r+0xc4>
 800589e:	2353      	movs	r3, #83	; 0x53
 80058a0:	a904      	add	r1, sp, #16
 80058a2:	185b      	adds	r3, r3, r1
 80058a4:	212b      	movs	r1, #43	; 0x2b
 80058a6:	7019      	strb	r1, [r3, #0]
 80058a8:	7833      	ldrb	r3, [r6, #0]
 80058aa:	2b2a      	cmp	r3, #42	; 0x2a
 80058ac:	d016      	beq.n	80058dc <_svfiprintf_r+0xf8>
 80058ae:	0035      	movs	r5, r6
 80058b0:	2100      	movs	r1, #0
 80058b2:	200a      	movs	r0, #10
 80058b4:	68e3      	ldr	r3, [r4, #12]
 80058b6:	782a      	ldrb	r2, [r5, #0]
 80058b8:	1c6e      	adds	r6, r5, #1
 80058ba:	3a30      	subs	r2, #48	; 0x30
 80058bc:	2a09      	cmp	r2, #9
 80058be:	d94e      	bls.n	800595e <_svfiprintf_r+0x17a>
 80058c0:	2900      	cmp	r1, #0
 80058c2:	d111      	bne.n	80058e8 <_svfiprintf_r+0x104>
 80058c4:	e017      	b.n	80058f6 <_svfiprintf_r+0x112>
 80058c6:	3501      	adds	r5, #1
 80058c8:	e7b0      	b.n	800582c <_svfiprintf_r+0x48>
 80058ca:	4b41      	ldr	r3, [pc, #260]	; (80059d0 <_svfiprintf_r+0x1ec>)
 80058cc:	6822      	ldr	r2, [r4, #0]
 80058ce:	1ac0      	subs	r0, r0, r3
 80058d0:	2301      	movs	r3, #1
 80058d2:	4083      	lsls	r3, r0
 80058d4:	4313      	orrs	r3, r2
 80058d6:	002e      	movs	r6, r5
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	e7ce      	b.n	800587a <_svfiprintf_r+0x96>
 80058dc:	9b07      	ldr	r3, [sp, #28]
 80058de:	1d19      	adds	r1, r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	9107      	str	r1, [sp, #28]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	db01      	blt.n	80058ec <_svfiprintf_r+0x108>
 80058e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80058ea:	e004      	b.n	80058f6 <_svfiprintf_r+0x112>
 80058ec:	425b      	negs	r3, r3
 80058ee:	60e3      	str	r3, [r4, #12]
 80058f0:	2302      	movs	r3, #2
 80058f2:	4313      	orrs	r3, r2
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	782b      	ldrb	r3, [r5, #0]
 80058f8:	2b2e      	cmp	r3, #46	; 0x2e
 80058fa:	d10a      	bne.n	8005912 <_svfiprintf_r+0x12e>
 80058fc:	786b      	ldrb	r3, [r5, #1]
 80058fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005900:	d135      	bne.n	800596e <_svfiprintf_r+0x18a>
 8005902:	9b07      	ldr	r3, [sp, #28]
 8005904:	3502      	adds	r5, #2
 8005906:	1d1a      	adds	r2, r3, #4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	9207      	str	r2, [sp, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	db2b      	blt.n	8005968 <_svfiprintf_r+0x184>
 8005910:	9309      	str	r3, [sp, #36]	; 0x24
 8005912:	4e30      	ldr	r6, [pc, #192]	; (80059d4 <_svfiprintf_r+0x1f0>)
 8005914:	2203      	movs	r2, #3
 8005916:	0030      	movs	r0, r6
 8005918:	7829      	ldrb	r1, [r5, #0]
 800591a:	f000 fde5 	bl	80064e8 <memchr>
 800591e:	2800      	cmp	r0, #0
 8005920:	d006      	beq.n	8005930 <_svfiprintf_r+0x14c>
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	1b80      	subs	r0, r0, r6
 8005926:	4083      	lsls	r3, r0
 8005928:	6822      	ldr	r2, [r4, #0]
 800592a:	3501      	adds	r5, #1
 800592c:	4313      	orrs	r3, r2
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	7829      	ldrb	r1, [r5, #0]
 8005932:	2206      	movs	r2, #6
 8005934:	4828      	ldr	r0, [pc, #160]	; (80059d8 <_svfiprintf_r+0x1f4>)
 8005936:	1c6e      	adds	r6, r5, #1
 8005938:	7621      	strb	r1, [r4, #24]
 800593a:	f000 fdd5 	bl	80064e8 <memchr>
 800593e:	2800      	cmp	r0, #0
 8005940:	d03c      	beq.n	80059bc <_svfiprintf_r+0x1d8>
 8005942:	4b26      	ldr	r3, [pc, #152]	; (80059dc <_svfiprintf_r+0x1f8>)
 8005944:	2b00      	cmp	r3, #0
 8005946:	d125      	bne.n	8005994 <_svfiprintf_r+0x1b0>
 8005948:	2207      	movs	r2, #7
 800594a:	9b07      	ldr	r3, [sp, #28]
 800594c:	3307      	adds	r3, #7
 800594e:	4393      	bics	r3, r2
 8005950:	3308      	adds	r3, #8
 8005952:	9307      	str	r3, [sp, #28]
 8005954:	6963      	ldr	r3, [r4, #20]
 8005956:	9a04      	ldr	r2, [sp, #16]
 8005958:	189b      	adds	r3, r3, r2
 800595a:	6163      	str	r3, [r4, #20]
 800595c:	e765      	b.n	800582a <_svfiprintf_r+0x46>
 800595e:	4343      	muls	r3, r0
 8005960:	0035      	movs	r5, r6
 8005962:	2101      	movs	r1, #1
 8005964:	189b      	adds	r3, r3, r2
 8005966:	e7a6      	b.n	80058b6 <_svfiprintf_r+0xd2>
 8005968:	2301      	movs	r3, #1
 800596a:	425b      	negs	r3, r3
 800596c:	e7d0      	b.n	8005910 <_svfiprintf_r+0x12c>
 800596e:	2300      	movs	r3, #0
 8005970:	200a      	movs	r0, #10
 8005972:	001a      	movs	r2, r3
 8005974:	3501      	adds	r5, #1
 8005976:	6063      	str	r3, [r4, #4]
 8005978:	7829      	ldrb	r1, [r5, #0]
 800597a:	1c6e      	adds	r6, r5, #1
 800597c:	3930      	subs	r1, #48	; 0x30
 800597e:	2909      	cmp	r1, #9
 8005980:	d903      	bls.n	800598a <_svfiprintf_r+0x1a6>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0c5      	beq.n	8005912 <_svfiprintf_r+0x12e>
 8005986:	9209      	str	r2, [sp, #36]	; 0x24
 8005988:	e7c3      	b.n	8005912 <_svfiprintf_r+0x12e>
 800598a:	4342      	muls	r2, r0
 800598c:	0035      	movs	r5, r6
 800598e:	2301      	movs	r3, #1
 8005990:	1852      	adds	r2, r2, r1
 8005992:	e7f1      	b.n	8005978 <_svfiprintf_r+0x194>
 8005994:	ab07      	add	r3, sp, #28
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	003a      	movs	r2, r7
 800599a:	0021      	movs	r1, r4
 800599c:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <_svfiprintf_r+0x1fc>)
 800599e:	9803      	ldr	r0, [sp, #12]
 80059a0:	e000      	b.n	80059a4 <_svfiprintf_r+0x1c0>
 80059a2:	bf00      	nop
 80059a4:	9004      	str	r0, [sp, #16]
 80059a6:	9b04      	ldr	r3, [sp, #16]
 80059a8:	3301      	adds	r3, #1
 80059aa:	d1d3      	bne.n	8005954 <_svfiprintf_r+0x170>
 80059ac:	89bb      	ldrh	r3, [r7, #12]
 80059ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80059b0:	065b      	lsls	r3, r3, #25
 80059b2:	d400      	bmi.n	80059b6 <_svfiprintf_r+0x1d2>
 80059b4:	e72d      	b.n	8005812 <_svfiprintf_r+0x2e>
 80059b6:	2001      	movs	r0, #1
 80059b8:	4240      	negs	r0, r0
 80059ba:	e72a      	b.n	8005812 <_svfiprintf_r+0x2e>
 80059bc:	ab07      	add	r3, sp, #28
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	003a      	movs	r2, r7
 80059c2:	0021      	movs	r1, r4
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <_svfiprintf_r+0x1fc>)
 80059c6:	9803      	ldr	r0, [sp, #12]
 80059c8:	f000 f9de 	bl	8005d88 <_printf_i>
 80059cc:	e7ea      	b.n	80059a4 <_svfiprintf_r+0x1c0>
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	08006cdc 	.word	0x08006cdc
 80059d4:	08006ce2 	.word	0x08006ce2
 80059d8:	08006ce6 	.word	0x08006ce6
 80059dc:	00000000 	.word	0x00000000
 80059e0:	08005721 	.word	0x08005721

080059e4 <__sfputc_r>:
 80059e4:	6893      	ldr	r3, [r2, #8]
 80059e6:	b510      	push	{r4, lr}
 80059e8:	3b01      	subs	r3, #1
 80059ea:	6093      	str	r3, [r2, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	da04      	bge.n	80059fa <__sfputc_r+0x16>
 80059f0:	6994      	ldr	r4, [r2, #24]
 80059f2:	42a3      	cmp	r3, r4
 80059f4:	db07      	blt.n	8005a06 <__sfputc_r+0x22>
 80059f6:	290a      	cmp	r1, #10
 80059f8:	d005      	beq.n	8005a06 <__sfputc_r+0x22>
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	1c58      	adds	r0, r3, #1
 80059fe:	6010      	str	r0, [r2, #0]
 8005a00:	7019      	strb	r1, [r3, #0]
 8005a02:	0008      	movs	r0, r1
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	f000 fb2f 	bl	8006068 <__swbuf_r>
 8005a0a:	0001      	movs	r1, r0
 8005a0c:	e7f9      	b.n	8005a02 <__sfputc_r+0x1e>

08005a0e <__sfputs_r>:
 8005a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a10:	0006      	movs	r6, r0
 8005a12:	000f      	movs	r7, r1
 8005a14:	0014      	movs	r4, r2
 8005a16:	18d5      	adds	r5, r2, r3
 8005a18:	42ac      	cmp	r4, r5
 8005a1a:	d101      	bne.n	8005a20 <__sfputs_r+0x12>
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e007      	b.n	8005a30 <__sfputs_r+0x22>
 8005a20:	7821      	ldrb	r1, [r4, #0]
 8005a22:	003a      	movs	r2, r7
 8005a24:	0030      	movs	r0, r6
 8005a26:	f7ff ffdd 	bl	80059e4 <__sfputc_r>
 8005a2a:	3401      	adds	r4, #1
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d1f3      	bne.n	8005a18 <__sfputs_r+0xa>
 8005a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a34 <_vfiprintf_r>:
 8005a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a36:	b0a1      	sub	sp, #132	; 0x84
 8005a38:	0006      	movs	r6, r0
 8005a3a:	000c      	movs	r4, r1
 8005a3c:	001f      	movs	r7, r3
 8005a3e:	9203      	str	r2, [sp, #12]
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d004      	beq.n	8005a4e <_vfiprintf_r+0x1a>
 8005a44:	6983      	ldr	r3, [r0, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <_vfiprintf_r+0x1a>
 8005a4a:	f7ff fd67 	bl	800551c <__sinit>
 8005a4e:	4b8e      	ldr	r3, [pc, #568]	; (8005c88 <_vfiprintf_r+0x254>)
 8005a50:	429c      	cmp	r4, r3
 8005a52:	d11c      	bne.n	8005a8e <_vfiprintf_r+0x5a>
 8005a54:	6874      	ldr	r4, [r6, #4]
 8005a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a58:	07db      	lsls	r3, r3, #31
 8005a5a:	d405      	bmi.n	8005a68 <_vfiprintf_r+0x34>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	059b      	lsls	r3, r3, #22
 8005a60:	d402      	bmi.n	8005a68 <_vfiprintf_r+0x34>
 8005a62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a64:	f7ff fdfb 	bl	800565e <__retarget_lock_acquire_recursive>
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	071b      	lsls	r3, r3, #28
 8005a6c:	d502      	bpl.n	8005a74 <_vfiprintf_r+0x40>
 8005a6e:	6923      	ldr	r3, [r4, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d11d      	bne.n	8005ab0 <_vfiprintf_r+0x7c>
 8005a74:	0021      	movs	r1, r4
 8005a76:	0030      	movs	r0, r6
 8005a78:	f000 fb60 	bl	800613c <__swsetup_r>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d017      	beq.n	8005ab0 <_vfiprintf_r+0x7c>
 8005a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a82:	07db      	lsls	r3, r3, #31
 8005a84:	d50d      	bpl.n	8005aa2 <_vfiprintf_r+0x6e>
 8005a86:	2001      	movs	r0, #1
 8005a88:	4240      	negs	r0, r0
 8005a8a:	b021      	add	sp, #132	; 0x84
 8005a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a8e:	4b7f      	ldr	r3, [pc, #508]	; (8005c8c <_vfiprintf_r+0x258>)
 8005a90:	429c      	cmp	r4, r3
 8005a92:	d101      	bne.n	8005a98 <_vfiprintf_r+0x64>
 8005a94:	68b4      	ldr	r4, [r6, #8]
 8005a96:	e7de      	b.n	8005a56 <_vfiprintf_r+0x22>
 8005a98:	4b7d      	ldr	r3, [pc, #500]	; (8005c90 <_vfiprintf_r+0x25c>)
 8005a9a:	429c      	cmp	r4, r3
 8005a9c:	d1db      	bne.n	8005a56 <_vfiprintf_r+0x22>
 8005a9e:	68f4      	ldr	r4, [r6, #12]
 8005aa0:	e7d9      	b.n	8005a56 <_vfiprintf_r+0x22>
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	059b      	lsls	r3, r3, #22
 8005aa6:	d4ee      	bmi.n	8005a86 <_vfiprintf_r+0x52>
 8005aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aaa:	f7ff fdd9 	bl	8005660 <__retarget_lock_release_recursive>
 8005aae:	e7ea      	b.n	8005a86 <_vfiprintf_r+0x52>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	ad08      	add	r5, sp, #32
 8005ab4:	616b      	str	r3, [r5, #20]
 8005ab6:	3320      	adds	r3, #32
 8005ab8:	766b      	strb	r3, [r5, #25]
 8005aba:	3310      	adds	r3, #16
 8005abc:	76ab      	strb	r3, [r5, #26]
 8005abe:	9707      	str	r7, [sp, #28]
 8005ac0:	9f03      	ldr	r7, [sp, #12]
 8005ac2:	783b      	ldrb	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <_vfiprintf_r+0x98>
 8005ac8:	2b25      	cmp	r3, #37	; 0x25
 8005aca:	d14e      	bne.n	8005b6a <_vfiprintf_r+0x136>
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	1afb      	subs	r3, r7, r3
 8005ad0:	9305      	str	r3, [sp, #20]
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	429f      	cmp	r7, r3
 8005ad6:	d00d      	beq.n	8005af4 <_vfiprintf_r+0xc0>
 8005ad8:	9b05      	ldr	r3, [sp, #20]
 8005ada:	0021      	movs	r1, r4
 8005adc:	0030      	movs	r0, r6
 8005ade:	9a03      	ldr	r2, [sp, #12]
 8005ae0:	f7ff ff95 	bl	8005a0e <__sfputs_r>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d100      	bne.n	8005aea <_vfiprintf_r+0xb6>
 8005ae8:	e0b5      	b.n	8005c56 <_vfiprintf_r+0x222>
 8005aea:	696a      	ldr	r2, [r5, #20]
 8005aec:	9b05      	ldr	r3, [sp, #20]
 8005aee:	4694      	mov	ip, r2
 8005af0:	4463      	add	r3, ip
 8005af2:	616b      	str	r3, [r5, #20]
 8005af4:	783b      	ldrb	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d100      	bne.n	8005afc <_vfiprintf_r+0xc8>
 8005afa:	e0ac      	b.n	8005c56 <_vfiprintf_r+0x222>
 8005afc:	2201      	movs	r2, #1
 8005afe:	1c7b      	adds	r3, r7, #1
 8005b00:	9303      	str	r3, [sp, #12]
 8005b02:	2300      	movs	r3, #0
 8005b04:	4252      	negs	r2, r2
 8005b06:	606a      	str	r2, [r5, #4]
 8005b08:	a904      	add	r1, sp, #16
 8005b0a:	3254      	adds	r2, #84	; 0x54
 8005b0c:	1852      	adds	r2, r2, r1
 8005b0e:	602b      	str	r3, [r5, #0]
 8005b10:	60eb      	str	r3, [r5, #12]
 8005b12:	60ab      	str	r3, [r5, #8]
 8005b14:	7013      	strb	r3, [r2, #0]
 8005b16:	65ab      	str	r3, [r5, #88]	; 0x58
 8005b18:	9b03      	ldr	r3, [sp, #12]
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	7819      	ldrb	r1, [r3, #0]
 8005b1e:	485d      	ldr	r0, [pc, #372]	; (8005c94 <_vfiprintf_r+0x260>)
 8005b20:	f000 fce2 	bl	80064e8 <memchr>
 8005b24:	9b03      	ldr	r3, [sp, #12]
 8005b26:	1c5f      	adds	r7, r3, #1
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d120      	bne.n	8005b6e <_vfiprintf_r+0x13a>
 8005b2c:	682a      	ldr	r2, [r5, #0]
 8005b2e:	06d3      	lsls	r3, r2, #27
 8005b30:	d504      	bpl.n	8005b3c <_vfiprintf_r+0x108>
 8005b32:	2353      	movs	r3, #83	; 0x53
 8005b34:	a904      	add	r1, sp, #16
 8005b36:	185b      	adds	r3, r3, r1
 8005b38:	2120      	movs	r1, #32
 8005b3a:	7019      	strb	r1, [r3, #0]
 8005b3c:	0713      	lsls	r3, r2, #28
 8005b3e:	d504      	bpl.n	8005b4a <_vfiprintf_r+0x116>
 8005b40:	2353      	movs	r3, #83	; 0x53
 8005b42:	a904      	add	r1, sp, #16
 8005b44:	185b      	adds	r3, r3, r1
 8005b46:	212b      	movs	r1, #43	; 0x2b
 8005b48:	7019      	strb	r1, [r3, #0]
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b50:	d016      	beq.n	8005b80 <_vfiprintf_r+0x14c>
 8005b52:	2100      	movs	r1, #0
 8005b54:	68eb      	ldr	r3, [r5, #12]
 8005b56:	9f03      	ldr	r7, [sp, #12]
 8005b58:	783a      	ldrb	r2, [r7, #0]
 8005b5a:	1c78      	adds	r0, r7, #1
 8005b5c:	3a30      	subs	r2, #48	; 0x30
 8005b5e:	4684      	mov	ip, r0
 8005b60:	2a09      	cmp	r2, #9
 8005b62:	d94f      	bls.n	8005c04 <_vfiprintf_r+0x1d0>
 8005b64:	2900      	cmp	r1, #0
 8005b66:	d111      	bne.n	8005b8c <_vfiprintf_r+0x158>
 8005b68:	e017      	b.n	8005b9a <_vfiprintf_r+0x166>
 8005b6a:	3701      	adds	r7, #1
 8005b6c:	e7a9      	b.n	8005ac2 <_vfiprintf_r+0x8e>
 8005b6e:	4b49      	ldr	r3, [pc, #292]	; (8005c94 <_vfiprintf_r+0x260>)
 8005b70:	682a      	ldr	r2, [r5, #0]
 8005b72:	1ac0      	subs	r0, r0, r3
 8005b74:	2301      	movs	r3, #1
 8005b76:	4083      	lsls	r3, r0
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	602b      	str	r3, [r5, #0]
 8005b7c:	9703      	str	r7, [sp, #12]
 8005b7e:	e7cb      	b.n	8005b18 <_vfiprintf_r+0xe4>
 8005b80:	9b07      	ldr	r3, [sp, #28]
 8005b82:	1d19      	adds	r1, r3, #4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	9107      	str	r1, [sp, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	db01      	blt.n	8005b90 <_vfiprintf_r+0x15c>
 8005b8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b8e:	e004      	b.n	8005b9a <_vfiprintf_r+0x166>
 8005b90:	425b      	negs	r3, r3
 8005b92:	60eb      	str	r3, [r5, #12]
 8005b94:	2302      	movs	r3, #2
 8005b96:	4313      	orrs	r3, r2
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	783b      	ldrb	r3, [r7, #0]
 8005b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b9e:	d10a      	bne.n	8005bb6 <_vfiprintf_r+0x182>
 8005ba0:	787b      	ldrb	r3, [r7, #1]
 8005ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ba4:	d137      	bne.n	8005c16 <_vfiprintf_r+0x1e2>
 8005ba6:	9b07      	ldr	r3, [sp, #28]
 8005ba8:	3702      	adds	r7, #2
 8005baa:	1d1a      	adds	r2, r3, #4
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	9207      	str	r2, [sp, #28]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	db2d      	blt.n	8005c10 <_vfiprintf_r+0x1dc>
 8005bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	7839      	ldrb	r1, [r7, #0]
 8005bba:	4837      	ldr	r0, [pc, #220]	; (8005c98 <_vfiprintf_r+0x264>)
 8005bbc:	f000 fc94 	bl	80064e8 <memchr>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d007      	beq.n	8005bd4 <_vfiprintf_r+0x1a0>
 8005bc4:	4b34      	ldr	r3, [pc, #208]	; (8005c98 <_vfiprintf_r+0x264>)
 8005bc6:	682a      	ldr	r2, [r5, #0]
 8005bc8:	1ac0      	subs	r0, r0, r3
 8005bca:	2340      	movs	r3, #64	; 0x40
 8005bcc:	4083      	lsls	r3, r0
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	3701      	adds	r7, #1
 8005bd2:	602b      	str	r3, [r5, #0]
 8005bd4:	7839      	ldrb	r1, [r7, #0]
 8005bd6:	1c7b      	adds	r3, r7, #1
 8005bd8:	2206      	movs	r2, #6
 8005bda:	4830      	ldr	r0, [pc, #192]	; (8005c9c <_vfiprintf_r+0x268>)
 8005bdc:	9303      	str	r3, [sp, #12]
 8005bde:	7629      	strb	r1, [r5, #24]
 8005be0:	f000 fc82 	bl	80064e8 <memchr>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d045      	beq.n	8005c74 <_vfiprintf_r+0x240>
 8005be8:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <_vfiprintf_r+0x26c>)
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d127      	bne.n	8005c3e <_vfiprintf_r+0x20a>
 8005bee:	2207      	movs	r2, #7
 8005bf0:	9b07      	ldr	r3, [sp, #28]
 8005bf2:	3307      	adds	r3, #7
 8005bf4:	4393      	bics	r3, r2
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	9307      	str	r3, [sp, #28]
 8005bfa:	696b      	ldr	r3, [r5, #20]
 8005bfc:	9a04      	ldr	r2, [sp, #16]
 8005bfe:	189b      	adds	r3, r3, r2
 8005c00:	616b      	str	r3, [r5, #20]
 8005c02:	e75d      	b.n	8005ac0 <_vfiprintf_r+0x8c>
 8005c04:	210a      	movs	r1, #10
 8005c06:	434b      	muls	r3, r1
 8005c08:	4667      	mov	r7, ip
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	3909      	subs	r1, #9
 8005c0e:	e7a3      	b.n	8005b58 <_vfiprintf_r+0x124>
 8005c10:	2301      	movs	r3, #1
 8005c12:	425b      	negs	r3, r3
 8005c14:	e7ce      	b.n	8005bb4 <_vfiprintf_r+0x180>
 8005c16:	2300      	movs	r3, #0
 8005c18:	001a      	movs	r2, r3
 8005c1a:	3701      	adds	r7, #1
 8005c1c:	606b      	str	r3, [r5, #4]
 8005c1e:	7839      	ldrb	r1, [r7, #0]
 8005c20:	1c78      	adds	r0, r7, #1
 8005c22:	3930      	subs	r1, #48	; 0x30
 8005c24:	4684      	mov	ip, r0
 8005c26:	2909      	cmp	r1, #9
 8005c28:	d903      	bls.n	8005c32 <_vfiprintf_r+0x1fe>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0c3      	beq.n	8005bb6 <_vfiprintf_r+0x182>
 8005c2e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c30:	e7c1      	b.n	8005bb6 <_vfiprintf_r+0x182>
 8005c32:	230a      	movs	r3, #10
 8005c34:	435a      	muls	r2, r3
 8005c36:	4667      	mov	r7, ip
 8005c38:	1852      	adds	r2, r2, r1
 8005c3a:	3b09      	subs	r3, #9
 8005c3c:	e7ef      	b.n	8005c1e <_vfiprintf_r+0x1ea>
 8005c3e:	ab07      	add	r3, sp, #28
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	0022      	movs	r2, r4
 8005c44:	0029      	movs	r1, r5
 8005c46:	0030      	movs	r0, r6
 8005c48:	4b16      	ldr	r3, [pc, #88]	; (8005ca4 <_vfiprintf_r+0x270>)
 8005c4a:	e000      	b.n	8005c4e <_vfiprintf_r+0x21a>
 8005c4c:	bf00      	nop
 8005c4e:	9004      	str	r0, [sp, #16]
 8005c50:	9b04      	ldr	r3, [sp, #16]
 8005c52:	3301      	adds	r3, #1
 8005c54:	d1d1      	bne.n	8005bfa <_vfiprintf_r+0x1c6>
 8005c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c58:	07db      	lsls	r3, r3, #31
 8005c5a:	d405      	bmi.n	8005c68 <_vfiprintf_r+0x234>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	059b      	lsls	r3, r3, #22
 8005c60:	d402      	bmi.n	8005c68 <_vfiprintf_r+0x234>
 8005c62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c64:	f7ff fcfc 	bl	8005660 <__retarget_lock_release_recursive>
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	065b      	lsls	r3, r3, #25
 8005c6c:	d500      	bpl.n	8005c70 <_vfiprintf_r+0x23c>
 8005c6e:	e70a      	b.n	8005a86 <_vfiprintf_r+0x52>
 8005c70:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005c72:	e70a      	b.n	8005a8a <_vfiprintf_r+0x56>
 8005c74:	ab07      	add	r3, sp, #28
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	0022      	movs	r2, r4
 8005c7a:	0029      	movs	r1, r5
 8005c7c:	0030      	movs	r0, r6
 8005c7e:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <_vfiprintf_r+0x270>)
 8005c80:	f000 f882 	bl	8005d88 <_printf_i>
 8005c84:	e7e3      	b.n	8005c4e <_vfiprintf_r+0x21a>
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	08006c9c 	.word	0x08006c9c
 8005c8c:	08006cbc 	.word	0x08006cbc
 8005c90:	08006c7c 	.word	0x08006c7c
 8005c94:	08006cdc 	.word	0x08006cdc
 8005c98:	08006ce2 	.word	0x08006ce2
 8005c9c:	08006ce6 	.word	0x08006ce6
 8005ca0:	00000000 	.word	0x00000000
 8005ca4:	08005a0f 	.word	0x08005a0f

08005ca8 <_printf_common>:
 8005ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005caa:	0015      	movs	r5, r2
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	688a      	ldr	r2, [r1, #8]
 8005cb0:	690b      	ldr	r3, [r1, #16]
 8005cb2:	000c      	movs	r4, r1
 8005cb4:	9000      	str	r0, [sp, #0]
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	da00      	bge.n	8005cbc <_printf_common+0x14>
 8005cba:	0013      	movs	r3, r2
 8005cbc:	0022      	movs	r2, r4
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	3243      	adds	r2, #67	; 0x43
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	2a00      	cmp	r2, #0
 8005cc6:	d001      	beq.n	8005ccc <_printf_common+0x24>
 8005cc8:	3301      	adds	r3, #1
 8005cca:	602b      	str	r3, [r5, #0]
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	069b      	lsls	r3, r3, #26
 8005cd0:	d502      	bpl.n	8005cd8 <_printf_common+0x30>
 8005cd2:	682b      	ldr	r3, [r5, #0]
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	602b      	str	r3, [r5, #0]
 8005cd8:	6822      	ldr	r2, [r4, #0]
 8005cda:	2306      	movs	r3, #6
 8005cdc:	0017      	movs	r7, r2
 8005cde:	401f      	ands	r7, r3
 8005ce0:	421a      	tst	r2, r3
 8005ce2:	d027      	beq.n	8005d34 <_printf_common+0x8c>
 8005ce4:	0023      	movs	r3, r4
 8005ce6:	3343      	adds	r3, #67	; 0x43
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	1e5a      	subs	r2, r3, #1
 8005cec:	4193      	sbcs	r3, r2
 8005cee:	6822      	ldr	r2, [r4, #0]
 8005cf0:	0692      	lsls	r2, r2, #26
 8005cf2:	d430      	bmi.n	8005d56 <_printf_common+0xae>
 8005cf4:	0022      	movs	r2, r4
 8005cf6:	9901      	ldr	r1, [sp, #4]
 8005cf8:	9800      	ldr	r0, [sp, #0]
 8005cfa:	9e08      	ldr	r6, [sp, #32]
 8005cfc:	3243      	adds	r2, #67	; 0x43
 8005cfe:	47b0      	blx	r6
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d025      	beq.n	8005d50 <_printf_common+0xa8>
 8005d04:	2306      	movs	r3, #6
 8005d06:	6820      	ldr	r0, [r4, #0]
 8005d08:	682a      	ldr	r2, [r5, #0]
 8005d0a:	68e1      	ldr	r1, [r4, #12]
 8005d0c:	2500      	movs	r5, #0
 8005d0e:	4003      	ands	r3, r0
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d103      	bne.n	8005d1c <_printf_common+0x74>
 8005d14:	1a8d      	subs	r5, r1, r2
 8005d16:	43eb      	mvns	r3, r5
 8005d18:	17db      	asrs	r3, r3, #31
 8005d1a:	401d      	ands	r5, r3
 8005d1c:	68a3      	ldr	r3, [r4, #8]
 8005d1e:	6922      	ldr	r2, [r4, #16]
 8005d20:	4293      	cmp	r3, r2
 8005d22:	dd01      	ble.n	8005d28 <_printf_common+0x80>
 8005d24:	1a9b      	subs	r3, r3, r2
 8005d26:	18ed      	adds	r5, r5, r3
 8005d28:	2700      	movs	r7, #0
 8005d2a:	42bd      	cmp	r5, r7
 8005d2c:	d120      	bne.n	8005d70 <_printf_common+0xc8>
 8005d2e:	2000      	movs	r0, #0
 8005d30:	e010      	b.n	8005d54 <_printf_common+0xac>
 8005d32:	3701      	adds	r7, #1
 8005d34:	68e3      	ldr	r3, [r4, #12]
 8005d36:	682a      	ldr	r2, [r5, #0]
 8005d38:	1a9b      	subs	r3, r3, r2
 8005d3a:	42bb      	cmp	r3, r7
 8005d3c:	ddd2      	ble.n	8005ce4 <_printf_common+0x3c>
 8005d3e:	0022      	movs	r2, r4
 8005d40:	2301      	movs	r3, #1
 8005d42:	9901      	ldr	r1, [sp, #4]
 8005d44:	9800      	ldr	r0, [sp, #0]
 8005d46:	9e08      	ldr	r6, [sp, #32]
 8005d48:	3219      	adds	r2, #25
 8005d4a:	47b0      	blx	r6
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d1f0      	bne.n	8005d32 <_printf_common+0x8a>
 8005d50:	2001      	movs	r0, #1
 8005d52:	4240      	negs	r0, r0
 8005d54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d56:	2030      	movs	r0, #48	; 0x30
 8005d58:	18e1      	adds	r1, r4, r3
 8005d5a:	3143      	adds	r1, #67	; 0x43
 8005d5c:	7008      	strb	r0, [r1, #0]
 8005d5e:	0021      	movs	r1, r4
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	3145      	adds	r1, #69	; 0x45
 8005d64:	7809      	ldrb	r1, [r1, #0]
 8005d66:	18a2      	adds	r2, r4, r2
 8005d68:	3243      	adds	r2, #67	; 0x43
 8005d6a:	3302      	adds	r3, #2
 8005d6c:	7011      	strb	r1, [r2, #0]
 8005d6e:	e7c1      	b.n	8005cf4 <_printf_common+0x4c>
 8005d70:	0022      	movs	r2, r4
 8005d72:	2301      	movs	r3, #1
 8005d74:	9901      	ldr	r1, [sp, #4]
 8005d76:	9800      	ldr	r0, [sp, #0]
 8005d78:	9e08      	ldr	r6, [sp, #32]
 8005d7a:	321a      	adds	r2, #26
 8005d7c:	47b0      	blx	r6
 8005d7e:	1c43      	adds	r3, r0, #1
 8005d80:	d0e6      	beq.n	8005d50 <_printf_common+0xa8>
 8005d82:	3701      	adds	r7, #1
 8005d84:	e7d1      	b.n	8005d2a <_printf_common+0x82>
	...

08005d88 <_printf_i>:
 8005d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d8a:	b08b      	sub	sp, #44	; 0x2c
 8005d8c:	9206      	str	r2, [sp, #24]
 8005d8e:	000a      	movs	r2, r1
 8005d90:	3243      	adds	r2, #67	; 0x43
 8005d92:	9307      	str	r3, [sp, #28]
 8005d94:	9005      	str	r0, [sp, #20]
 8005d96:	9204      	str	r2, [sp, #16]
 8005d98:	7e0a      	ldrb	r2, [r1, #24]
 8005d9a:	000c      	movs	r4, r1
 8005d9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d9e:	2a78      	cmp	r2, #120	; 0x78
 8005da0:	d806      	bhi.n	8005db0 <_printf_i+0x28>
 8005da2:	2a62      	cmp	r2, #98	; 0x62
 8005da4:	d808      	bhi.n	8005db8 <_printf_i+0x30>
 8005da6:	2a00      	cmp	r2, #0
 8005da8:	d100      	bne.n	8005dac <_printf_i+0x24>
 8005daa:	e0c0      	b.n	8005f2e <_printf_i+0x1a6>
 8005dac:	2a58      	cmp	r2, #88	; 0x58
 8005dae:	d052      	beq.n	8005e56 <_printf_i+0xce>
 8005db0:	0026      	movs	r6, r4
 8005db2:	3642      	adds	r6, #66	; 0x42
 8005db4:	7032      	strb	r2, [r6, #0]
 8005db6:	e022      	b.n	8005dfe <_printf_i+0x76>
 8005db8:	0010      	movs	r0, r2
 8005dba:	3863      	subs	r0, #99	; 0x63
 8005dbc:	2815      	cmp	r0, #21
 8005dbe:	d8f7      	bhi.n	8005db0 <_printf_i+0x28>
 8005dc0:	f7fa f9aa 	bl	8000118 <__gnu_thumb1_case_shi>
 8005dc4:	001f0016 	.word	0x001f0016
 8005dc8:	fff6fff6 	.word	0xfff6fff6
 8005dcc:	fff6fff6 	.word	0xfff6fff6
 8005dd0:	fff6001f 	.word	0xfff6001f
 8005dd4:	fff6fff6 	.word	0xfff6fff6
 8005dd8:	00a8fff6 	.word	0x00a8fff6
 8005ddc:	009a0036 	.word	0x009a0036
 8005de0:	fff6fff6 	.word	0xfff6fff6
 8005de4:	fff600b9 	.word	0xfff600b9
 8005de8:	fff60036 	.word	0xfff60036
 8005dec:	009efff6 	.word	0x009efff6
 8005df0:	0026      	movs	r6, r4
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	3642      	adds	r6, #66	; 0x42
 8005df6:	1d11      	adds	r1, r2, #4
 8005df8:	6019      	str	r1, [r3, #0]
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	7033      	strb	r3, [r6, #0]
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0a7      	b.n	8005f52 <_printf_i+0x1ca>
 8005e02:	6808      	ldr	r0, [r1, #0]
 8005e04:	6819      	ldr	r1, [r3, #0]
 8005e06:	1d0a      	adds	r2, r1, #4
 8005e08:	0605      	lsls	r5, r0, #24
 8005e0a:	d50b      	bpl.n	8005e24 <_printf_i+0x9c>
 8005e0c:	680d      	ldr	r5, [r1, #0]
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	2d00      	cmp	r5, #0
 8005e12:	da03      	bge.n	8005e1c <_printf_i+0x94>
 8005e14:	232d      	movs	r3, #45	; 0x2d
 8005e16:	9a04      	ldr	r2, [sp, #16]
 8005e18:	426d      	negs	r5, r5
 8005e1a:	7013      	strb	r3, [r2, #0]
 8005e1c:	4b61      	ldr	r3, [pc, #388]	; (8005fa4 <_printf_i+0x21c>)
 8005e1e:	270a      	movs	r7, #10
 8005e20:	9303      	str	r3, [sp, #12]
 8005e22:	e032      	b.n	8005e8a <_printf_i+0x102>
 8005e24:	680d      	ldr	r5, [r1, #0]
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	0641      	lsls	r1, r0, #25
 8005e2a:	d5f1      	bpl.n	8005e10 <_printf_i+0x88>
 8005e2c:	b22d      	sxth	r5, r5
 8005e2e:	e7ef      	b.n	8005e10 <_printf_i+0x88>
 8005e30:	680d      	ldr	r5, [r1, #0]
 8005e32:	6819      	ldr	r1, [r3, #0]
 8005e34:	1d08      	adds	r0, r1, #4
 8005e36:	6018      	str	r0, [r3, #0]
 8005e38:	062e      	lsls	r6, r5, #24
 8005e3a:	d501      	bpl.n	8005e40 <_printf_i+0xb8>
 8005e3c:	680d      	ldr	r5, [r1, #0]
 8005e3e:	e003      	b.n	8005e48 <_printf_i+0xc0>
 8005e40:	066d      	lsls	r5, r5, #25
 8005e42:	d5fb      	bpl.n	8005e3c <_printf_i+0xb4>
 8005e44:	680d      	ldr	r5, [r1, #0]
 8005e46:	b2ad      	uxth	r5, r5
 8005e48:	4b56      	ldr	r3, [pc, #344]	; (8005fa4 <_printf_i+0x21c>)
 8005e4a:	270a      	movs	r7, #10
 8005e4c:	9303      	str	r3, [sp, #12]
 8005e4e:	2a6f      	cmp	r2, #111	; 0x6f
 8005e50:	d117      	bne.n	8005e82 <_printf_i+0xfa>
 8005e52:	2708      	movs	r7, #8
 8005e54:	e015      	b.n	8005e82 <_printf_i+0xfa>
 8005e56:	3145      	adds	r1, #69	; 0x45
 8005e58:	700a      	strb	r2, [r1, #0]
 8005e5a:	4a52      	ldr	r2, [pc, #328]	; (8005fa4 <_printf_i+0x21c>)
 8005e5c:	9203      	str	r2, [sp, #12]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	6821      	ldr	r1, [r4, #0]
 8005e62:	ca20      	ldmia	r2!, {r5}
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	0608      	lsls	r0, r1, #24
 8005e68:	d550      	bpl.n	8005f0c <_printf_i+0x184>
 8005e6a:	07cb      	lsls	r3, r1, #31
 8005e6c:	d502      	bpl.n	8005e74 <_printf_i+0xec>
 8005e6e:	2320      	movs	r3, #32
 8005e70:	4319      	orrs	r1, r3
 8005e72:	6021      	str	r1, [r4, #0]
 8005e74:	2710      	movs	r7, #16
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	d103      	bne.n	8005e82 <_printf_i+0xfa>
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	6822      	ldr	r2, [r4, #0]
 8005e7e:	439a      	bics	r2, r3
 8005e80:	6022      	str	r2, [r4, #0]
 8005e82:	0023      	movs	r3, r4
 8005e84:	2200      	movs	r2, #0
 8005e86:	3343      	adds	r3, #67	; 0x43
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	6863      	ldr	r3, [r4, #4]
 8005e8c:	60a3      	str	r3, [r4, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	db03      	blt.n	8005e9a <_printf_i+0x112>
 8005e92:	2204      	movs	r2, #4
 8005e94:	6821      	ldr	r1, [r4, #0]
 8005e96:	4391      	bics	r1, r2
 8005e98:	6021      	str	r1, [r4, #0]
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	d102      	bne.n	8005ea4 <_printf_i+0x11c>
 8005e9e:	9e04      	ldr	r6, [sp, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00c      	beq.n	8005ebe <_printf_i+0x136>
 8005ea4:	9e04      	ldr	r6, [sp, #16]
 8005ea6:	0028      	movs	r0, r5
 8005ea8:	0039      	movs	r1, r7
 8005eaa:	f7fa f9c5 	bl	8000238 <__aeabi_uidivmod>
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	3e01      	subs	r6, #1
 8005eb2:	5c5b      	ldrb	r3, [r3, r1]
 8005eb4:	7033      	strb	r3, [r6, #0]
 8005eb6:	002b      	movs	r3, r5
 8005eb8:	0005      	movs	r5, r0
 8005eba:	429f      	cmp	r7, r3
 8005ebc:	d9f3      	bls.n	8005ea6 <_printf_i+0x11e>
 8005ebe:	2f08      	cmp	r7, #8
 8005ec0:	d109      	bne.n	8005ed6 <_printf_i+0x14e>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	07db      	lsls	r3, r3, #31
 8005ec6:	d506      	bpl.n	8005ed6 <_printf_i+0x14e>
 8005ec8:	6863      	ldr	r3, [r4, #4]
 8005eca:	6922      	ldr	r2, [r4, #16]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	dc02      	bgt.n	8005ed6 <_printf_i+0x14e>
 8005ed0:	2330      	movs	r3, #48	; 0x30
 8005ed2:	3e01      	subs	r6, #1
 8005ed4:	7033      	strb	r3, [r6, #0]
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	1b9b      	subs	r3, r3, r6
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	9b07      	ldr	r3, [sp, #28]
 8005ede:	0021      	movs	r1, r4
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	9805      	ldr	r0, [sp, #20]
 8005ee4:	9b06      	ldr	r3, [sp, #24]
 8005ee6:	aa09      	add	r2, sp, #36	; 0x24
 8005ee8:	f7ff fede 	bl	8005ca8 <_printf_common>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d135      	bne.n	8005f5c <_printf_i+0x1d4>
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	4240      	negs	r0, r0
 8005ef4:	b00b      	add	sp, #44	; 0x2c
 8005ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef8:	2220      	movs	r2, #32
 8005efa:	6809      	ldr	r1, [r1, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	6022      	str	r2, [r4, #0]
 8005f00:	0022      	movs	r2, r4
 8005f02:	2178      	movs	r1, #120	; 0x78
 8005f04:	3245      	adds	r2, #69	; 0x45
 8005f06:	7011      	strb	r1, [r2, #0]
 8005f08:	4a27      	ldr	r2, [pc, #156]	; (8005fa8 <_printf_i+0x220>)
 8005f0a:	e7a7      	b.n	8005e5c <_printf_i+0xd4>
 8005f0c:	0648      	lsls	r0, r1, #25
 8005f0e:	d5ac      	bpl.n	8005e6a <_printf_i+0xe2>
 8005f10:	b2ad      	uxth	r5, r5
 8005f12:	e7aa      	b.n	8005e6a <_printf_i+0xe2>
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	680d      	ldr	r5, [r1, #0]
 8005f18:	1d10      	adds	r0, r2, #4
 8005f1a:	6949      	ldr	r1, [r1, #20]
 8005f1c:	6018      	str	r0, [r3, #0]
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	062e      	lsls	r6, r5, #24
 8005f22:	d501      	bpl.n	8005f28 <_printf_i+0x1a0>
 8005f24:	6019      	str	r1, [r3, #0]
 8005f26:	e002      	b.n	8005f2e <_printf_i+0x1a6>
 8005f28:	066d      	lsls	r5, r5, #25
 8005f2a:	d5fb      	bpl.n	8005f24 <_printf_i+0x19c>
 8005f2c:	8019      	strh	r1, [r3, #0]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9e04      	ldr	r6, [sp, #16]
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	e7d2      	b.n	8005edc <_printf_i+0x154>
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	1d11      	adds	r1, r2, #4
 8005f3a:	6019      	str	r1, [r3, #0]
 8005f3c:	6816      	ldr	r6, [r2, #0]
 8005f3e:	2100      	movs	r1, #0
 8005f40:	0030      	movs	r0, r6
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	f000 fad0 	bl	80064e8 <memchr>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d001      	beq.n	8005f50 <_printf_i+0x1c8>
 8005f4c:	1b80      	subs	r0, r0, r6
 8005f4e:	6060      	str	r0, [r4, #4]
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	2300      	movs	r3, #0
 8005f56:	9a04      	ldr	r2, [sp, #16]
 8005f58:	7013      	strb	r3, [r2, #0]
 8005f5a:	e7bf      	b.n	8005edc <_printf_i+0x154>
 8005f5c:	6923      	ldr	r3, [r4, #16]
 8005f5e:	0032      	movs	r2, r6
 8005f60:	9906      	ldr	r1, [sp, #24]
 8005f62:	9805      	ldr	r0, [sp, #20]
 8005f64:	9d07      	ldr	r5, [sp, #28]
 8005f66:	47a8      	blx	r5
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d0c1      	beq.n	8005ef0 <_printf_i+0x168>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	079b      	lsls	r3, r3, #30
 8005f70:	d415      	bmi.n	8005f9e <_printf_i+0x216>
 8005f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f74:	68e0      	ldr	r0, [r4, #12]
 8005f76:	4298      	cmp	r0, r3
 8005f78:	dabc      	bge.n	8005ef4 <_printf_i+0x16c>
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	e7ba      	b.n	8005ef4 <_printf_i+0x16c>
 8005f7e:	0022      	movs	r2, r4
 8005f80:	2301      	movs	r3, #1
 8005f82:	9906      	ldr	r1, [sp, #24]
 8005f84:	9805      	ldr	r0, [sp, #20]
 8005f86:	9e07      	ldr	r6, [sp, #28]
 8005f88:	3219      	adds	r2, #25
 8005f8a:	47b0      	blx	r6
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d0af      	beq.n	8005ef0 <_printf_i+0x168>
 8005f90:	3501      	adds	r5, #1
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f96:	1a9b      	subs	r3, r3, r2
 8005f98:	42ab      	cmp	r3, r5
 8005f9a:	dcf0      	bgt.n	8005f7e <_printf_i+0x1f6>
 8005f9c:	e7e9      	b.n	8005f72 <_printf_i+0x1ea>
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	e7f7      	b.n	8005f92 <_printf_i+0x20a>
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	08006ced 	.word	0x08006ced
 8005fa8:	08006cfe 	.word	0x08006cfe

08005fac <_sbrk_r>:
 8005fac:	2300      	movs	r3, #0
 8005fae:	b570      	push	{r4, r5, r6, lr}
 8005fb0:	4d06      	ldr	r5, [pc, #24]	; (8005fcc <_sbrk_r+0x20>)
 8005fb2:	0004      	movs	r4, r0
 8005fb4:	0008      	movs	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fc f8ac 	bl	8002114 <_sbrk>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d103      	bne.n	8005fc8 <_sbrk_r+0x1c>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d000      	beq.n	8005fc8 <_sbrk_r+0x1c>
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	200003d0 	.word	0x200003d0

08005fd0 <__sread>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	000c      	movs	r4, r1
 8005fd4:	250e      	movs	r5, #14
 8005fd6:	5f49      	ldrsh	r1, [r1, r5]
 8005fd8:	f000 fb24 	bl	8006624 <_read_r>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	db03      	blt.n	8005fe8 <__sread+0x18>
 8005fe0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005fe2:	181b      	adds	r3, r3, r0
 8005fe4:	6563      	str	r3, [r4, #84]	; 0x54
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	4a02      	ldr	r2, [pc, #8]	; (8005ff4 <__sread+0x24>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	e7f9      	b.n	8005fe6 <__sread+0x16>
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	ffffefff 	.word	0xffffefff

08005ff8 <__swrite>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	001f      	movs	r7, r3
 8005ffc:	898b      	ldrh	r3, [r1, #12]
 8005ffe:	0005      	movs	r5, r0
 8006000:	000c      	movs	r4, r1
 8006002:	0016      	movs	r6, r2
 8006004:	05db      	lsls	r3, r3, #23
 8006006:	d505      	bpl.n	8006014 <__swrite+0x1c>
 8006008:	230e      	movs	r3, #14
 800600a:	5ec9      	ldrsh	r1, [r1, r3]
 800600c:	2200      	movs	r2, #0
 800600e:	2302      	movs	r3, #2
 8006010:	f000 f9ea 	bl	80063e8 <_lseek_r>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	4a05      	ldr	r2, [pc, #20]	; (800602c <__swrite+0x34>)
 8006018:	0028      	movs	r0, r5
 800601a:	4013      	ands	r3, r2
 800601c:	81a3      	strh	r3, [r4, #12]
 800601e:	0032      	movs	r2, r6
 8006020:	230e      	movs	r3, #14
 8006022:	5ee1      	ldrsh	r1, [r4, r3]
 8006024:	003b      	movs	r3, r7
 8006026:	f000 f875 	bl	8006114 <_write_r>
 800602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602c:	ffffefff 	.word	0xffffefff

08006030 <__sseek>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	000c      	movs	r4, r1
 8006034:	250e      	movs	r5, #14
 8006036:	5f49      	ldrsh	r1, [r1, r5]
 8006038:	f000 f9d6 	bl	80063e8 <_lseek_r>
 800603c:	89a3      	ldrh	r3, [r4, #12]
 800603e:	1c42      	adds	r2, r0, #1
 8006040:	d103      	bne.n	800604a <__sseek+0x1a>
 8006042:	4a05      	ldr	r2, [pc, #20]	; (8006058 <__sseek+0x28>)
 8006044:	4013      	ands	r3, r2
 8006046:	81a3      	strh	r3, [r4, #12]
 8006048:	bd70      	pop	{r4, r5, r6, pc}
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	0152      	lsls	r2, r2, #5
 800604e:	4313      	orrs	r3, r2
 8006050:	81a3      	strh	r3, [r4, #12]
 8006052:	6560      	str	r0, [r4, #84]	; 0x54
 8006054:	e7f8      	b.n	8006048 <__sseek+0x18>
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	ffffefff 	.word	0xffffefff

0800605c <__sclose>:
 800605c:	b510      	push	{r4, lr}
 800605e:	230e      	movs	r3, #14
 8006060:	5ec9      	ldrsh	r1, [r1, r3]
 8006062:	f000 f8e3 	bl	800622c <_close_r>
 8006066:	bd10      	pop	{r4, pc}

08006068 <__swbuf_r>:
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	0005      	movs	r5, r0
 800606c:	000e      	movs	r6, r1
 800606e:	0014      	movs	r4, r2
 8006070:	2800      	cmp	r0, #0
 8006072:	d004      	beq.n	800607e <__swbuf_r+0x16>
 8006074:	6983      	ldr	r3, [r0, #24]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <__swbuf_r+0x16>
 800607a:	f7ff fa4f 	bl	800551c <__sinit>
 800607e:	4b22      	ldr	r3, [pc, #136]	; (8006108 <__swbuf_r+0xa0>)
 8006080:	429c      	cmp	r4, r3
 8006082:	d12e      	bne.n	80060e2 <__swbuf_r+0x7a>
 8006084:	686c      	ldr	r4, [r5, #4]
 8006086:	69a3      	ldr	r3, [r4, #24]
 8006088:	60a3      	str	r3, [r4, #8]
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	071b      	lsls	r3, r3, #28
 800608e:	d532      	bpl.n	80060f6 <__swbuf_r+0x8e>
 8006090:	6923      	ldr	r3, [r4, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d02f      	beq.n	80060f6 <__swbuf_r+0x8e>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	6922      	ldr	r2, [r4, #16]
 800609a:	b2f7      	uxtb	r7, r6
 800609c:	1a98      	subs	r0, r3, r2
 800609e:	6963      	ldr	r3, [r4, #20]
 80060a0:	b2f6      	uxtb	r6, r6
 80060a2:	4283      	cmp	r3, r0
 80060a4:	dc05      	bgt.n	80060b2 <__swbuf_r+0x4a>
 80060a6:	0021      	movs	r1, r4
 80060a8:	0028      	movs	r0, r5
 80060aa:	f000 f95d 	bl	8006368 <_fflush_r>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d127      	bne.n	8006102 <__swbuf_r+0x9a>
 80060b2:	68a3      	ldr	r3, [r4, #8]
 80060b4:	3001      	adds	r0, #1
 80060b6:	3b01      	subs	r3, #1
 80060b8:	60a3      	str	r3, [r4, #8]
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	6022      	str	r2, [r4, #0]
 80060c0:	701f      	strb	r7, [r3, #0]
 80060c2:	6963      	ldr	r3, [r4, #20]
 80060c4:	4283      	cmp	r3, r0
 80060c6:	d004      	beq.n	80060d2 <__swbuf_r+0x6a>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	07db      	lsls	r3, r3, #31
 80060cc:	d507      	bpl.n	80060de <__swbuf_r+0x76>
 80060ce:	2e0a      	cmp	r6, #10
 80060d0:	d105      	bne.n	80060de <__swbuf_r+0x76>
 80060d2:	0021      	movs	r1, r4
 80060d4:	0028      	movs	r0, r5
 80060d6:	f000 f947 	bl	8006368 <_fflush_r>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d111      	bne.n	8006102 <__swbuf_r+0x9a>
 80060de:	0030      	movs	r0, r6
 80060e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <__swbuf_r+0xa4>)
 80060e4:	429c      	cmp	r4, r3
 80060e6:	d101      	bne.n	80060ec <__swbuf_r+0x84>
 80060e8:	68ac      	ldr	r4, [r5, #8]
 80060ea:	e7cc      	b.n	8006086 <__swbuf_r+0x1e>
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <__swbuf_r+0xa8>)
 80060ee:	429c      	cmp	r4, r3
 80060f0:	d1c9      	bne.n	8006086 <__swbuf_r+0x1e>
 80060f2:	68ec      	ldr	r4, [r5, #12]
 80060f4:	e7c7      	b.n	8006086 <__swbuf_r+0x1e>
 80060f6:	0021      	movs	r1, r4
 80060f8:	0028      	movs	r0, r5
 80060fa:	f000 f81f 	bl	800613c <__swsetup_r>
 80060fe:	2800      	cmp	r0, #0
 8006100:	d0c9      	beq.n	8006096 <__swbuf_r+0x2e>
 8006102:	2601      	movs	r6, #1
 8006104:	4276      	negs	r6, r6
 8006106:	e7ea      	b.n	80060de <__swbuf_r+0x76>
 8006108:	08006c9c 	.word	0x08006c9c
 800610c:	08006cbc 	.word	0x08006cbc
 8006110:	08006c7c 	.word	0x08006c7c

08006114 <_write_r>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	0004      	movs	r4, r0
 8006118:	0008      	movs	r0, r1
 800611a:	0011      	movs	r1, r2
 800611c:	001a      	movs	r2, r3
 800611e:	2300      	movs	r3, #0
 8006120:	4d05      	ldr	r5, [pc, #20]	; (8006138 <_write_r+0x24>)
 8006122:	602b      	str	r3, [r5, #0]
 8006124:	f7fb fad4 	bl	80016d0 <_write>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d103      	bne.n	8006134 <_write_r+0x20>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d000      	beq.n	8006134 <_write_r+0x20>
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	bd70      	pop	{r4, r5, r6, pc}
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	200003d0 	.word	0x200003d0

0800613c <__swsetup_r>:
 800613c:	4b37      	ldr	r3, [pc, #220]	; (800621c <__swsetup_r+0xe0>)
 800613e:	b570      	push	{r4, r5, r6, lr}
 8006140:	681d      	ldr	r5, [r3, #0]
 8006142:	0006      	movs	r6, r0
 8006144:	000c      	movs	r4, r1
 8006146:	2d00      	cmp	r5, #0
 8006148:	d005      	beq.n	8006156 <__swsetup_r+0x1a>
 800614a:	69ab      	ldr	r3, [r5, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <__swsetup_r+0x1a>
 8006150:	0028      	movs	r0, r5
 8006152:	f7ff f9e3 	bl	800551c <__sinit>
 8006156:	4b32      	ldr	r3, [pc, #200]	; (8006220 <__swsetup_r+0xe4>)
 8006158:	429c      	cmp	r4, r3
 800615a:	d10f      	bne.n	800617c <__swsetup_r+0x40>
 800615c:	686c      	ldr	r4, [r5, #4]
 800615e:	230c      	movs	r3, #12
 8006160:	5ee2      	ldrsh	r2, [r4, r3]
 8006162:	b293      	uxth	r3, r2
 8006164:	0711      	lsls	r1, r2, #28
 8006166:	d42d      	bmi.n	80061c4 <__swsetup_r+0x88>
 8006168:	06d9      	lsls	r1, r3, #27
 800616a:	d411      	bmi.n	8006190 <__swsetup_r+0x54>
 800616c:	2309      	movs	r3, #9
 800616e:	2001      	movs	r0, #1
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	3337      	adds	r3, #55	; 0x37
 8006174:	4313      	orrs	r3, r2
 8006176:	81a3      	strh	r3, [r4, #12]
 8006178:	4240      	negs	r0, r0
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	4b29      	ldr	r3, [pc, #164]	; (8006224 <__swsetup_r+0xe8>)
 800617e:	429c      	cmp	r4, r3
 8006180:	d101      	bne.n	8006186 <__swsetup_r+0x4a>
 8006182:	68ac      	ldr	r4, [r5, #8]
 8006184:	e7eb      	b.n	800615e <__swsetup_r+0x22>
 8006186:	4b28      	ldr	r3, [pc, #160]	; (8006228 <__swsetup_r+0xec>)
 8006188:	429c      	cmp	r4, r3
 800618a:	d1e8      	bne.n	800615e <__swsetup_r+0x22>
 800618c:	68ec      	ldr	r4, [r5, #12]
 800618e:	e7e6      	b.n	800615e <__swsetup_r+0x22>
 8006190:	075b      	lsls	r3, r3, #29
 8006192:	d513      	bpl.n	80061bc <__swsetup_r+0x80>
 8006194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006196:	2900      	cmp	r1, #0
 8006198:	d008      	beq.n	80061ac <__swsetup_r+0x70>
 800619a:	0023      	movs	r3, r4
 800619c:	3344      	adds	r3, #68	; 0x44
 800619e:	4299      	cmp	r1, r3
 80061a0:	d002      	beq.n	80061a8 <__swsetup_r+0x6c>
 80061a2:	0030      	movs	r0, r6
 80061a4:	f000 f9ce 	bl	8006544 <_free_r>
 80061a8:	2300      	movs	r3, #0
 80061aa:	6363      	str	r3, [r4, #52]	; 0x34
 80061ac:	2224      	movs	r2, #36	; 0x24
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	4393      	bics	r3, r2
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	2300      	movs	r3, #0
 80061b6:	6063      	str	r3, [r4, #4]
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	6023      	str	r3, [r4, #0]
 80061bc:	2308      	movs	r3, #8
 80061be:	89a2      	ldrh	r2, [r4, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	81a3      	strh	r3, [r4, #12]
 80061c4:	6923      	ldr	r3, [r4, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <__swsetup_r+0xa6>
 80061ca:	21a0      	movs	r1, #160	; 0xa0
 80061cc:	2280      	movs	r2, #128	; 0x80
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	0089      	lsls	r1, r1, #2
 80061d2:	0092      	lsls	r2, r2, #2
 80061d4:	400b      	ands	r3, r1
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d003      	beq.n	80061e2 <__swsetup_r+0xa6>
 80061da:	0021      	movs	r1, r4
 80061dc:	0030      	movs	r0, r6
 80061de:	f000 f93f 	bl	8006460 <__smakebuf_r>
 80061e2:	220c      	movs	r2, #12
 80061e4:	5ea3      	ldrsh	r3, [r4, r2]
 80061e6:	2001      	movs	r0, #1
 80061e8:	001a      	movs	r2, r3
 80061ea:	b299      	uxth	r1, r3
 80061ec:	4002      	ands	r2, r0
 80061ee:	4203      	tst	r3, r0
 80061f0:	d00f      	beq.n	8006212 <__swsetup_r+0xd6>
 80061f2:	2200      	movs	r2, #0
 80061f4:	60a2      	str	r2, [r4, #8]
 80061f6:	6962      	ldr	r2, [r4, #20]
 80061f8:	4252      	negs	r2, r2
 80061fa:	61a2      	str	r2, [r4, #24]
 80061fc:	2000      	movs	r0, #0
 80061fe:	6922      	ldr	r2, [r4, #16]
 8006200:	4282      	cmp	r2, r0
 8006202:	d1ba      	bne.n	800617a <__swsetup_r+0x3e>
 8006204:	060a      	lsls	r2, r1, #24
 8006206:	d5b8      	bpl.n	800617a <__swsetup_r+0x3e>
 8006208:	2240      	movs	r2, #64	; 0x40
 800620a:	4313      	orrs	r3, r2
 800620c:	81a3      	strh	r3, [r4, #12]
 800620e:	3801      	subs	r0, #1
 8006210:	e7b3      	b.n	800617a <__swsetup_r+0x3e>
 8006212:	0788      	lsls	r0, r1, #30
 8006214:	d400      	bmi.n	8006218 <__swsetup_r+0xdc>
 8006216:	6962      	ldr	r2, [r4, #20]
 8006218:	60a2      	str	r2, [r4, #8]
 800621a:	e7ef      	b.n	80061fc <__swsetup_r+0xc0>
 800621c:	20000010 	.word	0x20000010
 8006220:	08006c9c 	.word	0x08006c9c
 8006224:	08006cbc 	.word	0x08006cbc
 8006228:	08006c7c 	.word	0x08006c7c

0800622c <_close_r>:
 800622c:	2300      	movs	r3, #0
 800622e:	b570      	push	{r4, r5, r6, lr}
 8006230:	4d06      	ldr	r5, [pc, #24]	; (800624c <_close_r+0x20>)
 8006232:	0004      	movs	r4, r0
 8006234:	0008      	movs	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fb ff3f 	bl	80020ba <_close>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d103      	bne.n	8006248 <_close_r+0x1c>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d000      	beq.n	8006248 <_close_r+0x1c>
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	200003d0 	.word	0x200003d0

08006250 <__sflush_r>:
 8006250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006252:	898b      	ldrh	r3, [r1, #12]
 8006254:	0005      	movs	r5, r0
 8006256:	000c      	movs	r4, r1
 8006258:	071a      	lsls	r2, r3, #28
 800625a:	d45f      	bmi.n	800631c <__sflush_r+0xcc>
 800625c:	684a      	ldr	r2, [r1, #4]
 800625e:	2a00      	cmp	r2, #0
 8006260:	dc04      	bgt.n	800626c <__sflush_r+0x1c>
 8006262:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006264:	2a00      	cmp	r2, #0
 8006266:	dc01      	bgt.n	800626c <__sflush_r+0x1c>
 8006268:	2000      	movs	r0, #0
 800626a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800626c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800626e:	2f00      	cmp	r7, #0
 8006270:	d0fa      	beq.n	8006268 <__sflush_r+0x18>
 8006272:	2200      	movs	r2, #0
 8006274:	2180      	movs	r1, #128	; 0x80
 8006276:	682e      	ldr	r6, [r5, #0]
 8006278:	602a      	str	r2, [r5, #0]
 800627a:	001a      	movs	r2, r3
 800627c:	0149      	lsls	r1, r1, #5
 800627e:	400a      	ands	r2, r1
 8006280:	420b      	tst	r3, r1
 8006282:	d034      	beq.n	80062ee <__sflush_r+0x9e>
 8006284:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006286:	89a3      	ldrh	r3, [r4, #12]
 8006288:	075b      	lsls	r3, r3, #29
 800628a:	d506      	bpl.n	800629a <__sflush_r+0x4a>
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	1ac0      	subs	r0, r0, r3
 8006290:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <__sflush_r+0x4a>
 8006296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006298:	1ac0      	subs	r0, r0, r3
 800629a:	0002      	movs	r2, r0
 800629c:	6a21      	ldr	r1, [r4, #32]
 800629e:	2300      	movs	r3, #0
 80062a0:	0028      	movs	r0, r5
 80062a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80062a4:	47b8      	blx	r7
 80062a6:	89a1      	ldrh	r1, [r4, #12]
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d106      	bne.n	80062ba <__sflush_r+0x6a>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	2b1d      	cmp	r3, #29
 80062b0:	d831      	bhi.n	8006316 <__sflush_r+0xc6>
 80062b2:	4a2c      	ldr	r2, [pc, #176]	; (8006364 <__sflush_r+0x114>)
 80062b4:	40da      	lsrs	r2, r3
 80062b6:	07d3      	lsls	r3, r2, #31
 80062b8:	d52d      	bpl.n	8006316 <__sflush_r+0xc6>
 80062ba:	2300      	movs	r3, #0
 80062bc:	6063      	str	r3, [r4, #4]
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	04cb      	lsls	r3, r1, #19
 80062c4:	d505      	bpl.n	80062d2 <__sflush_r+0x82>
 80062c6:	1c43      	adds	r3, r0, #1
 80062c8:	d102      	bne.n	80062d0 <__sflush_r+0x80>
 80062ca:	682b      	ldr	r3, [r5, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d100      	bne.n	80062d2 <__sflush_r+0x82>
 80062d0:	6560      	str	r0, [r4, #84]	; 0x54
 80062d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062d4:	602e      	str	r6, [r5, #0]
 80062d6:	2900      	cmp	r1, #0
 80062d8:	d0c6      	beq.n	8006268 <__sflush_r+0x18>
 80062da:	0023      	movs	r3, r4
 80062dc:	3344      	adds	r3, #68	; 0x44
 80062de:	4299      	cmp	r1, r3
 80062e0:	d002      	beq.n	80062e8 <__sflush_r+0x98>
 80062e2:	0028      	movs	r0, r5
 80062e4:	f000 f92e 	bl	8006544 <_free_r>
 80062e8:	2000      	movs	r0, #0
 80062ea:	6360      	str	r0, [r4, #52]	; 0x34
 80062ec:	e7bd      	b.n	800626a <__sflush_r+0x1a>
 80062ee:	2301      	movs	r3, #1
 80062f0:	0028      	movs	r0, r5
 80062f2:	6a21      	ldr	r1, [r4, #32]
 80062f4:	47b8      	blx	r7
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	d1c5      	bne.n	8006286 <__sflush_r+0x36>
 80062fa:	682b      	ldr	r3, [r5, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0c2      	beq.n	8006286 <__sflush_r+0x36>
 8006300:	2b1d      	cmp	r3, #29
 8006302:	d001      	beq.n	8006308 <__sflush_r+0xb8>
 8006304:	2b16      	cmp	r3, #22
 8006306:	d101      	bne.n	800630c <__sflush_r+0xbc>
 8006308:	602e      	str	r6, [r5, #0]
 800630a:	e7ad      	b.n	8006268 <__sflush_r+0x18>
 800630c:	2340      	movs	r3, #64	; 0x40
 800630e:	89a2      	ldrh	r2, [r4, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	81a3      	strh	r3, [r4, #12]
 8006314:	e7a9      	b.n	800626a <__sflush_r+0x1a>
 8006316:	2340      	movs	r3, #64	; 0x40
 8006318:	430b      	orrs	r3, r1
 800631a:	e7fa      	b.n	8006312 <__sflush_r+0xc2>
 800631c:	690f      	ldr	r7, [r1, #16]
 800631e:	2f00      	cmp	r7, #0
 8006320:	d0a2      	beq.n	8006268 <__sflush_r+0x18>
 8006322:	680a      	ldr	r2, [r1, #0]
 8006324:	600f      	str	r7, [r1, #0]
 8006326:	1bd2      	subs	r2, r2, r7
 8006328:	9201      	str	r2, [sp, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	079b      	lsls	r3, r3, #30
 800632e:	d100      	bne.n	8006332 <__sflush_r+0xe2>
 8006330:	694a      	ldr	r2, [r1, #20]
 8006332:	60a2      	str	r2, [r4, #8]
 8006334:	9b01      	ldr	r3, [sp, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	dc00      	bgt.n	800633c <__sflush_r+0xec>
 800633a:	e795      	b.n	8006268 <__sflush_r+0x18>
 800633c:	003a      	movs	r2, r7
 800633e:	0028      	movs	r0, r5
 8006340:	9b01      	ldr	r3, [sp, #4]
 8006342:	6a21      	ldr	r1, [r4, #32]
 8006344:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006346:	47b0      	blx	r6
 8006348:	2800      	cmp	r0, #0
 800634a:	dc06      	bgt.n	800635a <__sflush_r+0x10a>
 800634c:	2340      	movs	r3, #64	; 0x40
 800634e:	2001      	movs	r0, #1
 8006350:	89a2      	ldrh	r2, [r4, #12]
 8006352:	4240      	negs	r0, r0
 8006354:	4313      	orrs	r3, r2
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	e787      	b.n	800626a <__sflush_r+0x1a>
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	183f      	adds	r7, r7, r0
 800635e:	1a1b      	subs	r3, r3, r0
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	e7e7      	b.n	8006334 <__sflush_r+0xe4>
 8006364:	20400001 	.word	0x20400001

08006368 <_fflush_r>:
 8006368:	690b      	ldr	r3, [r1, #16]
 800636a:	b570      	push	{r4, r5, r6, lr}
 800636c:	0005      	movs	r5, r0
 800636e:	000c      	movs	r4, r1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <_fflush_r+0x12>
 8006374:	2500      	movs	r5, #0
 8006376:	0028      	movs	r0, r5
 8006378:	bd70      	pop	{r4, r5, r6, pc}
 800637a:	2800      	cmp	r0, #0
 800637c:	d004      	beq.n	8006388 <_fflush_r+0x20>
 800637e:	6983      	ldr	r3, [r0, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <_fflush_r+0x20>
 8006384:	f7ff f8ca 	bl	800551c <__sinit>
 8006388:	4b14      	ldr	r3, [pc, #80]	; (80063dc <_fflush_r+0x74>)
 800638a:	429c      	cmp	r4, r3
 800638c:	d11b      	bne.n	80063c6 <_fflush_r+0x5e>
 800638e:	686c      	ldr	r4, [r5, #4]
 8006390:	220c      	movs	r2, #12
 8006392:	5ea3      	ldrsh	r3, [r4, r2]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0ed      	beq.n	8006374 <_fflush_r+0xc>
 8006398:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800639a:	07d2      	lsls	r2, r2, #31
 800639c:	d404      	bmi.n	80063a8 <_fflush_r+0x40>
 800639e:	059b      	lsls	r3, r3, #22
 80063a0:	d402      	bmi.n	80063a8 <_fflush_r+0x40>
 80063a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063a4:	f7ff f95b 	bl	800565e <__retarget_lock_acquire_recursive>
 80063a8:	0028      	movs	r0, r5
 80063aa:	0021      	movs	r1, r4
 80063ac:	f7ff ff50 	bl	8006250 <__sflush_r>
 80063b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063b2:	0005      	movs	r5, r0
 80063b4:	07db      	lsls	r3, r3, #31
 80063b6:	d4de      	bmi.n	8006376 <_fflush_r+0xe>
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	059b      	lsls	r3, r3, #22
 80063bc:	d4db      	bmi.n	8006376 <_fflush_r+0xe>
 80063be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063c0:	f7ff f94e 	bl	8005660 <__retarget_lock_release_recursive>
 80063c4:	e7d7      	b.n	8006376 <_fflush_r+0xe>
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <_fflush_r+0x78>)
 80063c8:	429c      	cmp	r4, r3
 80063ca:	d101      	bne.n	80063d0 <_fflush_r+0x68>
 80063cc:	68ac      	ldr	r4, [r5, #8]
 80063ce:	e7df      	b.n	8006390 <_fflush_r+0x28>
 80063d0:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <_fflush_r+0x7c>)
 80063d2:	429c      	cmp	r4, r3
 80063d4:	d1dc      	bne.n	8006390 <_fflush_r+0x28>
 80063d6:	68ec      	ldr	r4, [r5, #12]
 80063d8:	e7da      	b.n	8006390 <_fflush_r+0x28>
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	08006c9c 	.word	0x08006c9c
 80063e0:	08006cbc 	.word	0x08006cbc
 80063e4:	08006c7c 	.word	0x08006c7c

080063e8 <_lseek_r>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	0004      	movs	r4, r0
 80063ec:	0008      	movs	r0, r1
 80063ee:	0011      	movs	r1, r2
 80063f0:	001a      	movs	r2, r3
 80063f2:	2300      	movs	r3, #0
 80063f4:	4d05      	ldr	r5, [pc, #20]	; (800640c <_lseek_r+0x24>)
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	f7fb fe80 	bl	80020fc <_lseek>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d103      	bne.n	8006408 <_lseek_r+0x20>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d000      	beq.n	8006408 <_lseek_r+0x20>
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	bd70      	pop	{r4, r5, r6, pc}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	200003d0 	.word	0x200003d0

08006410 <__swhatbuf_r>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	000e      	movs	r6, r1
 8006414:	001d      	movs	r5, r3
 8006416:	230e      	movs	r3, #14
 8006418:	5ec9      	ldrsh	r1, [r1, r3]
 800641a:	0014      	movs	r4, r2
 800641c:	b096      	sub	sp, #88	; 0x58
 800641e:	2900      	cmp	r1, #0
 8006420:	da07      	bge.n	8006432 <__swhatbuf_r+0x22>
 8006422:	2300      	movs	r3, #0
 8006424:	602b      	str	r3, [r5, #0]
 8006426:	89b3      	ldrh	r3, [r6, #12]
 8006428:	061b      	lsls	r3, r3, #24
 800642a:	d411      	bmi.n	8006450 <__swhatbuf_r+0x40>
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	e00f      	b.n	8006452 <__swhatbuf_r+0x42>
 8006432:	466a      	mov	r2, sp
 8006434:	f000 f90a 	bl	800664c <_fstat_r>
 8006438:	2800      	cmp	r0, #0
 800643a:	dbf2      	blt.n	8006422 <__swhatbuf_r+0x12>
 800643c:	23f0      	movs	r3, #240	; 0xf0
 800643e:	9901      	ldr	r1, [sp, #4]
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	4019      	ands	r1, r3
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <__swhatbuf_r+0x4c>)
 8006446:	18c9      	adds	r1, r1, r3
 8006448:	424b      	negs	r3, r1
 800644a:	4159      	adcs	r1, r3
 800644c:	6029      	str	r1, [r5, #0]
 800644e:	e7ed      	b.n	800642c <__swhatbuf_r+0x1c>
 8006450:	2340      	movs	r3, #64	; 0x40
 8006452:	2000      	movs	r0, #0
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	b016      	add	sp, #88	; 0x58
 8006458:	bd70      	pop	{r4, r5, r6, pc}
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	ffffe000 	.word	0xffffe000

08006460 <__smakebuf_r>:
 8006460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006462:	2602      	movs	r6, #2
 8006464:	898b      	ldrh	r3, [r1, #12]
 8006466:	0005      	movs	r5, r0
 8006468:	000c      	movs	r4, r1
 800646a:	4233      	tst	r3, r6
 800646c:	d006      	beq.n	800647c <__smakebuf_r+0x1c>
 800646e:	0023      	movs	r3, r4
 8006470:	3347      	adds	r3, #71	; 0x47
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	6123      	str	r3, [r4, #16]
 8006476:	2301      	movs	r3, #1
 8006478:	6163      	str	r3, [r4, #20]
 800647a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800647c:	466a      	mov	r2, sp
 800647e:	ab01      	add	r3, sp, #4
 8006480:	f7ff ffc6 	bl	8006410 <__swhatbuf_r>
 8006484:	9900      	ldr	r1, [sp, #0]
 8006486:	0007      	movs	r7, r0
 8006488:	0028      	movs	r0, r5
 800648a:	f7ff f8eb 	bl	8005664 <_malloc_r>
 800648e:	2800      	cmp	r0, #0
 8006490:	d108      	bne.n	80064a4 <__smakebuf_r+0x44>
 8006492:	220c      	movs	r2, #12
 8006494:	5ea3      	ldrsh	r3, [r4, r2]
 8006496:	059a      	lsls	r2, r3, #22
 8006498:	d4ef      	bmi.n	800647a <__smakebuf_r+0x1a>
 800649a:	2203      	movs	r2, #3
 800649c:	4393      	bics	r3, r2
 800649e:	431e      	orrs	r6, r3
 80064a0:	81a6      	strh	r6, [r4, #12]
 80064a2:	e7e4      	b.n	800646e <__smakebuf_r+0xe>
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <__smakebuf_r+0x84>)
 80064a6:	62ab      	str	r3, [r5, #40]	; 0x28
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	89a2      	ldrh	r2, [r4, #12]
 80064ac:	6020      	str	r0, [r4, #0]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	81a3      	strh	r3, [r4, #12]
 80064b2:	9b00      	ldr	r3, [sp, #0]
 80064b4:	6120      	str	r0, [r4, #16]
 80064b6:	6163      	str	r3, [r4, #20]
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00d      	beq.n	80064da <__smakebuf_r+0x7a>
 80064be:	0028      	movs	r0, r5
 80064c0:	230e      	movs	r3, #14
 80064c2:	5ee1      	ldrsh	r1, [r4, r3]
 80064c4:	f000 f8d4 	bl	8006670 <_isatty_r>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d006      	beq.n	80064da <__smakebuf_r+0x7a>
 80064cc:	2203      	movs	r2, #3
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	4393      	bics	r3, r2
 80064d2:	001a      	movs	r2, r3
 80064d4:	2301      	movs	r3, #1
 80064d6:	4313      	orrs	r3, r2
 80064d8:	81a3      	strh	r3, [r4, #12]
 80064da:	89a0      	ldrh	r0, [r4, #12]
 80064dc:	4307      	orrs	r7, r0
 80064de:	81a7      	strh	r7, [r4, #12]
 80064e0:	e7cb      	b.n	800647a <__smakebuf_r+0x1a>
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	080054a1 	.word	0x080054a1

080064e8 <memchr>:
 80064e8:	b2c9      	uxtb	r1, r1
 80064ea:	1882      	adds	r2, r0, r2
 80064ec:	4290      	cmp	r0, r2
 80064ee:	d101      	bne.n	80064f4 <memchr+0xc>
 80064f0:	2000      	movs	r0, #0
 80064f2:	4770      	bx	lr
 80064f4:	7803      	ldrb	r3, [r0, #0]
 80064f6:	428b      	cmp	r3, r1
 80064f8:	d0fb      	beq.n	80064f2 <memchr+0xa>
 80064fa:	3001      	adds	r0, #1
 80064fc:	e7f6      	b.n	80064ec <memchr+0x4>

080064fe <memmove>:
 80064fe:	b510      	push	{r4, lr}
 8006500:	4288      	cmp	r0, r1
 8006502:	d902      	bls.n	800650a <memmove+0xc>
 8006504:	188b      	adds	r3, r1, r2
 8006506:	4298      	cmp	r0, r3
 8006508:	d303      	bcc.n	8006512 <memmove+0x14>
 800650a:	2300      	movs	r3, #0
 800650c:	e007      	b.n	800651e <memmove+0x20>
 800650e:	5c8b      	ldrb	r3, [r1, r2]
 8006510:	5483      	strb	r3, [r0, r2]
 8006512:	3a01      	subs	r2, #1
 8006514:	d2fb      	bcs.n	800650e <memmove+0x10>
 8006516:	bd10      	pop	{r4, pc}
 8006518:	5ccc      	ldrb	r4, [r1, r3]
 800651a:	54c4      	strb	r4, [r0, r3]
 800651c:	3301      	adds	r3, #1
 800651e:	429a      	cmp	r2, r3
 8006520:	d1fa      	bne.n	8006518 <memmove+0x1a>
 8006522:	e7f8      	b.n	8006516 <memmove+0x18>

08006524 <__malloc_lock>:
 8006524:	b510      	push	{r4, lr}
 8006526:	4802      	ldr	r0, [pc, #8]	; (8006530 <__malloc_lock+0xc>)
 8006528:	f7ff f899 	bl	800565e <__retarget_lock_acquire_recursive>
 800652c:	bd10      	pop	{r4, pc}
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	200003c8 	.word	0x200003c8

08006534 <__malloc_unlock>:
 8006534:	b510      	push	{r4, lr}
 8006536:	4802      	ldr	r0, [pc, #8]	; (8006540 <__malloc_unlock+0xc>)
 8006538:	f7ff f892 	bl	8005660 <__retarget_lock_release_recursive>
 800653c:	bd10      	pop	{r4, pc}
 800653e:	46c0      	nop			; (mov r8, r8)
 8006540:	200003c8 	.word	0x200003c8

08006544 <_free_r>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	0005      	movs	r5, r0
 8006548:	2900      	cmp	r1, #0
 800654a:	d010      	beq.n	800656e <_free_r+0x2a>
 800654c:	1f0c      	subs	r4, r1, #4
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	da00      	bge.n	8006556 <_free_r+0x12>
 8006554:	18e4      	adds	r4, r4, r3
 8006556:	0028      	movs	r0, r5
 8006558:	f7ff ffe4 	bl	8006524 <__malloc_lock>
 800655c:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <_free_r+0x90>)
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d105      	bne.n	8006570 <_free_r+0x2c>
 8006564:	6063      	str	r3, [r4, #4]
 8006566:	6014      	str	r4, [r2, #0]
 8006568:	0028      	movs	r0, r5
 800656a:	f7ff ffe3 	bl	8006534 <__malloc_unlock>
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	42a3      	cmp	r3, r4
 8006572:	d908      	bls.n	8006586 <_free_r+0x42>
 8006574:	6821      	ldr	r1, [r4, #0]
 8006576:	1860      	adds	r0, r4, r1
 8006578:	4283      	cmp	r3, r0
 800657a:	d1f3      	bne.n	8006564 <_free_r+0x20>
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	1841      	adds	r1, r0, r1
 8006582:	6021      	str	r1, [r4, #0]
 8006584:	e7ee      	b.n	8006564 <_free_r+0x20>
 8006586:	001a      	movs	r2, r3
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <_free_r+0x4e>
 800658e:	42a3      	cmp	r3, r4
 8006590:	d9f9      	bls.n	8006586 <_free_r+0x42>
 8006592:	6811      	ldr	r1, [r2, #0]
 8006594:	1850      	adds	r0, r2, r1
 8006596:	42a0      	cmp	r0, r4
 8006598:	d10b      	bne.n	80065b2 <_free_r+0x6e>
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	1809      	adds	r1, r1, r0
 800659e:	1850      	adds	r0, r2, r1
 80065a0:	6011      	str	r1, [r2, #0]
 80065a2:	4283      	cmp	r3, r0
 80065a4:	d1e0      	bne.n	8006568 <_free_r+0x24>
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	1841      	adds	r1, r0, r1
 80065ac:	6011      	str	r1, [r2, #0]
 80065ae:	6053      	str	r3, [r2, #4]
 80065b0:	e7da      	b.n	8006568 <_free_r+0x24>
 80065b2:	42a0      	cmp	r0, r4
 80065b4:	d902      	bls.n	80065bc <_free_r+0x78>
 80065b6:	230c      	movs	r3, #12
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	e7d5      	b.n	8006568 <_free_r+0x24>
 80065bc:	6821      	ldr	r1, [r4, #0]
 80065be:	1860      	adds	r0, r4, r1
 80065c0:	4283      	cmp	r3, r0
 80065c2:	d103      	bne.n	80065cc <_free_r+0x88>
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	1841      	adds	r1, r0, r1
 80065ca:	6021      	str	r1, [r4, #0]
 80065cc:	6063      	str	r3, [r4, #4]
 80065ce:	6054      	str	r4, [r2, #4]
 80065d0:	e7ca      	b.n	8006568 <_free_r+0x24>
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	2000023c 	.word	0x2000023c

080065d8 <_realloc_r>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	0007      	movs	r7, r0
 80065dc:	000d      	movs	r5, r1
 80065de:	0016      	movs	r6, r2
 80065e0:	2900      	cmp	r1, #0
 80065e2:	d105      	bne.n	80065f0 <_realloc_r+0x18>
 80065e4:	0011      	movs	r1, r2
 80065e6:	f7ff f83d 	bl	8005664 <_malloc_r>
 80065ea:	0004      	movs	r4, r0
 80065ec:	0020      	movs	r0, r4
 80065ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	d103      	bne.n	80065fc <_realloc_r+0x24>
 80065f4:	f7ff ffa6 	bl	8006544 <_free_r>
 80065f8:	0034      	movs	r4, r6
 80065fa:	e7f7      	b.n	80065ec <_realloc_r+0x14>
 80065fc:	f000 f84a 	bl	8006694 <_malloc_usable_size_r>
 8006600:	002c      	movs	r4, r5
 8006602:	42b0      	cmp	r0, r6
 8006604:	d2f2      	bcs.n	80065ec <_realloc_r+0x14>
 8006606:	0031      	movs	r1, r6
 8006608:	0038      	movs	r0, r7
 800660a:	f7ff f82b 	bl	8005664 <_malloc_r>
 800660e:	1e04      	subs	r4, r0, #0
 8006610:	d0ec      	beq.n	80065ec <_realloc_r+0x14>
 8006612:	0029      	movs	r1, r5
 8006614:	0032      	movs	r2, r6
 8006616:	f7fe fed3 	bl	80053c0 <memcpy>
 800661a:	0029      	movs	r1, r5
 800661c:	0038      	movs	r0, r7
 800661e:	f7ff ff91 	bl	8006544 <_free_r>
 8006622:	e7e3      	b.n	80065ec <_realloc_r+0x14>

08006624 <_read_r>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	0004      	movs	r4, r0
 8006628:	0008      	movs	r0, r1
 800662a:	0011      	movs	r1, r2
 800662c:	001a      	movs	r2, r3
 800662e:	2300      	movs	r3, #0
 8006630:	4d05      	ldr	r5, [pc, #20]	; (8006648 <_read_r+0x24>)
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	f7fb fd24 	bl	8002080 <_read>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d103      	bne.n	8006644 <_read_r+0x20>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d000      	beq.n	8006644 <_read_r+0x20>
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	200003d0 	.word	0x200003d0

0800664c <_fstat_r>:
 800664c:	2300      	movs	r3, #0
 800664e:	b570      	push	{r4, r5, r6, lr}
 8006650:	4d06      	ldr	r5, [pc, #24]	; (800666c <_fstat_r+0x20>)
 8006652:	0004      	movs	r4, r0
 8006654:	0008      	movs	r0, r1
 8006656:	0011      	movs	r1, r2
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	f7fb fd38 	bl	80020ce <_fstat>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d103      	bne.n	800666a <_fstat_r+0x1e>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d000      	beq.n	800666a <_fstat_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	200003d0 	.word	0x200003d0

08006670 <_isatty_r>:
 8006670:	2300      	movs	r3, #0
 8006672:	b570      	push	{r4, r5, r6, lr}
 8006674:	4d06      	ldr	r5, [pc, #24]	; (8006690 <_isatty_r+0x20>)
 8006676:	0004      	movs	r4, r0
 8006678:	0008      	movs	r0, r1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	f7fb fd35 	bl	80020ea <_isatty>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d103      	bne.n	800668c <_isatty_r+0x1c>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d000      	beq.n	800668c <_isatty_r+0x1c>
 800668a:	6023      	str	r3, [r4, #0]
 800668c:	bd70      	pop	{r4, r5, r6, pc}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	200003d0 	.word	0x200003d0

08006694 <_malloc_usable_size_r>:
 8006694:	1f0b      	subs	r3, r1, #4
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	1f18      	subs	r0, r3, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	da01      	bge.n	80066a2 <_malloc_usable_size_r+0xe>
 800669e:	580b      	ldr	r3, [r1, r0]
 80066a0:	18c0      	adds	r0, r0, r3
 80066a2:	4770      	bx	lr

080066a4 <_init>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066aa:	bc08      	pop	{r3}
 80066ac:	469e      	mov	lr, r3
 80066ae:	4770      	bx	lr

080066b0 <_fini>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	46c0      	nop			; (mov r8, r8)
 80066b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b6:	bc08      	pop	{r3}
 80066b8:	469e      	mov	lr, r3
 80066ba:	4770      	bx	lr
